
VIN-p-PN532.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070c8  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08007368  08007368  00008368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007474  08007474  00008474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800747c  0800747c  0000847c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08007480  08007480  00008480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000060  24000000  08007484  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000004b8  24000060  080074e4  00009060  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000518  080074e4  00009518  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 10 .debug_info   00011ea0  00000000  00000000  0000908e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000023b1  00000000  00000000  0001af2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000c88  00000000  00000000  0001d2e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000009a0  00000000  00000000  0001df68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003718e  00000000  00000000  0001e908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00010ead  00000000  00000000  00055a96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015da1e  00000000  00000000  00066943  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001c4361  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000038d0  00000000  00000000  001c43a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000065  00000000  00000000  001c7c74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000060 	.word	0x24000060
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08007350 	.word	0x08007350

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000064 	.word	0x24000064
 80002dc:	08007350 	.word	0x08007350

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <SS_HIGH>:


/*
 * This is just a wrapper around HAL_GPIO_WritePin used to set the pin for Slave Select
 */
static inline void SS_HIGH (void) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PN532_SS_GPIO_Port, PN532_SS_Pin, GPIO_PIN_SET);
 80006b0:	2201      	movs	r2, #1
 80006b2:	2110      	movs	r1, #16
 80006b4:	4802      	ldr	r0, [pc, #8]	@ (80006c0 <SS_HIGH+0x14>)
 80006b6:	f001 fb6d 	bl	8001d94 <HAL_GPIO_WritePin>
}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	58020400 	.word	0x58020400

080006c4 <SS_LOW>:


/*
 * This is just a wrapper around HAL_GPIO_WritePin used to reset the pin for Slave Select
 */
static inline void SS_LOW (void) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PN532_SS_GPIO_Port, PN532_SS_Pin, GPIO_PIN_RESET);
 80006c8:	2200      	movs	r2, #0
 80006ca:	2110      	movs	r1, #16
 80006cc:	4802      	ldr	r0, [pc, #8]	@ (80006d8 <SS_LOW+0x14>)
 80006ce:	f001 fb61 	bl	8001d94 <HAL_GPIO_WritePin>
}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	58020400 	.word	0x58020400

080006dc <SPI_read>:


/*
 * SPI_read : it receives one byte over SPI in blocking mode
 */
static uint8_t SPI_read(SPI_HandleTypeDef *hspi){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
	uint8_t RxData[1];
	HAL_StatusTypeDef status;

	status = HAL_SPI_Receive(hspi, RxData, 1, HAL_MAX_DELAY);
 80006e4:	f107 010c 	add.w	r1, r7, #12
 80006e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006ec:	2201      	movs	r2, #1
 80006ee:	6878      	ldr	r0, [r7, #4]
 80006f0:	f004 fcc8 	bl	8005084 <HAL_SPI_Receive>
 80006f4:	4603      	mov	r3, r0
 80006f6:	73fb      	strb	r3, [r7, #15]
	return RxData[0];
 80006f8:	7b3b      	ldrb	r3, [r7, #12]
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	3710      	adds	r7, #16
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}

08000702 <SPI_write>:

/*
 * SPI_write : it sends one byte over SPI in blocking mode
 */
static void SPI_write(SPI_HandleTypeDef *hspi, uint8_t data){
 8000702:	b580      	push	{r7, lr}
 8000704:	b084      	sub	sp, #16
 8000706:	af00      	add	r7, sp, #0
 8000708:	6078      	str	r0, [r7, #4]
 800070a:	460b      	mov	r3, r1
 800070c:	70fb      	strb	r3, [r7, #3]
	uint8_t TxData[1];
	HAL_StatusTypeDef status;

	TxData[0] = data;
 800070e:	78fb      	ldrb	r3, [r7, #3]
 8000710:	733b      	strb	r3, [r7, #12]
	status = HAL_SPI_Transmit(hspi, TxData, 1, HAL_MAX_DELAY);
 8000712:	f107 010c 	add.w	r1, r7, #12
 8000716:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800071a:	2201      	movs	r2, #1
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f004 fac3 	bl	8004ca8 <HAL_SPI_Transmit>
 8000722:	4603      	mov	r3, r0
 8000724:	73fb      	strb	r3, [r7, #15]
}
 8000726:	bf00      	nop
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
	...

08000730 <isReadyToSend>:
  * It is a helper function used within waitToBeReady()
  *
  * @ return: STATUS_532_OK if the PN532 has a frame available to be transferred to the host controller.
  *
  */
 static StatusCode532_t isReadyToSend(void) {
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
     SS_LOW();
 8000736:	f7ff ffc5 	bl	80006c4 <SS_LOW>

     SPI_write(&SPI_HANDLER, PN532_SPI_STATREAD);           	// write SPI STATUS READ command to PN532 module
 800073a:	2102      	movs	r1, #2
 800073c:	480a      	ldr	r0, [pc, #40]	@ (8000768 <isReadyToSend+0x38>)
 800073e:	f7ff ffe0 	bl	8000702 <SPI_write>
     uint8_t status = SPI_read(&SPI_HANDLER);             		// and read response from PN532
 8000742:	4809      	ldr	r0, [pc, #36]	@ (8000768 <isReadyToSend+0x38>)
 8000744:	f7ff ffca 	bl	80006dc <SPI_read>
 8000748:	4603      	mov	r3, r0
 800074a:	71fb      	strb	r3, [r7, #7]

     SS_HIGH();
 800074c:	f7ff ffae 	bl	80006ac <SS_HIGH>

     if (status == PN532_SPI_READY){ 	// check if PN532 is ready (LSB=1) and return the result
 8000750:	79fb      	ldrb	r3, [r7, #7]
 8000752:	2b01      	cmp	r3, #1
 8000754:	d101      	bne.n	800075a <isReadyToSend+0x2a>
     	return STATUS_532_OK;
 8000756:	2300      	movs	r3, #0
 8000758:	e001      	b.n	800075e <isReadyToSend+0x2e>
     }
     else return STATUS_532_ERROR;
 800075a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 }
 800075e:	4618      	mov	r0, r3
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	2400017c 	.word	0x2400017c

0800076c <waitToBeReady>:
  * Waits for the PN532 to become ready, up to a timeout in milliseconds.
  * It is a helper function used within sendCommand() and readResponse
  *
  * @return: STATUS_532_OK if ready, STATUS_532_ERROR if timeout
  */
 static StatusCode532_t waitToBeReady(uint16_t wait_time) {
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	80fb      	strh	r3, [r7, #6]
     while (isReadyToSend() != STATUS_532_OK) {
 8000776:	e00b      	b.n	8000790 <waitToBeReady+0x24>
         HAL_Delay(1);
 8000778:	2001      	movs	r0, #1
 800077a:	f000 ffcf 	bl	800171c <HAL_Delay>
         wait_time--;
 800077e:	88fb      	ldrh	r3, [r7, #6]
 8000780:	3b01      	subs	r3, #1
 8000782:	80fb      	strh	r3, [r7, #6]
         if (wait_time == 0) return STATUS_532_ERROR;
 8000784:	88fb      	ldrh	r3, [r7, #6]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d102      	bne.n	8000790 <waitToBeReady+0x24>
 800078a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800078e:	e005      	b.n	800079c <waitToBeReady+0x30>
     while (isReadyToSend() != STATUS_532_OK) {
 8000790:	f7ff ffce 	bl	8000730 <isReadyToSend>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d1ee      	bne.n	8000778 <waitToBeReady+0xc>
     }
     return STATUS_532_OK;
 800079a:	2300      	movs	r3, #0
 }
 800079c:	4618      	mov	r0, r3
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <readACK>:
  * Reads the 6-byte ACK frame from the PN532 and checks if it matches the expected ACK values.
  * It is used within the sendCommand()
  * The expected ACK frame is 00 00 FF 00 FF 00
  *
  */
 static StatusCode532_t readACK(void) {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0
     uint8_t ACK_buffer[6];
     SS_LOW();
 80007aa:	f7ff ff8b 	bl	80006c4 <SS_LOW>

     SPI_write(&SPI_HANDLER, PN532_SPI_DATAREAD);  			// send PN532 the DATA READ SPI byte indicating the SPI READ operation
 80007ae:	2103      	movs	r1, #3
 80007b0:	4819      	ldr	r0, [pc, #100]	@ (8000818 <readACK+0x74>)
 80007b2:	f7ff ffa6 	bl	8000702 <SPI_write>
     for (int i = 0; i < 6; i++)
 80007b6:	2300      	movs	r3, #0
 80007b8:	60fb      	str	r3, [r7, #12]
 80007ba:	e00c      	b.n	80007d6 <readACK+0x32>
         ACK_buffer[i] = SPI_read(&SPI_HANDLER); 			// read 6-byte ACK frame
 80007bc:	4816      	ldr	r0, [pc, #88]	@ (8000818 <readACK+0x74>)
 80007be:	f7ff ff8d 	bl	80006dc <SPI_read>
 80007c2:	4603      	mov	r3, r0
 80007c4:	4619      	mov	r1, r3
 80007c6:	463a      	mov	r2, r7
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	4413      	add	r3, r2
 80007cc:	460a      	mov	r2, r1
 80007ce:	701a      	strb	r2, [r3, #0]
     for (int i = 0; i < 6; i++)
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	3301      	adds	r3, #1
 80007d4:	60fb      	str	r3, [r7, #12]
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	2b05      	cmp	r3, #5
 80007da:	ddef      	ble.n	80007bc <readACK+0x18>

     SS_HIGH();
 80007dc:	f7ff ff66 	bl	80006ac <SS_HIGH>

     // compare the received response to ACK frame
     for (int i=0; i<6; i++) {
 80007e0:	2300      	movs	r3, #0
 80007e2:	60bb      	str	r3, [r7, #8]
 80007e4:	e00f      	b.n	8000806 <readACK+0x62>
    	 if (ACK_buffer[i] != ACK_frame[i]) return STATUS_532_INVALID_ACK;
 80007e6:	463a      	mov	r2, r7
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	4413      	add	r3, r2
 80007ec:	781a      	ldrb	r2, [r3, #0]
 80007ee:	490b      	ldr	r1, [pc, #44]	@ (800081c <readACK+0x78>)
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	440b      	add	r3, r1
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	429a      	cmp	r2, r3
 80007f8:	d002      	beq.n	8000800 <readACK+0x5c>
 80007fa:	f06f 0301 	mvn.w	r3, #1
 80007fe:	e006      	b.n	800080e <readACK+0x6a>
     for (int i=0; i<6; i++) {
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	3301      	adds	r3, #1
 8000804:	60bb      	str	r3, [r7, #8]
 8000806:	68bb      	ldr	r3, [r7, #8]
 8000808:	2b05      	cmp	r3, #5
 800080a:	ddec      	ble.n	80007e6 <readACK+0x42>
     }
     return STATUS_532_OK;
 800080c:	2300      	movs	r3, #0
 }
 800080e:	4618      	mov	r0, r3
 8000810:	3710      	adds	r7, #16
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	2400017c 	.word	0x2400017c
 800081c:	08007400 	.word	0x08007400

08000820 <sendFrame>:
  * It is a helper function udsed within sendCommand()
  *
  * Normal frame:
  * 00 00 FF LEN LCS TFI PD0 ... PDn DCS 00
  */
 static void sendFrame(uint8_t *cmd, uint8_t cmd_length) {
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
 8000828:	460b      	mov	r3, r1
 800082a:	70fb      	strb	r3, [r7, #3]
     SS_LOW();
 800082c:	f7ff ff4a 	bl	80006c4 <SS_LOW>

     SPI_write(&SPI_HANDLER, PN532_SPI_DATAWRITE);				// send PN532 the DATAWRITE SPI operation
 8000830:	2101      	movs	r1, #1
 8000832:	4829      	ldr	r0, [pc, #164]	@ (80008d8 <sendFrame+0xb8>)
 8000834:	f7ff ff65 	bl	8000702 <SPI_write>
     SPI_write(&SPI_HANDLER, PN532_PREAMBLE);					// write PREAMBLE
 8000838:	2100      	movs	r1, #0
 800083a:	4827      	ldr	r0, [pc, #156]	@ (80008d8 <sendFrame+0xb8>)
 800083c:	f7ff ff61 	bl	8000702 <SPI_write>
     SPI_write(&SPI_HANDLER, PN532_STARTCODE1);					// write the first byte of START CODE
 8000840:	2100      	movs	r1, #0
 8000842:	4825      	ldr	r0, [pc, #148]	@ (80008d8 <sendFrame+0xb8>)
 8000844:	f7ff ff5d 	bl	8000702 <SPI_write>
     SPI_write(&SPI_HANDLER, PN532_STARTCODE2);					// write the second byte of START CODE
 8000848:	21ff      	movs	r1, #255	@ 0xff
 800084a:	4823      	ldr	r0, [pc, #140]	@ (80008d8 <sendFrame+0xb8>)
 800084c:	f7ff ff59 	bl	8000702 <SPI_write>

     cmd_length++;												// length of data field: TFI + DATA
 8000850:	78fb      	ldrb	r3, [r7, #3]
 8000852:	3301      	adds	r3, #1
 8000854:	70fb      	strb	r3, [r7, #3]
     SPI_write(&SPI_HANDLER, cmd_length);						// write command length to LEN
 8000856:	78fb      	ldrb	r3, [r7, #3]
 8000858:	4619      	mov	r1, r3
 800085a:	481f      	ldr	r0, [pc, #124]	@ (80008d8 <sendFrame+0xb8>)
 800085c:	f7ff ff51 	bl	8000702 <SPI_write>
     SPI_write(&SPI_HANDLER, (~cmd_length + 1));				// write the 2's complement of command length to LCS
 8000860:	78fb      	ldrb	r3, [r7, #3]
 8000862:	425b      	negs	r3, r3
 8000864:	b2db      	uxtb	r3, r3
 8000866:	4619      	mov	r1, r3
 8000868:	481b      	ldr	r0, [pc, #108]	@ (80008d8 <sendFrame+0xb8>)
 800086a:	f7ff ff4a 	bl	8000702 <SPI_write>
     SPI_write(&SPI_HANDLER, PN532_HOSTTOPN532);				// TFI: a frame from the host controller to the PN532
 800086e:	21d4      	movs	r1, #212	@ 0xd4
 8000870:	4819      	ldr	r0, [pc, #100]	@ (80008d8 <sendFrame+0xb8>)
 8000872:	f7ff ff46 	bl	8000702 <SPI_write>

     uint8_t DCS = PN532_HOSTTOPN532;							// data checksum, see the datasheet (TFI + PD0 + .. +PDn + DCS) = 0x00
 8000876:	23d4      	movs	r3, #212	@ 0xd4
 8000878:	73fb      	strb	r3, [r7, #15]

     for (uint8_t i = 0; i < cmd_length - 1; i++) {
 800087a:	2300      	movs	r3, #0
 800087c:	73bb      	strb	r3, [r7, #14]
 800087e:	e011      	b.n	80008a4 <sendFrame+0x84>
         SPI_write(&SPI_HANDLER, cmd[i]);						// write data bytes
 8000880:	7bbb      	ldrb	r3, [r7, #14]
 8000882:	687a      	ldr	r2, [r7, #4]
 8000884:	4413      	add	r3, r2
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	4619      	mov	r1, r3
 800088a:	4813      	ldr	r0, [pc, #76]	@ (80008d8 <sendFrame+0xb8>)
 800088c:	f7ff ff39 	bl	8000702 <SPI_write>
         DCS += cmd[i];											// accumulate data checksum
 8000890:	7bbb      	ldrb	r3, [r7, #14]
 8000892:	687a      	ldr	r2, [r7, #4]
 8000894:	4413      	add	r3, r2
 8000896:	781a      	ldrb	r2, [r3, #0]
 8000898:	7bfb      	ldrb	r3, [r7, #15]
 800089a:	4413      	add	r3, r2
 800089c:	73fb      	strb	r3, [r7, #15]
     for (uint8_t i = 0; i < cmd_length - 1; i++) {
 800089e:	7bbb      	ldrb	r3, [r7, #14]
 80008a0:	3301      	adds	r3, #1
 80008a2:	73bb      	strb	r3, [r7, #14]
 80008a4:	7bba      	ldrb	r2, [r7, #14]
 80008a6:	78fb      	ldrb	r3, [r7, #3]
 80008a8:	3b01      	subs	r3, #1
 80008aa:	429a      	cmp	r2, r3
 80008ac:	dbe8      	blt.n	8000880 <sendFrame+0x60>
     }

     SPI_write(&SPI_HANDLER, (~DCS + 1));						// write 2's complement of DCS
 80008ae:	7bfb      	ldrb	r3, [r7, #15]
 80008b0:	425b      	negs	r3, r3
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	4619      	mov	r1, r3
 80008b6:	4808      	ldr	r0, [pc, #32]	@ (80008d8 <sendFrame+0xb8>)
 80008b8:	f7ff ff23 	bl	8000702 <SPI_write>
     SPI_write(&SPI_HANDLER, PN532_POSTAMBLE);					// write POSTAMBLE
 80008bc:	2100      	movs	r1, #0
 80008be:	4806      	ldr	r0, [pc, #24]	@ (80008d8 <sendFrame+0xb8>)
 80008c0:	f7ff ff1f 	bl	8000702 <SPI_write>

     HAL_Delay(1);
 80008c4:	2001      	movs	r0, #1
 80008c6:	f000 ff29 	bl	800171c <HAL_Delay>
     SS_HIGH();
 80008ca:	f7ff feef 	bl	80006ac <SS_HIGH>
 }
 80008ce:	bf00      	nop
 80008d0:	3710      	adds	r7, #16
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	2400017c 	.word	0x2400017c

080008dc <sendCommand>:
  * sendCommand:
  * Sends a command to the PN532, waits for PN532 to be ready and checks for a proper ACK response.
  *
  * @return: STATUS_532_OK if ready and ACK received
  */
 static StatusCode532_t sendCommand(uint8_t *cmd, uint8_t cmd_length) {
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	460b      	mov	r3, r1
 80008e6:	70fb      	strb	r3, [r7, #3]
	 int status;

     //command = cmd[0];                                  // record command for response verification
     sendFrame(cmd, cmd_length);                        // write command
 80008e8:	78fb      	ldrb	r3, [r7, #3]
 80008ea:	4619      	mov	r1, r3
 80008ec:	6878      	ldr	r0, [r7, #4]
 80008ee:	f7ff ff97 	bl	8000820 <sendFrame>
     status = waitToBeReady(PN532_ACK_WAIT_TIME);
 80008f2:	20c8      	movs	r0, #200	@ 0xc8
 80008f4:	f7ff ff3a 	bl	800076c <waitToBeReady>
 80008f8:	4603      	mov	r3, r0
 80008fa:	60fb      	str	r3, [r7, #12]
     if (status != STATUS_532_OK) return STATUS_532_NOTREADY;
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d002      	beq.n	8000908 <sendCommand+0x2c>
 8000902:	f06f 0307 	mvn.w	r3, #7
 8000906:	e00b      	b.n	8000920 <sendCommand+0x44>
     StatusCode532_t ack = readACK(); // read ACK, returns 0 if OK
 8000908:	f7ff ff4c 	bl	80007a4 <readACK>
 800090c:	4603      	mov	r3, r0
 800090e:	72fb      	strb	r3, [r7, #11]
     if (ack != STATUS_532_OK) return STATUS_532_INVALID_ACK;
 8000910:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d002      	beq.n	800091e <sendCommand+0x42>
 8000918:	f06f 0301 	mvn.w	r3, #1
 800091c:	e000      	b.n	8000920 <sendCommand+0x44>
     return STATUS_532_OK;
 800091e:	2300      	movs	r3, #0
 }
 8000920:	4618      	mov	r0, r3
 8000922:	3710      	adds	r7, #16
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}

08000928 <readResponseToCommand>:
 static int16_t readResponseToCommand(
		 	 	 	 uint8_t command,
		 	 	 	 uint8_t *data_buffer,
					 uint8_t data_length, 						// length of a data buffer used to receive the response
					 uint16_t wait_time
 					) {
 8000928:	b590      	push	{r4, r7, lr}
 800092a:	b085      	sub	sp, #20
 800092c:	af00      	add	r7, sp, #0
 800092e:	6039      	str	r1, [r7, #0]
 8000930:	4611      	mov	r1, r2
 8000932:	461a      	mov	r2, r3
 8000934:	4603      	mov	r3, r0
 8000936:	71fb      	strb	r3, [r7, #7]
 8000938:	460b      	mov	r3, r1
 800093a:	71bb      	strb	r3, [r7, #6]
 800093c:	4613      	mov	r3, r2
 800093e:	80bb      	strh	r3, [r7, #4]


     if (waitToBeReady(wait_time) != STATUS_532_OK)
 8000940:	88bb      	ldrh	r3, [r7, #4]
 8000942:	4618      	mov	r0, r3
 8000944:	f7ff ff12 	bl	800076c <waitToBeReady>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d002      	beq.n	8000954 <readResponseToCommand+0x2c>
         return STATUS_532_TIMEOUT;        						// return time out error if not ready
 800094e:	f06f 0302 	mvn.w	r3, #2
 8000952:	e0a1      	b.n	8000a98 <readResponseToCommand+0x170>

     SS_LOW();
 8000954:	f7ff feb6 	bl	80006c4 <SS_LOW>

     SPI_write(&SPI_HANDLER, PN532_SPI_DATAREAD);         		// send PN532 DATAREAD SPI operation
 8000958:	2103      	movs	r1, #3
 800095a:	4851      	ldr	r0, [pc, #324]	@ (8000aa0 <readResponseToCommand+0x178>)
 800095c:	f7ff fed1 	bl	8000702 <SPI_write>

     // read 1st to 3rd bytes and check if this is a valid frame (preamble + start codes)
     if (SPI_read(&SPI_HANDLER) != PN532_PREAMBLE   ||  		// first byte should be PREAMBLE
 8000960:	484f      	ldr	r0, [pc, #316]	@ (8000aa0 <readResponseToCommand+0x178>)
 8000962:	f7ff febb 	bl	80006dc <SPI_read>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d10b      	bne.n	8000984 <readResponseToCommand+0x5c>
         SPI_read(&SPI_HANDLER) != PN532_STARTCODE1 ||  		// second byte should be STARTCODE1
 800096c:	484c      	ldr	r0, [pc, #304]	@ (8000aa0 <readResponseToCommand+0x178>)
 800096e:	f7ff feb5 	bl	80006dc <SPI_read>
 8000972:	4603      	mov	r3, r0
     if (SPI_read(&SPI_HANDLER) != PN532_PREAMBLE   ||  		// first byte should be PREAMBLE
 8000974:	2b00      	cmp	r3, #0
 8000976:	d105      	bne.n	8000984 <readResponseToCommand+0x5c>
         SPI_read(&SPI_HANDLER) != PN532_STARTCODE2     		// third byte should be STARTCODE2
 8000978:	4849      	ldr	r0, [pc, #292]	@ (8000aa0 <readResponseToCommand+0x178>)
 800097a:	f7ff feaf 	bl	80006dc <SPI_read>
 800097e:	4603      	mov	r3, r0
         SPI_read(&SPI_HANDLER) != PN532_STARTCODE1 ||  		// second byte should be STARTCODE1
 8000980:	2bff      	cmp	r3, #255	@ 0xff
 8000982:	d004      	beq.n	800098e <readResponseToCommand+0x66>
         ) {
         SS_HIGH();                                          	// pull SS high since we are exiting
 8000984:	f7ff fe92 	bl	80006ac <SS_HIGH>
         return STATUS_532_INVALID_FRAME;   					// return invalid frame code as a result
 8000988:	f06f 0303 	mvn.w	r3, #3
 800098c:	e084      	b.n	8000a98 <readResponseToCommand+0x170>
     }

     /* read 4th and 5th bytes */
     uint8_t LEN = SPI_read(&SPI_HANDLER);              		// LEN: number of bytes in the data field
 800098e:	4844      	ldr	r0, [pc, #272]	@ (8000aa0 <readResponseToCommand+0x178>)
 8000990:	f7ff fea4 	bl	80006dc <SPI_read>
 8000994:	4603      	mov	r3, r0
 8000996:	733b      	strb	r3, [r7, #12]
     if (LEN == 0) {
 8000998:	7b3b      	ldrb	r3, [r7, #12]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d104      	bne.n	80009a8 <readResponseToCommand+0x80>
    	 SS_HIGH();                                          	// pull SS high since we are exiting
 800099e:	f7ff fe85 	bl	80006ac <SS_HIGH>
    	 return STATUS_532_NODATA;  							// return STATUS_532_NODATA
 80009a2:	f06f 0308 	mvn.w	r3, #8
 80009a6:	e077      	b.n	8000a98 <readResponseToCommand+0x170>
     }
     uint8_t LCS = SPI_read(&SPI_HANDLER);              		// LCS: Packet Length Checksum
 80009a8:	483d      	ldr	r0, [pc, #244]	@ (8000aa0 <readResponseToCommand+0x178>)
 80009aa:	f7ff fe97 	bl	80006dc <SPI_read>
 80009ae:	4603      	mov	r3, r0
 80009b0:	72fb      	strb	r3, [r7, #11]
     if ((uint8_t)(LEN + LCS) != 0x00 ) {						// LEN + LCS should be 0x00
 80009b2:	7b3a      	ldrb	r2, [r7, #12]
 80009b4:	7afb      	ldrb	r3, [r7, #11]
 80009b6:	4413      	add	r3, r2
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d004      	beq.n	80009c8 <readResponseToCommand+0xa0>
         SS_HIGH();                                          	// pull SS high since we are exiting
 80009be:	f7ff fe75 	bl	80006ac <SS_HIGH>
         return STATUS_532_INVALID_LCS;  						// return invalid LCS error as a result
 80009c2:	f06f 0304 	mvn.w	r3, #4
 80009c6:	e067      	b.n	8000a98 <readResponseToCommand+0x170>
     }

     /* read 6th and 7th bytes */
     uint8_t PD0 = command + 1;                 				// PD0 is command code
 80009c8:	79fb      	ldrb	r3, [r7, #7]
 80009ca:	3301      	adds	r3, #1
 80009cc:	72bb      	strb	r3, [r7, #10]
     if (PN532_PN532TOHOST != SPI_read(&SPI_HANDLER) || PD0 != SPI_read(&SPI_HANDLER)) {
 80009ce:	4834      	ldr	r0, [pc, #208]	@ (8000aa0 <readResponseToCommand+0x178>)
 80009d0:	f7ff fe84 	bl	80006dc <SPI_read>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2bd5      	cmp	r3, #213	@ 0xd5
 80009d8:	d107      	bne.n	80009ea <readResponseToCommand+0xc2>
 80009da:	4831      	ldr	r0, [pc, #196]	@ (8000aa0 <readResponseToCommand+0x178>)
 80009dc:	f7ff fe7e 	bl	80006dc <SPI_read>
 80009e0:	4603      	mov	r3, r0
 80009e2:	461a      	mov	r2, r3
 80009e4:	7abb      	ldrb	r3, [r7, #10]
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d004      	beq.n	80009f4 <readResponseToCommand+0xcc>
         SS_HIGH();                           					// pull SS high since we are exiting
 80009ea:	f7ff fe5f 	bl	80006ac <SS_HIGH>
         return STATUS_532_INVALID_FRAME;      					// return invalid frame code as result
 80009ee:	f06f 0303 	mvn.w	r3, #3
 80009f2:	e051      	b.n	8000a98 <readResponseToCommand+0x170>
     }

     /* check data buffer size before read actual data */
     LEN -= 2;                         							// subtract TFI and PD0(command) from DATA length
 80009f4:	7b3b      	ldrb	r3, [r7, #12]
 80009f6:	3b02      	subs	r3, #2
 80009f8:	733b      	strb	r3, [r7, #12]
     if (LEN > data_length) {          							// if no enough space, just dummy read bytes for synchronization
 80009fa:	7b3a      	ldrb	r2, [r7, #12]
 80009fc:	79bb      	ldrb	r3, [r7, #6]
 80009fe:	429a      	cmp	r2, r3
 8000a00:	d917      	bls.n	8000a32 <readResponseToCommand+0x10a>
         for (uint8_t i = 0; i < LEN; i++) SPI_read(&SPI_HANDLER);      	// dump data
 8000a02:	2300      	movs	r3, #0
 8000a04:	73fb      	strb	r3, [r7, #15]
 8000a06:	e005      	b.n	8000a14 <readResponseToCommand+0xec>
 8000a08:	4825      	ldr	r0, [pc, #148]	@ (8000aa0 <readResponseToCommand+0x178>)
 8000a0a:	f7ff fe67 	bl	80006dc <SPI_read>
 8000a0e:	7bfb      	ldrb	r3, [r7, #15]
 8000a10:	3301      	adds	r3, #1
 8000a12:	73fb      	strb	r3, [r7, #15]
 8000a14:	7bfa      	ldrb	r2, [r7, #15]
 8000a16:	7b3b      	ldrb	r3, [r7, #12]
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	d3f5      	bcc.n	8000a08 <readResponseToCommand+0xe0>
         SPI_read(&SPI_HANDLER);                                        	// dump DCS
 8000a1c:	4820      	ldr	r0, [pc, #128]	@ (8000aa0 <readResponseToCommand+0x178>)
 8000a1e:	f7ff fe5d 	bl	80006dc <SPI_read>
         SPI_read(&SPI_HANDLER);                                        	// dump POSTAMBLE
 8000a22:	481f      	ldr	r0, [pc, #124]	@ (8000aa0 <readResponseToCommand+0x178>)
 8000a24:	f7ff fe5a 	bl	80006dc <SPI_read>
         SS_HIGH();                                          	// pull SS high since we are exiting
 8000a28:	f7ff fe40 	bl	80006ac <SS_HIGH>
         return STATUS_532_NO_SPACE;                             // return (buffer) no space error code as result
 8000a2c:	f06f 0305 	mvn.w	r3, #5
 8000a30:	e032      	b.n	8000a98 <readResponseToCommand+0x170>
     }

     /* read actual data */
     uint8_t SUM = PN532_PN532TOHOST + PD0;                  // SUM: TFI + DATA, DATA = PD0 + PD1 + ... + PDn
 8000a32:	7abb      	ldrb	r3, [r7, #10]
 8000a34:	3b2b      	subs	r3, #43	@ 0x2b
 8000a36:	73bb      	strb	r3, [r7, #14]
     for (uint8_t i = 0; i < LEN; i++) {
 8000a38:	2300      	movs	r3, #0
 8000a3a:	737b      	strb	r3, [r7, #13]
 8000a3c:	e011      	b.n	8000a62 <readResponseToCommand+0x13a>
         data_buffer[i] = SPI_read(&SPI_HANDLER);       	 // get data
 8000a3e:	7b7b      	ldrb	r3, [r7, #13]
 8000a40:	683a      	ldr	r2, [r7, #0]
 8000a42:	18d4      	adds	r4, r2, r3
 8000a44:	4816      	ldr	r0, [pc, #88]	@ (8000aa0 <readResponseToCommand+0x178>)
 8000a46:	f7ff fe49 	bl	80006dc <SPI_read>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	7023      	strb	r3, [r4, #0]
         SUM += data_buffer[i];                              // accumulate SUM
 8000a4e:	7b7b      	ldrb	r3, [r7, #13]
 8000a50:	683a      	ldr	r2, [r7, #0]
 8000a52:	4413      	add	r3, r2
 8000a54:	781a      	ldrb	r2, [r3, #0]
 8000a56:	7bbb      	ldrb	r3, [r7, #14]
 8000a58:	4413      	add	r3, r2
 8000a5a:	73bb      	strb	r3, [r7, #14]
     for (uint8_t i = 0; i < LEN; i++) {
 8000a5c:	7b7b      	ldrb	r3, [r7, #13]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	737b      	strb	r3, [r7, #13]
 8000a62:	7b7a      	ldrb	r2, [r7, #13]
 8000a64:	7b3b      	ldrb	r3, [r7, #12]
 8000a66:	429a      	cmp	r2, r3
 8000a68:	d3e9      	bcc.n	8000a3e <readResponseToCommand+0x116>
     }

     /* read data checksum byte */
     uint8_t DCS = SPI_read(&SPI_HANDLER);
 8000a6a:	480d      	ldr	r0, [pc, #52]	@ (8000aa0 <readResponseToCommand+0x178>)
 8000a6c:	f7ff fe36 	bl	80006dc <SPI_read>
 8000a70:	4603      	mov	r3, r0
 8000a72:	727b      	strb	r3, [r7, #9]
     if ((uint8_t)(SUM + DCS) != 0) {
 8000a74:	7bba      	ldrb	r2, [r7, #14]
 8000a76:	7a7b      	ldrb	r3, [r7, #9]
 8000a78:	4413      	add	r3, r2
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d004      	beq.n	8000a8a <readResponseToCommand+0x162>
         SS_HIGH();                           				// pull SS high since we are exiting
 8000a80:	f7ff fe14 	bl	80006ac <SS_HIGH>
         return STATUS_532_INVALID_DCS;      				// proper frame should result in SUM + DCS = 0
 8000a84:	f06f 0306 	mvn.w	r3, #6
 8000a88:	e006      	b.n	8000a98 <readResponseToCommand+0x170>
     }

     /* read POSTAMBLE */
     SPI_read(&SPI_HANDLER);                 				// dump postamble
 8000a8a:	4805      	ldr	r0, [pc, #20]	@ (8000aa0 <readResponseToCommand+0x178>)
 8000a8c:	f7ff fe26 	bl	80006dc <SPI_read>

     SS_HIGH();
 8000a90:	f7ff fe0c 	bl	80006ac <SS_HIGH>
     return (int16_t)LEN;									// number of bytes (LEN>0) received
 8000a94:	7b3b      	ldrb	r3, [r7, #12]
 8000a96:	b21b      	sxth	r3, r3
 }
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3714      	adds	r7, #20
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd90      	pop	{r4, r7, pc}
 8000aa0:	2400017c 	.word	0x2400017c

08000aa4 <PN532_SPI_Init>:
  * The Adafruit PN532 module uses power-saving modes
  *    and the chip starts in Low Power or HSU (High-Speed UART) mode
  * We're not getting any response until wake-up
  * A common trick is to reset SS for a few ms (and maybe also RST pin)
  */
  void PN532_SPI_Init(void) {
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0

      /*-- Wake Up PN532 --*/
      SS_LOW();
 8000aa8:	f7ff fe0c 	bl	80006c4 <SS_LOW>
      HAL_Delay(5);
 8000aac:	2005      	movs	r0, #5
 8000aae:	f000 fe35 	bl	800171c <HAL_Delay>
      SS_HIGH();
 8000ab2:	f7ff fdfb 	bl	80006ac <SS_HIGH>
  }
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
	...

08000abc <PN532_getFirmwareVersion>:
  * 4th byte: 3 LS bits indicate which are the functionalities supported (ISO18092,ISO14443-B,ISO14443-A).
  *
  * In the case of the PN532: 0x32010607
  *
  */
 uint32_t PN532_getFirmwareVersion(void) {
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
     packet_buffer[0] = PN532_COMMAND_GETFIRMWAREVERSION;
 8000ac2:	4b21      	ldr	r3, [pc, #132]	@ (8000b48 <PN532_getFirmwareVersion+0x8c>)
 8000ac4:	2202      	movs	r2, #2
 8000ac6:	701a      	strb	r2, [r3, #0]
     StatusCode532_t status;


     status = sendCommand(packet_buffer, 1);
 8000ac8:	2101      	movs	r1, #1
 8000aca:	481f      	ldr	r0, [pc, #124]	@ (8000b48 <PN532_getFirmwareVersion+0x8c>)
 8000acc:	f7ff ff06 	bl	80008dc <sendCommand>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	71fb      	strb	r3, [r7, #7]
     if (status != STATUS_532_OK) return STATUS_532_ERROR;     // write command to PN532, return 0 means write fail
 8000ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d002      	beq.n	8000ae2 <PN532_getFirmwareVersion+0x26>
 8000adc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ae0:	e02e      	b.n	8000b40 <PN532_getFirmwareVersion+0x84>
     status = readResponseToCommand(PN532_COMMAND_GETFIRMWAREVERSION,packet_buffer, 12, PN532_WAITTIME);
 8000ae2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ae6:	220c      	movs	r2, #12
 8000ae8:	4917      	ldr	r1, [pc, #92]	@ (8000b48 <PN532_getFirmwareVersion+0x8c>)
 8000aea:	2002      	movs	r0, #2
 8000aec:	f7ff ff1c 	bl	8000928 <readResponseToCommand>
 8000af0:	4603      	mov	r3, r0
 8000af2:	71fb      	strb	r3, [r7, #7]
     if (status < 0) return STATUS_532_ERROR; // read response from PN532, return 0 for error
 8000af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	da02      	bge.n	8000b02 <PN532_getFirmwareVersion+0x46>
 8000afc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b00:	e01e      	b.n	8000b40 <PN532_getFirmwareVersion+0x84>

     // store the result into an unsigned 32 bit integer
     uint32_t response;
     response = packet_buffer[0];
 8000b02:	4b11      	ldr	r3, [pc, #68]	@ (8000b48 <PN532_getFirmwareVersion+0x8c>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	603b      	str	r3, [r7, #0]
     response <<= 8;
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	021b      	lsls	r3, r3, #8
 8000b0c:	603b      	str	r3, [r7, #0]
     response |= packet_buffer[1];
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b48 <PN532_getFirmwareVersion+0x8c>)
 8000b10:	785b      	ldrb	r3, [r3, #1]
 8000b12:	461a      	mov	r2, r3
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	4313      	orrs	r3, r2
 8000b18:	603b      	str	r3, [r7, #0]
     response <<= 8;
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	021b      	lsls	r3, r3, #8
 8000b1e:	603b      	str	r3, [r7, #0]
     response |= packet_buffer[2];
 8000b20:	4b09      	ldr	r3, [pc, #36]	@ (8000b48 <PN532_getFirmwareVersion+0x8c>)
 8000b22:	789b      	ldrb	r3, [r3, #2]
 8000b24:	461a      	mov	r2, r3
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	603b      	str	r3, [r7, #0]
     response <<= 8;
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	021b      	lsls	r3, r3, #8
 8000b30:	603b      	str	r3, [r7, #0]
     response |= packet_buffer[3];
 8000b32:	4b05      	ldr	r3, [pc, #20]	@ (8000b48 <PN532_getFirmwareVersion+0x8c>)
 8000b34:	78db      	ldrb	r3, [r3, #3]
 8000b36:	461a      	mov	r2, r3
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	603b      	str	r3, [r7, #0]

     return response;
 8000b3e:	683b      	ldr	r3, [r7, #0]
 }
 8000b40:	4618      	mov	r0, r3
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	2400007c 	.word	0x2400007c

08000b4c <PN532_SAMConfiguration>:
  *
  * @return STATUS_532_OK if success, STATUS_532_ERROR if error.
  *
  *
  */
 StatusCode532_t PN532_SAMConfiguration(void) {
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
     /*-- prepare command --*/
     packet_buffer[0] = PN532_COMMAND_SAMCONFIGURATION;
 8000b50:	4b12      	ldr	r3, [pc, #72]	@ (8000b9c <PN532_SAMConfiguration+0x50>)
 8000b52:	2214      	movs	r2, #20
 8000b54:	701a      	strb	r2, [r3, #0]
     packet_buffer[1] = 0x01;                           	// normal operation mode, the SAM is not used; this is the default mode;
 8000b56:	4b11      	ldr	r3, [pc, #68]	@ (8000b9c <PN532_SAMConfiguration+0x50>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	705a      	strb	r2, [r3, #1]
     packet_buffer[2] = 0x14;                           	// The timeout field in the SAMConfiguration command in Normal Mode determines how long the PN532
 8000b5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b9c <PN532_SAMConfiguration+0x50>)
 8000b5e:	2214      	movs	r2, #20
 8000b60:	709a      	strb	r2, [r3, #2]
															//      indicating no card was found.
															// This parameter indicates the timeout value with a LSB of 50ms.
															// There is no timeout control if the value is null (Timeout = 0).
															// The maximum value for the timeout is 12.75 sec (Timeout = 0xFF).
															// timeout 50ms * 20 = 1 second
     packet_buffer[3] = 0x01;                           	// use IRQ pin!
 8000b62:	4b0e      	ldr	r3, [pc, #56]	@ (8000b9c <PN532_SAMConfiguration+0x50>)
 8000b64:	2201      	movs	r2, #1
 8000b66:	70da      	strb	r2, [r3, #3]

     /*-- write command and read response --*/
     if (sendCommand(packet_buffer, 4) != STATUS_532_OK) return STATUS_532_ERROR;
 8000b68:	2104      	movs	r1, #4
 8000b6a:	480c      	ldr	r0, [pc, #48]	@ (8000b9c <PN532_SAMConfiguration+0x50>)
 8000b6c:	f7ff feb6 	bl	80008dc <sendCommand>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d002      	beq.n	8000b7c <PN532_SAMConfiguration+0x30>
 8000b76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b7a:	e00d      	b.n	8000b98 <PN532_SAMConfiguration+0x4c>
     if (readResponseToCommand(PN532_COMMAND_SAMCONFIGURATION, packet_buffer, sizeof(packet_buffer), PN532_WAITTIME) < 0) return STATUS_532_ERROR;
 8000b7c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b80:	22ff      	movs	r2, #255	@ 0xff
 8000b82:	4906      	ldr	r1, [pc, #24]	@ (8000b9c <PN532_SAMConfiguration+0x50>)
 8000b84:	2014      	movs	r0, #20
 8000b86:	f7ff fecf 	bl	8000928 <readResponseToCommand>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	da02      	bge.n	8000b96 <PN532_SAMConfiguration+0x4a>
 8000b90:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b94:	e000      	b.n	8000b98 <PN532_SAMConfiguration+0x4c>
     return  STATUS_532_OK;  // return response status code
 8000b96:	2300      	movs	r3, #0
 }
 8000b98:	4618      	mov	r0, r3
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	2400007c 	.word	0x2400007c

08000ba0 <InListPassiveTarget>:
  *    uidLength     Pointer to the variable that will hold the length of the card's UID.
  *
  * @return STATUS_532_OK if success, STATUS_532_ERROR for an error.
  *
  */
 StatusCode532_t InListPassiveTarget (uint8_t *uid, uint8_t *uid_length) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	6039      	str	r1, [r7, #0]
     /*-- prepare command --*/
     packet_buffer[0] = PN532_COMMAND_INLISTPASSIVETARGET;
 8000baa:	4b21      	ldr	r3, [pc, #132]	@ (8000c30 <InListPassiveTarget+0x90>)
 8000bac:	224a      	movs	r2, #74	@ 0x4a
 8000bae:	701a      	strb	r2, [r3, #0]
     packet_buffer[1] = 0x01;                  // (MaxTg) - max 1 card
 8000bb0:	4b1f      	ldr	r3, [pc, #124]	@ (8000c30 <InListPassiveTarget+0x90>)
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	705a      	strb	r2, [r3, #1]
     packet_buffer[2] = 0x00;                  // (BrTy) - read datasheet to see card baudrate setting - 0x00: 106 kbps type A (ISO/IEC14443 Type A),
 8000bb6:	4b1e      	ldr	r3, [pc, #120]	@ (8000c30 <InListPassiveTarget+0x90>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	709a      	strb	r2, [r3, #2]

     /*-- write command and read response --*/
     if (sendCommand(packet_buffer, 3) != STATUS_532_OK) return STATUS_532_ERROR;     // return  error
 8000bbc:	2103      	movs	r1, #3
 8000bbe:	481c      	ldr	r0, [pc, #112]	@ (8000c30 <InListPassiveTarget+0x90>)
 8000bc0:	f7ff fe8c 	bl	80008dc <sendCommand>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d002      	beq.n	8000bd0 <InListPassiveTarget+0x30>
 8000bca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000bce:	e02b      	b.n	8000c28 <InListPassiveTarget+0x88>
     if (readResponseToCommand(PN532_COMMAND_INLISTPASSIVETARGET,packet_buffer, sizeof(packet_buffer), PN532_WAITTIME) < 0) return STATUS_532_ERROR;
 8000bd0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bd4:	22ff      	movs	r2, #255	@ 0xff
 8000bd6:	4916      	ldr	r1, [pc, #88]	@ (8000c30 <InListPassiveTarget+0x90>)
 8000bd8:	204a      	movs	r0, #74	@ 0x4a
 8000bda:	f7ff fea5 	bl	8000928 <readResponseToCommand>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	da02      	bge.n	8000bea <InListPassiveTarget+0x4a>
 8000be4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000be8:	e01e      	b.n	8000c28 <InListPassiveTarget+0x88>
      *   b6..NFCIDLen  |   NFCID: The unique identifier (UID) of the card/tag.
      */

     /*-- authenticate and save data --*/
     /* byte 0 */
     if (packet_buffer[0] != 1)
 8000bea:	4b11      	ldr	r3, [pc, #68]	@ (8000c30 <InListPassiveTarget+0x90>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	d002      	beq.n	8000bf8 <InListPassiveTarget+0x58>
    	 return STATUS_532_NOTAG;  						// return STATUS_532_NOTAG, if no tags found
 8000bf2:	f06f 0309 	mvn.w	r3, #9
 8000bf6:	e017      	b.n	8000c28 <InListPassiveTarget+0x88>

     /* byte 5 */
     *uid_length = packet_buffer[5];                    // save uid length
 8000bf8:	4b0d      	ldr	r3, [pc, #52]	@ (8000c30 <InListPassiveTarget+0x90>)
 8000bfa:	795a      	ldrb	r2, [r3, #5]
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	701a      	strb	r2, [r3, #0]

     /* UID */
     for (uint8_t i = 0; i < packet_buffer[5]; i++)
 8000c00:	2300      	movs	r3, #0
 8000c02:	73fb      	strb	r3, [r7, #15]
 8000c04:	e00a      	b.n	8000c1c <InListPassiveTarget+0x7c>
         uid[i] = packet_buffer[6 + i];                 // save uid bytes
 8000c06:	7bfb      	ldrb	r3, [r7, #15]
 8000c08:	1d9a      	adds	r2, r3, #6
 8000c0a:	7bfb      	ldrb	r3, [r7, #15]
 8000c0c:	6879      	ldr	r1, [r7, #4]
 8000c0e:	440b      	add	r3, r1
 8000c10:	4907      	ldr	r1, [pc, #28]	@ (8000c30 <InListPassiveTarget+0x90>)
 8000c12:	5c8a      	ldrb	r2, [r1, r2]
 8000c14:	701a      	strb	r2, [r3, #0]
     for (uint8_t i = 0; i < packet_buffer[5]; i++)
 8000c16:	7bfb      	ldrb	r3, [r7, #15]
 8000c18:	3301      	adds	r3, #1
 8000c1a:	73fb      	strb	r3, [r7, #15]
 8000c1c:	4b04      	ldr	r3, [pc, #16]	@ (8000c30 <InListPassiveTarget+0x90>)
 8000c1e:	795b      	ldrb	r3, [r3, #5]
 8000c20:	7bfa      	ldrb	r2, [r7, #15]
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d3ef      	bcc.n	8000c06 <InListPassiveTarget+0x66>

     return STATUS_532_OK;
 8000c26:	2300      	movs	r3, #0
 }
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3710      	adds	r7, #16
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	2400007c 	.word	0x2400007c

08000c34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000c3a:	f000 fa27 	bl	800108c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c3e:	f000 fcdb 	bl	80015f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c42:	f000 f8a5 	bl	8000d90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c46:	f000 f9cd 	bl	8000fe4 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000c4a:	f000 f91d 	bl	8000e88 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 8000c4e:	f000 f97d 	bl	8000f4c <MX_USART3_UART_Init>
  //oscilloscopeLoop();

  /*****************************************************************************************************
   * 1. Wake-up PN532 and check if it is available by getting its firmware version
   *****************************************************************************************************/
  HAL_UART_Transmit(&huart3, "\nLooking for PN532... \n\0", sizeof("\nLooking for PN532... \n\0"), HAL_MAX_DELAY);
 8000c52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c56:	2219      	movs	r2, #25
 8000c58:	493e      	ldr	r1, [pc, #248]	@ (8000d54 <main+0x120>)
 8000c5a:	483f      	ldr	r0, [pc, #252]	@ (8000d58 <main+0x124>)
 8000c5c:	f004 fdbd 	bl	80057da <HAL_UART_Transmit>
  PN532_SPI_Init();
 8000c60:	f7ff ff20 	bl	8000aa4 <PN532_SPI_Init>
  while(1) {
	  firmwareVersion = PN532_getFirmwareVersion();
 8000c64:	f7ff ff2a 	bl	8000abc <PN532_getFirmwareVersion>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	4a3c      	ldr	r2, [pc, #240]	@ (8000d5c <main+0x128>)
 8000c6c:	6013      	str	r3, [r2, #0]
	  if (firmwareVersion != STATUS_532_ERROR) {               // if not able to read version number, quit
 8000c6e:	4b3b      	ldr	r3, [pc, #236]	@ (8000d5c <main+0x128>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000c76:	d103      	bne.n	8000c80 <main+0x4c>
		  break;
	  }
	  HAL_Delay(250);
 8000c78:	20fa      	movs	r0, #250	@ 0xfa
 8000c7a:	f000 fd4f 	bl	800171c <HAL_Delay>
	  firmwareVersion = PN532_getFirmwareVersion();
 8000c7e:	e7f1      	b.n	8000c64 <main+0x30>
		  break;
 8000c80:	bf00      	nop
  }

  sprintf(txFWversion, "\nPN532 found. Firmware version: 0x%08X \n\0", firmwareVersion);
 8000c82:	4b36      	ldr	r3, [pc, #216]	@ (8000d5c <main+0x128>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	461a      	mov	r2, r3
 8000c88:	4935      	ldr	r1, [pc, #212]	@ (8000d60 <main+0x12c>)
 8000c8a:	4836      	ldr	r0, [pc, #216]	@ (8000d64 <main+0x130>)
 8000c8c:	f005 fec0 	bl	8006a10 <siprintf>
  HAL_UART_Transmit(&huart3, txFWversion, sizeof(txFWversion), HAL_MAX_DELAY);
 8000c90:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c94:	2280      	movs	r2, #128	@ 0x80
 8000c96:	4933      	ldr	r1, [pc, #204]	@ (8000d64 <main+0x130>)
 8000c98:	482f      	ldr	r0, [pc, #188]	@ (8000d58 <main+0x124>)
 8000c9a:	f004 fd9e 	bl	80057da <HAL_UART_Transmit>

  /*****************************************************************************************************
   * 2. Configure SAM: set normal operation mode and initialize the RF interface
   *****************************************************************************************************/

  HAL_UART_Transmit(&huart3, "\nConfiguring SAM.... \n\0", sizeof("\nConfiguring SAM.... \n\0"), HAL_MAX_DELAY);
 8000c9e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ca2:	2218      	movs	r2, #24
 8000ca4:	4930      	ldr	r1, [pc, #192]	@ (8000d68 <main+0x134>)
 8000ca6:	482c      	ldr	r0, [pc, #176]	@ (8000d58 <main+0x124>)
 8000ca8:	f004 fd97 	bl	80057da <HAL_UART_Transmit>
  while (PN532_SAMConfiguration() != STATUS_532_OK){
 8000cac:	e002      	b.n	8000cb4 <main+0x80>
	  HAL_Delay(100);
 8000cae:	2064      	movs	r0, #100	@ 0x64
 8000cb0:	f000 fd34 	bl	800171c <HAL_Delay>
  while (PN532_SAMConfiguration() != STATUS_532_OK){
 8000cb4:	f7ff ff4a 	bl	8000b4c <PN532_SAMConfiguration>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d1f7      	bne.n	8000cae <main+0x7a>
  }
  HAL_UART_Transmit(&huart3, "\nSAM configured.\n\0", sizeof("\nSAM configured.\n\0"), HAL_MAX_DELAY);
 8000cbe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000cc2:	2213      	movs	r2, #19
 8000cc4:	4929      	ldr	r1, [pc, #164]	@ (8000d6c <main+0x138>)
 8000cc6:	4824      	ldr	r0, [pc, #144]	@ (8000d58 <main+0x124>)
 8000cc8:	f004 fd87 	bl	80057da <HAL_UART_Transmit>
   * 3. Every second check if there is a RFID target present and read the UID
   *****************************************************************************************************/

  while (1)
  {
		statusCode = InListPassiveTarget(uid, &uidLength);
 8000ccc:	4928      	ldr	r1, [pc, #160]	@ (8000d70 <main+0x13c>)
 8000cce:	4829      	ldr	r0, [pc, #164]	@ (8000d74 <main+0x140>)
 8000cd0:	f7ff ff66 	bl	8000ba0 <InListPassiveTarget>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	4b27      	ldr	r3, [pc, #156]	@ (8000d78 <main+0x144>)
 8000cda:	701a      	strb	r2, [r3, #0]
		if (statusCode == STATUS_532_OK) {
 8000cdc:	4b26      	ldr	r3, [pc, #152]	@ (8000d78 <main+0x144>)
 8000cde:	f993 3000 	ldrsb.w	r3, [r3]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d130      	bne.n	8000d48 <main+0x114>

			sprintf(txUIDLength, "\nUID Length: %d \n\0", uidLength);
 8000ce6:	4b22      	ldr	r3, [pc, #136]	@ (8000d70 <main+0x13c>)
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	461a      	mov	r2, r3
 8000cec:	4923      	ldr	r1, [pc, #140]	@ (8000d7c <main+0x148>)
 8000cee:	4824      	ldr	r0, [pc, #144]	@ (8000d80 <main+0x14c>)
 8000cf0:	f005 fe8e 	bl	8006a10 <siprintf>
			HAL_UART_Transmit(&huart3, txUIDLength, sizeof(txUIDLength), HAL_MAX_DELAY);
 8000cf4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000cf8:	2280      	movs	r2, #128	@ 0x80
 8000cfa:	4921      	ldr	r1, [pc, #132]	@ (8000d80 <main+0x14c>)
 8000cfc:	4816      	ldr	r0, [pc, #88]	@ (8000d58 <main+0x124>)
 8000cfe:	f004 fd6c 	bl	80057da <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart3, "UID: ", sizeof("UID: "), HAL_MAX_DELAY);
 8000d02:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d06:	2206      	movs	r2, #6
 8000d08:	491e      	ldr	r1, [pc, #120]	@ (8000d84 <main+0x150>)
 8000d0a:	4813      	ldr	r0, [pc, #76]	@ (8000d58 <main+0x124>)
 8000d0c:	f004 fd65 	bl	80057da <HAL_UART_Transmit>
			for (int i = 0; i < uidLength; i++) {
 8000d10:	2300      	movs	r3, #0
 8000d12:	607b      	str	r3, [r7, #4]
 8000d14:	e012      	b.n	8000d3c <main+0x108>
				sprintf(txUID, "0x%X ", uid[i]);
 8000d16:	4a17      	ldr	r2, [pc, #92]	@ (8000d74 <main+0x140>)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	461a      	mov	r2, r3
 8000d20:	4919      	ldr	r1, [pc, #100]	@ (8000d88 <main+0x154>)
 8000d22:	481a      	ldr	r0, [pc, #104]	@ (8000d8c <main+0x158>)
 8000d24:	f005 fe74 	bl	8006a10 <siprintf>
				HAL_UART_Transmit(&huart3, txUID, sizeof(txUID), HAL_MAX_DELAY);
 8000d28:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d2c:	2220      	movs	r2, #32
 8000d2e:	4917      	ldr	r1, [pc, #92]	@ (8000d8c <main+0x158>)
 8000d30:	4809      	ldr	r0, [pc, #36]	@ (8000d58 <main+0x124>)
 8000d32:	f004 fd52 	bl	80057da <HAL_UART_Transmit>
			for (int i = 0; i < uidLength; i++) {
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	3301      	adds	r3, #1
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d70 <main+0x13c>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	461a      	mov	r2, r3
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4293      	cmp	r3, r2
 8000d46:	dbe6      	blt.n	8000d16 <main+0xe2>
			}
		}
		HAL_Delay(1000);
 8000d48:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d4c:	f000 fce6 	bl	800171c <HAL_Delay>
		statusCode = InListPassiveTarget(uid, &uidLength);
 8000d50:	e7bc      	b.n	8000ccc <main+0x98>
 8000d52:	bf00      	nop
 8000d54:	08007368 	.word	0x08007368
 8000d58:	24000204 	.word	0x24000204
 8000d5c:	240002a0 	.word	0x240002a0
 8000d60:	08007384 	.word	0x08007384
 8000d64:	240002a8 	.word	0x240002a8
 8000d68:	080073b0 	.word	0x080073b0
 8000d6c:	080073c8 	.word	0x080073c8
 8000d70:	2400029f 	.word	0x2400029f
 8000d74:	24000298 	.word	0x24000298
 8000d78:	240002a4 	.word	0x240002a4
 8000d7c:	080073dc 	.word	0x080073dc
 8000d80:	24000328 	.word	0x24000328
 8000d84:	080073f0 	.word	0x080073f0
 8000d88:	080073f8 	.word	0x080073f8
 8000d8c:	240003a8 	.word	0x240003a8

08000d90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b09c      	sub	sp, #112	@ 0x70
 8000d94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d9a:	224c      	movs	r2, #76	@ 0x4c
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f005 fe58 	bl	8006a54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000da4:	1d3b      	adds	r3, r7, #4
 8000da6:	2220      	movs	r2, #32
 8000da8:	2100      	movs	r1, #0
 8000daa:	4618      	mov	r0, r3
 8000dac:	f005 fe52 	bl	8006a54 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000db0:	2002      	movs	r0, #2
 8000db2:	f001 f809 	bl	8001dc8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000db6:	2300      	movs	r3, #0
 8000db8:	603b      	str	r3, [r7, #0]
 8000dba:	4b31      	ldr	r3, [pc, #196]	@ (8000e80 <SystemClock_Config+0xf0>)
 8000dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dbe:	4a30      	ldr	r2, [pc, #192]	@ (8000e80 <SystemClock_Config+0xf0>)
 8000dc0:	f023 0301 	bic.w	r3, r3, #1
 8000dc4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000dc6:	4b2e      	ldr	r3, [pc, #184]	@ (8000e80 <SystemClock_Config+0xf0>)
 8000dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	603b      	str	r3, [r7, #0]
 8000dd0:	4b2c      	ldr	r3, [pc, #176]	@ (8000e84 <SystemClock_Config+0xf4>)
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000dd8:	4a2a      	ldr	r2, [pc, #168]	@ (8000e84 <SystemClock_Config+0xf4>)
 8000dda:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dde:	6193      	str	r3, [r2, #24]
 8000de0:	4b28      	ldr	r3, [pc, #160]	@ (8000e84 <SystemClock_Config+0xf4>)
 8000de2:	699b      	ldr	r3, [r3, #24]
 8000de4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000de8:	603b      	str	r3, [r7, #0]
 8000dea:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000dec:	bf00      	nop
 8000dee:	4b25      	ldr	r3, [pc, #148]	@ (8000e84 <SystemClock_Config+0xf4>)
 8000df0:	699b      	ldr	r3, [r3, #24]
 8000df2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000df6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000dfa:	d1f8      	bne.n	8000dee <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000e00:	2301      	movs	r3, #1
 8000e02:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e04:	2340      	movs	r3, #64	@ 0x40
 8000e06:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e10:	2304      	movs	r3, #4
 8000e12:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000e14:	230a      	movs	r3, #10
 8000e16:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e1c:	2304      	movs	r3, #4
 8000e1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e20:	2302      	movs	r3, #2
 8000e22:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000e24:	230c      	movs	r3, #12
 8000e26:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e34:	4618      	mov	r0, r3
 8000e36:	f001 f801 	bl	8001e3c <HAL_RCC_OscConfig>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000e40:	f000 f950 	bl	80010e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e44:	233f      	movs	r3, #63	@ 0x3f
 8000e46:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000e50:	2300      	movs	r3, #0
 8000e52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000e58:	2340      	movs	r3, #64	@ 0x40
 8000e5a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000e60:	2300      	movs	r3, #0
 8000e62:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e64:	1d3b      	adds	r3, r7, #4
 8000e66:	2101      	movs	r1, #1
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f001 fc41 	bl	80026f0 <HAL_RCC_ClockConfig>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000e74:	f000 f936 	bl	80010e4 <Error_Handler>
  }
}
 8000e78:	bf00      	nop
 8000e7a:	3770      	adds	r7, #112	@ 0x70
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	58000400 	.word	0x58000400
 8000e84:	58024800 	.word	0x58024800

08000e88 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000e8c:	4b2d      	ldr	r3, [pc, #180]	@ (8000f44 <MX_SPI2_Init+0xbc>)
 8000e8e:	4a2e      	ldr	r2, [pc, #184]	@ (8000f48 <MX_SPI2_Init+0xc0>)
 8000e90:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e92:	4b2c      	ldr	r3, [pc, #176]	@ (8000f44 <MX_SPI2_Init+0xbc>)
 8000e94:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000e98:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000e9a:	4b2a      	ldr	r3, [pc, #168]	@ (8000f44 <MX_SPI2_Init+0xbc>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ea0:	4b28      	ldr	r3, [pc, #160]	@ (8000f44 <MX_SPI2_Init+0xbc>)
 8000ea2:	2207      	movs	r2, #7
 8000ea4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ea6:	4b27      	ldr	r3, [pc, #156]	@ (8000f44 <MX_SPI2_Init+0xbc>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000eac:	4b25      	ldr	r3, [pc, #148]	@ (8000f44 <MX_SPI2_Init+0xbc>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000eb2:	4b24      	ldr	r3, [pc, #144]	@ (8000f44 <MX_SPI2_Init+0xbc>)
 8000eb4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000eb8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000eba:	4b22      	ldr	r3, [pc, #136]	@ (8000f44 <MX_SPI2_Init+0xbc>)
 8000ebc:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
 8000ec0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8000ec2:	4b20      	ldr	r3, [pc, #128]	@ (8000f44 <MX_SPI2_Init+0xbc>)
 8000ec4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000ec8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000eca:	4b1e      	ldr	r3, [pc, #120]	@ (8000f44 <MX_SPI2_Init+0xbc>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ed0:	4b1c      	ldr	r3, [pc, #112]	@ (8000f44 <MX_SPI2_Init+0xbc>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000ed6:	4b1b      	ldr	r3, [pc, #108]	@ (8000f44 <MX_SPI2_Init+0xbc>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000edc:	4b19      	ldr	r3, [pc, #100]	@ (8000f44 <MX_SPI2_Init+0xbc>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000ee2:	4b18      	ldr	r3, [pc, #96]	@ (8000f44 <MX_SPI2_Init+0xbc>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000ee8:	4b16      	ldr	r3, [pc, #88]	@ (8000f44 <MX_SPI2_Init+0xbc>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000eee:	4b15      	ldr	r3, [pc, #84]	@ (8000f44 <MX_SPI2_Init+0xbc>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ef4:	4b13      	ldr	r3, [pc, #76]	@ (8000f44 <MX_SPI2_Init+0xbc>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000efa:	4b12      	ldr	r3, [pc, #72]	@ (8000f44 <MX_SPI2_Init+0xbc>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000f00:	4b10      	ldr	r3, [pc, #64]	@ (8000f44 <MX_SPI2_Init+0xbc>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000f06:	4b0f      	ldr	r3, [pc, #60]	@ (8000f44 <MX_SPI2_Init+0xbc>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000f0c:	4b0d      	ldr	r3, [pc, #52]	@ (8000f44 <MX_SPI2_Init+0xbc>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000f12:	4b0c      	ldr	r3, [pc, #48]	@ (8000f44 <MX_SPI2_Init+0xbc>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f18:	480a      	ldr	r0, [pc, #40]	@ (8000f44 <MX_SPI2_Init+0xbc>)
 8000f1a:	f003 fda1 	bl	8004a60 <HAL_SPI_Init>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8000f24:	f000 f8de 	bl	80010e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000f28:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <MX_SPI2_Init+0xbc>)
 8000f2a:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
 8000f2e:	61da      	str	r2, [r3, #28]
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f30:	4804      	ldr	r0, [pc, #16]	@ (8000f44 <MX_SPI2_Init+0xbc>)
 8000f32:	f003 fd95 	bl	8004a60 <HAL_SPI_Init>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_SPI2_Init+0xb8>
  {
    Error_Handler();
 8000f3c:	f000 f8d2 	bl	80010e4 <Error_Handler>
  }
  /* USER CODE END SPI2_Init 2 */

}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	2400017c 	.word	0x2400017c
 8000f48:	40003800 	.word	0x40003800

08000f4c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f50:	4b22      	ldr	r3, [pc, #136]	@ (8000fdc <MX_USART3_UART_Init+0x90>)
 8000f52:	4a23      	ldr	r2, [pc, #140]	@ (8000fe0 <MX_USART3_UART_Init+0x94>)
 8000f54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f56:	4b21      	ldr	r3, [pc, #132]	@ (8000fdc <MX_USART3_UART_Init+0x90>)
 8000f58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f5c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f5e:	4b1f      	ldr	r3, [pc, #124]	@ (8000fdc <MX_USART3_UART_Init+0x90>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f64:	4b1d      	ldr	r3, [pc, #116]	@ (8000fdc <MX_USART3_UART_Init+0x90>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000fdc <MX_USART3_UART_Init+0x90>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f70:	4b1a      	ldr	r3, [pc, #104]	@ (8000fdc <MX_USART3_UART_Init+0x90>)
 8000f72:	220c      	movs	r2, #12
 8000f74:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f76:	4b19      	ldr	r3, [pc, #100]	@ (8000fdc <MX_USART3_UART_Init+0x90>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f7c:	4b17      	ldr	r3, [pc, #92]	@ (8000fdc <MX_USART3_UART_Init+0x90>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f82:	4b16      	ldr	r3, [pc, #88]	@ (8000fdc <MX_USART3_UART_Init+0x90>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f88:	4b14      	ldr	r3, [pc, #80]	@ (8000fdc <MX_USART3_UART_Init+0x90>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f8e:	4b13      	ldr	r3, [pc, #76]	@ (8000fdc <MX_USART3_UART_Init+0x90>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f94:	4811      	ldr	r0, [pc, #68]	@ (8000fdc <MX_USART3_UART_Init+0x90>)
 8000f96:	f004 fbd0 	bl	800573a <HAL_UART_Init>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000fa0:	f000 f8a0 	bl	80010e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	480d      	ldr	r0, [pc, #52]	@ (8000fdc <MX_USART3_UART_Init+0x90>)
 8000fa8:	f005 fc67 	bl	800687a <HAL_UARTEx_SetTxFifoThreshold>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000fb2:	f000 f897 	bl	80010e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	4808      	ldr	r0, [pc, #32]	@ (8000fdc <MX_USART3_UART_Init+0x90>)
 8000fba:	f005 fc9c 	bl	80068f6 <HAL_UARTEx_SetRxFifoThreshold>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000fc4:	f000 f88e 	bl	80010e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000fc8:	4804      	ldr	r0, [pc, #16]	@ (8000fdc <MX_USART3_UART_Init+0x90>)
 8000fca:	f005 fc1d 	bl	8006808 <HAL_UARTEx_DisableFifoMode>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000fd4:	f000 f886 	bl	80010e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	24000204 	.word	0x24000204
 8000fe0:	40004800 	.word	0x40004800

08000fe4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b088      	sub	sp, #32
 8000fe8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fea:	f107 030c 	add.w	r3, r7, #12
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]
 8000ff4:	609a      	str	r2, [r3, #8]
 8000ff6:	60da      	str	r2, [r3, #12]
 8000ff8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffa:	4b22      	ldr	r3, [pc, #136]	@ (8001084 <MX_GPIO_Init+0xa0>)
 8000ffc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001000:	4a20      	ldr	r2, [pc, #128]	@ (8001084 <MX_GPIO_Init+0xa0>)
 8001002:	f043 0302 	orr.w	r3, r3, #2
 8001006:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800100a:	4b1e      	ldr	r3, [pc, #120]	@ (8001084 <MX_GPIO_Init+0xa0>)
 800100c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001010:	f003 0302 	and.w	r3, r3, #2
 8001014:	60bb      	str	r3, [r7, #8]
 8001016:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001018:	4b1a      	ldr	r3, [pc, #104]	@ (8001084 <MX_GPIO_Init+0xa0>)
 800101a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800101e:	4a19      	ldr	r2, [pc, #100]	@ (8001084 <MX_GPIO_Init+0xa0>)
 8001020:	f043 0308 	orr.w	r3, r3, #8
 8001024:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001028:	4b16      	ldr	r3, [pc, #88]	@ (8001084 <MX_GPIO_Init+0xa0>)
 800102a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800102e:	f003 0308 	and.w	r3, r3, #8
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001036:	4b13      	ldr	r3, [pc, #76]	@ (8001084 <MX_GPIO_Init+0xa0>)
 8001038:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800103c:	4a11      	ldr	r2, [pc, #68]	@ (8001084 <MX_GPIO_Init+0xa0>)
 800103e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001042:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001046:	4b0f      	ldr	r3, [pc, #60]	@ (8001084 <MX_GPIO_Init+0xa0>)
 8001048:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800104c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001050:	603b      	str	r3, [r7, #0]
 8001052:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8001054:	2201      	movs	r2, #1
 8001056:	2110      	movs	r1, #16
 8001058:	480b      	ldr	r0, [pc, #44]	@ (8001088 <MX_GPIO_Init+0xa4>)
 800105a:	f000 fe9b 	bl	8001d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800105e:	2310      	movs	r3, #16
 8001060:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001062:	2301      	movs	r3, #1
 8001064:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106a:	2300      	movs	r3, #0
 800106c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800106e:	f107 030c 	add.w	r3, r7, #12
 8001072:	4619      	mov	r1, r3
 8001074:	4804      	ldr	r0, [pc, #16]	@ (8001088 <MX_GPIO_Init+0xa4>)
 8001076:	f000 fcdd 	bl	8001a34 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800107a:	bf00      	nop
 800107c:	3720      	adds	r7, #32
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	58024400 	.word	0x58024400
 8001088:	58020400 	.word	0x58020400

0800108c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001092:	463b      	mov	r3, r7
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800109e:	f000 fc51 	bl	8001944 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80010a2:	2301      	movs	r3, #1
 80010a4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80010ae:	231f      	movs	r3, #31
 80010b0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80010b2:	2387      	movs	r3, #135	@ 0x87
 80010b4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80010b6:	2300      	movs	r3, #0
 80010b8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80010ba:	2300      	movs	r3, #0
 80010bc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80010be:	2301      	movs	r3, #1
 80010c0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80010c2:	2301      	movs	r3, #1
 80010c4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80010c6:	2300      	movs	r3, #0
 80010c8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80010ca:	2300      	movs	r3, #0
 80010cc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80010ce:	463b      	mov	r3, r7
 80010d0:	4618      	mov	r0, r3
 80010d2:	f000 fc6f 	bl	80019b4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80010d6:	2004      	movs	r0, #4
 80010d8:	f000 fc4c 	bl	8001974 <HAL_MPU_Enable>

}
 80010dc:	bf00      	nop
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010e8:	b672      	cpsid	i
}
 80010ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010ec:	bf00      	nop
 80010ee:	e7fd      	b.n	80010ec <Error_Handler+0x8>

080010f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001120 <HAL_MspInit+0x30>)
 80010f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80010fc:	4a08      	ldr	r2, [pc, #32]	@ (8001120 <HAL_MspInit+0x30>)
 80010fe:	f043 0302 	orr.w	r3, r3, #2
 8001102:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001106:	4b06      	ldr	r3, [pc, #24]	@ (8001120 <HAL_MspInit+0x30>)
 8001108:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800110c:	f003 0302 	and.w	r3, r3, #2
 8001110:	607b      	str	r3, [r7, #4]
 8001112:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001114:	bf00      	nop
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	58024400 	.word	0x58024400

08001124 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b0bc      	sub	sp, #240	@ 0xf0
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800113c:	f107 0318 	add.w	r3, r7, #24
 8001140:	22c0      	movs	r2, #192	@ 0xc0
 8001142:	2100      	movs	r1, #0
 8001144:	4618      	mov	r0, r3
 8001146:	f005 fc85 	bl	8006a54 <memset>
  if(hspi->Instance==SPI2)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a4b      	ldr	r2, [pc, #300]	@ (800127c <HAL_SPI_MspInit+0x158>)
 8001150:	4293      	cmp	r3, r2
 8001152:	f040 808e 	bne.w	8001272 <HAL_SPI_MspInit+0x14e>

    /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001156:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800115a:	f04f 0300 	mov.w	r3, #0
 800115e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001162:	2300      	movs	r3, #0
 8001164:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001166:	f107 0318 	add.w	r3, r7, #24
 800116a:	4618      	mov	r0, r3
 800116c:	f001 fe4c 	bl	8002e08 <HAL_RCCEx_PeriphCLKConfig>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8001176:	f7ff ffb5 	bl	80010e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800117a:	4b41      	ldr	r3, [pc, #260]	@ (8001280 <HAL_SPI_MspInit+0x15c>)
 800117c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001180:	4a3f      	ldr	r2, [pc, #252]	@ (8001280 <HAL_SPI_MspInit+0x15c>)
 8001182:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001186:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800118a:	4b3d      	ldr	r3, [pc, #244]	@ (8001280 <HAL_SPI_MspInit+0x15c>)
 800118c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001190:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001194:	617b      	str	r3, [r7, #20]
 8001196:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001198:	4b39      	ldr	r3, [pc, #228]	@ (8001280 <HAL_SPI_MspInit+0x15c>)
 800119a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800119e:	4a38      	ldr	r2, [pc, #224]	@ (8001280 <HAL_SPI_MspInit+0x15c>)
 80011a0:	f043 0308 	orr.w	r3, r3, #8
 80011a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011a8:	4b35      	ldr	r3, [pc, #212]	@ (8001280 <HAL_SPI_MspInit+0x15c>)
 80011aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011ae:	f003 0308 	and.w	r3, r3, #8
 80011b2:	613b      	str	r3, [r7, #16]
 80011b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80011b6:	4b32      	ldr	r3, [pc, #200]	@ (8001280 <HAL_SPI_MspInit+0x15c>)
 80011b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011bc:	4a30      	ldr	r2, [pc, #192]	@ (8001280 <HAL_SPI_MspInit+0x15c>)
 80011be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011c6:	4b2e      	ldr	r3, [pc, #184]	@ (8001280 <HAL_SPI_MspInit+0x15c>)
 80011c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d4:	4b2a      	ldr	r3, [pc, #168]	@ (8001280 <HAL_SPI_MspInit+0x15c>)
 80011d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011da:	4a29      	ldr	r2, [pc, #164]	@ (8001280 <HAL_SPI_MspInit+0x15c>)
 80011dc:	f043 0302 	orr.w	r3, r3, #2
 80011e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011e4:	4b26      	ldr	r3, [pc, #152]	@ (8001280 <HAL_SPI_MspInit+0x15c>)
 80011e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	60bb      	str	r3, [r7, #8]
 80011f0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PD3     ------> SPI2_SCK
    PI2     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80011f2:	2308      	movs	r3, #8
 80011f4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f8:	2302      	movs	r3, #2
 80011fa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001204:	2300      	movs	r3, #0
 8001206:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800120a:	2305      	movs	r3, #5
 800120c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001210:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001214:	4619      	mov	r1, r3
 8001216:	481b      	ldr	r0, [pc, #108]	@ (8001284 <HAL_SPI_MspInit+0x160>)
 8001218:	f000 fc0c 	bl	8001a34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800121c:	2304      	movs	r3, #4
 800121e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001222:	2302      	movs	r3, #2
 8001224:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122e:	2300      	movs	r3, #0
 8001230:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001234:	2305      	movs	r3, #5
 8001236:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800123a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800123e:	4619      	mov	r1, r3
 8001240:	4811      	ldr	r0, [pc, #68]	@ (8001288 <HAL_SPI_MspInit+0x164>)
 8001242:	f000 fbf7 	bl	8001a34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001246:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800124a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124e:	2302      	movs	r3, #2
 8001250:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125a:	2300      	movs	r3, #0
 800125c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001260:	2305      	movs	r3, #5
 8001262:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001266:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800126a:	4619      	mov	r1, r3
 800126c:	4807      	ldr	r0, [pc, #28]	@ (800128c <HAL_SPI_MspInit+0x168>)
 800126e:	f000 fbe1 	bl	8001a34 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001272:	bf00      	nop
 8001274:	37f0      	adds	r7, #240	@ 0xf0
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40003800 	.word	0x40003800
 8001280:	58024400 	.word	0x58024400
 8001284:	58020c00 	.word	0x58020c00
 8001288:	58022000 	.word	0x58022000
 800128c:	58020400 	.word	0x58020400

08001290 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b0ba      	sub	sp, #232	@ 0xe8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001298:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012a8:	f107 0310 	add.w	r3, r7, #16
 80012ac:	22c0      	movs	r2, #192	@ 0xc0
 80012ae:	2100      	movs	r1, #0
 80012b0:	4618      	mov	r0, r3
 80012b2:	f005 fbcf 	bl	8006a54 <memset>
  if(huart->Instance==USART3)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a27      	ldr	r2, [pc, #156]	@ (8001358 <HAL_UART_MspInit+0xc8>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d146      	bne.n	800134e <HAL_UART_MspInit+0xbe>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80012c0:	f04f 0202 	mov.w	r2, #2
 80012c4:	f04f 0300 	mov.w	r3, #0
 80012c8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80012cc:	2300      	movs	r3, #0
 80012ce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012d2:	f107 0310 	add.w	r3, r7, #16
 80012d6:	4618      	mov	r0, r3
 80012d8:	f001 fd96 	bl	8002e08 <HAL_RCCEx_PeriphCLKConfig>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80012e2:	f7ff feff 	bl	80010e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80012e6:	4b1d      	ldr	r3, [pc, #116]	@ (800135c <HAL_UART_MspInit+0xcc>)
 80012e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012ec:	4a1b      	ldr	r2, [pc, #108]	@ (800135c <HAL_UART_MspInit+0xcc>)
 80012ee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012f2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80012f6:	4b19      	ldr	r3, [pc, #100]	@ (800135c <HAL_UART_MspInit+0xcc>)
 80012f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001300:	60fb      	str	r3, [r7, #12]
 8001302:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001304:	4b15      	ldr	r3, [pc, #84]	@ (800135c <HAL_UART_MspInit+0xcc>)
 8001306:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800130a:	4a14      	ldr	r2, [pc, #80]	@ (800135c <HAL_UART_MspInit+0xcc>)
 800130c:	f043 0302 	orr.w	r3, r3, #2
 8001310:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001314:	4b11      	ldr	r3, [pc, #68]	@ (800135c <HAL_UART_MspInit+0xcc>)
 8001316:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	60bb      	str	r3, [r7, #8]
 8001320:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001322:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001326:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132a:	2302      	movs	r3, #2
 800132c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001336:	2300      	movs	r3, #0
 8001338:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800133c:	2307      	movs	r3, #7
 800133e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001342:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001346:	4619      	mov	r1, r3
 8001348:	4805      	ldr	r0, [pc, #20]	@ (8001360 <HAL_UART_MspInit+0xd0>)
 800134a:	f000 fb73 	bl	8001a34 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 800134e:	bf00      	nop
 8001350:	37e8      	adds	r7, #232	@ 0xe8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40004800 	.word	0x40004800
 800135c:	58024400 	.word	0x58024400
 8001360:	58020400 	.word	0x58020400

08001364 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001368:	bf00      	nop
 800136a:	e7fd      	b.n	8001368 <NMI_Handler+0x4>

0800136c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001370:	bf00      	nop
 8001372:	e7fd      	b.n	8001370 <HardFault_Handler+0x4>

08001374 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001378:	bf00      	nop
 800137a:	e7fd      	b.n	8001378 <MemManage_Handler+0x4>

0800137c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001380:	bf00      	nop
 8001382:	e7fd      	b.n	8001380 <BusFault_Handler+0x4>

08001384 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001388:	bf00      	nop
 800138a:	e7fd      	b.n	8001388 <UsageFault_Handler+0x4>

0800138c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr

0800139a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800139a:	b480      	push	{r7}
 800139c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr

080013b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013ba:	f000 f98f 	bl	80016dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
	...

080013c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013cc:	4a14      	ldr	r2, [pc, #80]	@ (8001420 <_sbrk+0x5c>)
 80013ce:	4b15      	ldr	r3, [pc, #84]	@ (8001424 <_sbrk+0x60>)
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013d8:	4b13      	ldr	r3, [pc, #76]	@ (8001428 <_sbrk+0x64>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d102      	bne.n	80013e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013e0:	4b11      	ldr	r3, [pc, #68]	@ (8001428 <_sbrk+0x64>)
 80013e2:	4a12      	ldr	r2, [pc, #72]	@ (800142c <_sbrk+0x68>)
 80013e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013e6:	4b10      	ldr	r3, [pc, #64]	@ (8001428 <_sbrk+0x64>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4413      	add	r3, r2
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d207      	bcs.n	8001404 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013f4:	f005 fb36 	bl	8006a64 <__errno>
 80013f8:	4603      	mov	r3, r0
 80013fa:	220c      	movs	r2, #12
 80013fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001402:	e009      	b.n	8001418 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001404:	4b08      	ldr	r3, [pc, #32]	@ (8001428 <_sbrk+0x64>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800140a:	4b07      	ldr	r3, [pc, #28]	@ (8001428 <_sbrk+0x64>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4413      	add	r3, r2
 8001412:	4a05      	ldr	r2, [pc, #20]	@ (8001428 <_sbrk+0x64>)
 8001414:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001416:	68fb      	ldr	r3, [r7, #12]
}
 8001418:	4618      	mov	r0, r3
 800141a:	3718      	adds	r7, #24
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	24080000 	.word	0x24080000
 8001424:	00000400 	.word	0x00000400
 8001428:	240003c8 	.word	0x240003c8
 800142c:	24000518 	.word	0x24000518

08001430 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001434:	4b43      	ldr	r3, [pc, #268]	@ (8001544 <SystemInit+0x114>)
 8001436:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800143a:	4a42      	ldr	r2, [pc, #264]	@ (8001544 <SystemInit+0x114>)
 800143c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001440:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001444:	4b40      	ldr	r3, [pc, #256]	@ (8001548 <SystemInit+0x118>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 030f 	and.w	r3, r3, #15
 800144c:	2b06      	cmp	r3, #6
 800144e:	d807      	bhi.n	8001460 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001450:	4b3d      	ldr	r3, [pc, #244]	@ (8001548 <SystemInit+0x118>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f023 030f 	bic.w	r3, r3, #15
 8001458:	4a3b      	ldr	r2, [pc, #236]	@ (8001548 <SystemInit+0x118>)
 800145a:	f043 0307 	orr.w	r3, r3, #7
 800145e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001460:	4b3a      	ldr	r3, [pc, #232]	@ (800154c <SystemInit+0x11c>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a39      	ldr	r2, [pc, #228]	@ (800154c <SystemInit+0x11c>)
 8001466:	f043 0301 	orr.w	r3, r3, #1
 800146a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800146c:	4b37      	ldr	r3, [pc, #220]	@ (800154c <SystemInit+0x11c>)
 800146e:	2200      	movs	r2, #0
 8001470:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001472:	4b36      	ldr	r3, [pc, #216]	@ (800154c <SystemInit+0x11c>)
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	4935      	ldr	r1, [pc, #212]	@ (800154c <SystemInit+0x11c>)
 8001478:	4b35      	ldr	r3, [pc, #212]	@ (8001550 <SystemInit+0x120>)
 800147a:	4013      	ands	r3, r2
 800147c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800147e:	4b32      	ldr	r3, [pc, #200]	@ (8001548 <SystemInit+0x118>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0308 	and.w	r3, r3, #8
 8001486:	2b00      	cmp	r3, #0
 8001488:	d007      	beq.n	800149a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800148a:	4b2f      	ldr	r3, [pc, #188]	@ (8001548 <SystemInit+0x118>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f023 030f 	bic.w	r3, r3, #15
 8001492:	4a2d      	ldr	r2, [pc, #180]	@ (8001548 <SystemInit+0x118>)
 8001494:	f043 0307 	orr.w	r3, r3, #7
 8001498:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800149a:	4b2c      	ldr	r3, [pc, #176]	@ (800154c <SystemInit+0x11c>)
 800149c:	2200      	movs	r2, #0
 800149e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80014a0:	4b2a      	ldr	r3, [pc, #168]	@ (800154c <SystemInit+0x11c>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80014a6:	4b29      	ldr	r3, [pc, #164]	@ (800154c <SystemInit+0x11c>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80014ac:	4b27      	ldr	r3, [pc, #156]	@ (800154c <SystemInit+0x11c>)
 80014ae:	4a29      	ldr	r2, [pc, #164]	@ (8001554 <SystemInit+0x124>)
 80014b0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80014b2:	4b26      	ldr	r3, [pc, #152]	@ (800154c <SystemInit+0x11c>)
 80014b4:	4a28      	ldr	r2, [pc, #160]	@ (8001558 <SystemInit+0x128>)
 80014b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80014b8:	4b24      	ldr	r3, [pc, #144]	@ (800154c <SystemInit+0x11c>)
 80014ba:	4a28      	ldr	r2, [pc, #160]	@ (800155c <SystemInit+0x12c>)
 80014bc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80014be:	4b23      	ldr	r3, [pc, #140]	@ (800154c <SystemInit+0x11c>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80014c4:	4b21      	ldr	r3, [pc, #132]	@ (800154c <SystemInit+0x11c>)
 80014c6:	4a25      	ldr	r2, [pc, #148]	@ (800155c <SystemInit+0x12c>)
 80014c8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80014ca:	4b20      	ldr	r3, [pc, #128]	@ (800154c <SystemInit+0x11c>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80014d0:	4b1e      	ldr	r3, [pc, #120]	@ (800154c <SystemInit+0x11c>)
 80014d2:	4a22      	ldr	r2, [pc, #136]	@ (800155c <SystemInit+0x12c>)
 80014d4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80014d6:	4b1d      	ldr	r3, [pc, #116]	@ (800154c <SystemInit+0x11c>)
 80014d8:	2200      	movs	r2, #0
 80014da:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014dc:	4b1b      	ldr	r3, [pc, #108]	@ (800154c <SystemInit+0x11c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a1a      	ldr	r2, [pc, #104]	@ (800154c <SystemInit+0x11c>)
 80014e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014e6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80014e8:	4b18      	ldr	r3, [pc, #96]	@ (800154c <SystemInit+0x11c>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80014ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001560 <SystemInit+0x130>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001564 <SystemInit+0x134>)
 80014f4:	4013      	ands	r3, r2
 80014f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80014fa:	d202      	bcs.n	8001502 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80014fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001568 <SystemInit+0x138>)
 80014fe:	2201      	movs	r2, #1
 8001500:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001502:	4b12      	ldr	r3, [pc, #72]	@ (800154c <SystemInit+0x11c>)
 8001504:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001508:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d113      	bne.n	8001538 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001510:	4b0e      	ldr	r3, [pc, #56]	@ (800154c <SystemInit+0x11c>)
 8001512:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001516:	4a0d      	ldr	r2, [pc, #52]	@ (800154c <SystemInit+0x11c>)
 8001518:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800151c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001520:	4b12      	ldr	r3, [pc, #72]	@ (800156c <SystemInit+0x13c>)
 8001522:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001526:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001528:	4b08      	ldr	r3, [pc, #32]	@ (800154c <SystemInit+0x11c>)
 800152a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800152e:	4a07      	ldr	r2, [pc, #28]	@ (800154c <SystemInit+0x11c>)
 8001530:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001534:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	e000ed00 	.word	0xe000ed00
 8001548:	52002000 	.word	0x52002000
 800154c:	58024400 	.word	0x58024400
 8001550:	eaf6ed7f 	.word	0xeaf6ed7f
 8001554:	02020200 	.word	0x02020200
 8001558:	01ff0000 	.word	0x01ff0000
 800155c:	01010280 	.word	0x01010280
 8001560:	5c001000 	.word	0x5c001000
 8001564:	ffff0000 	.word	0xffff0000
 8001568:	51008108 	.word	0x51008108
 800156c:	52004000 	.word	0x52004000

08001570 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001574:	4b09      	ldr	r3, [pc, #36]	@ (800159c <ExitRun0Mode+0x2c>)
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	4a08      	ldr	r2, [pc, #32]	@ (800159c <ExitRun0Mode+0x2c>)
 800157a:	f043 0302 	orr.w	r3, r3, #2
 800157e:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001580:	bf00      	nop
 8001582:	4b06      	ldr	r3, [pc, #24]	@ (800159c <ExitRun0Mode+0x2c>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d0f9      	beq.n	8001582 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800158e:	bf00      	nop
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	58024800 	.word	0x58024800

080015a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80015a0:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80015dc <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80015a4:	f7ff ffe4 	bl	8001570 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80015a8:	f7ff ff42 	bl	8001430 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015ac:	480c      	ldr	r0, [pc, #48]	@ (80015e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015ae:	490d      	ldr	r1, [pc, #52]	@ (80015e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015b0:	4a0d      	ldr	r2, [pc, #52]	@ (80015e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015b4:	e002      	b.n	80015bc <LoopCopyDataInit>

080015b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ba:	3304      	adds	r3, #4

080015bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015c0:	d3f9      	bcc.n	80015b6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015c2:	4a0a      	ldr	r2, [pc, #40]	@ (80015ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015c4:	4c0a      	ldr	r4, [pc, #40]	@ (80015f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015c8:	e001      	b.n	80015ce <LoopFillZerobss>

080015ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015cc:	3204      	adds	r2, #4

080015ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015d0:	d3fb      	bcc.n	80015ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015d2:	f005 fa4d 	bl	8006a70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015d6:	f7ff fb2d 	bl	8000c34 <main>
  bx  lr
 80015da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015dc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80015e0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80015e4:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 80015e8:	08007484 	.word	0x08007484
  ldr r2, =_sbss
 80015ec:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 80015f0:	24000518 	.word	0x24000518

080015f4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015f4:	e7fe      	b.n	80015f4 <ADC3_IRQHandler>
	...

080015f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015fe:	2003      	movs	r0, #3
 8001600:	f000 f96e 	bl	80018e0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001604:	f001 fa2a 	bl	8002a5c <HAL_RCC_GetSysClockFreq>
 8001608:	4602      	mov	r2, r0
 800160a:	4b15      	ldr	r3, [pc, #84]	@ (8001660 <HAL_Init+0x68>)
 800160c:	699b      	ldr	r3, [r3, #24]
 800160e:	0a1b      	lsrs	r3, r3, #8
 8001610:	f003 030f 	and.w	r3, r3, #15
 8001614:	4913      	ldr	r1, [pc, #76]	@ (8001664 <HAL_Init+0x6c>)
 8001616:	5ccb      	ldrb	r3, [r1, r3]
 8001618:	f003 031f 	and.w	r3, r3, #31
 800161c:	fa22 f303 	lsr.w	r3, r2, r3
 8001620:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001622:	4b0f      	ldr	r3, [pc, #60]	@ (8001660 <HAL_Init+0x68>)
 8001624:	699b      	ldr	r3, [r3, #24]
 8001626:	f003 030f 	and.w	r3, r3, #15
 800162a:	4a0e      	ldr	r2, [pc, #56]	@ (8001664 <HAL_Init+0x6c>)
 800162c:	5cd3      	ldrb	r3, [r2, r3]
 800162e:	f003 031f 	and.w	r3, r3, #31
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	fa22 f303 	lsr.w	r3, r2, r3
 8001638:	4a0b      	ldr	r2, [pc, #44]	@ (8001668 <HAL_Init+0x70>)
 800163a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800163c:	4a0b      	ldr	r2, [pc, #44]	@ (800166c <HAL_Init+0x74>)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001642:	200f      	movs	r0, #15
 8001644:	f000 f814 	bl	8001670 <HAL_InitTick>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e002      	b.n	8001658 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001652:	f7ff fd4d 	bl	80010f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001656:	2300      	movs	r3, #0
}
 8001658:	4618      	mov	r0, r3
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	58024400 	.word	0x58024400
 8001664:	08007408 	.word	0x08007408
 8001668:	24000004 	.word	0x24000004
 800166c:	24000000 	.word	0x24000000

08001670 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001678:	4b15      	ldr	r3, [pc, #84]	@ (80016d0 <HAL_InitTick+0x60>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d101      	bne.n	8001684 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e021      	b.n	80016c8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001684:	4b13      	ldr	r3, [pc, #76]	@ (80016d4 <HAL_InitTick+0x64>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	4b11      	ldr	r3, [pc, #68]	@ (80016d0 <HAL_InitTick+0x60>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	4619      	mov	r1, r3
 800168e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001692:	fbb3 f3f1 	udiv	r3, r3, r1
 8001696:	fbb2 f3f3 	udiv	r3, r2, r3
 800169a:	4618      	mov	r0, r3
 800169c:	f000 f945 	bl	800192a <HAL_SYSTICK_Config>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e00e      	b.n	80016c8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2b0f      	cmp	r3, #15
 80016ae:	d80a      	bhi.n	80016c6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016b0:	2200      	movs	r2, #0
 80016b2:	6879      	ldr	r1, [r7, #4]
 80016b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80016b8:	f000 f91d 	bl	80018f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016bc:	4a06      	ldr	r2, [pc, #24]	@ (80016d8 <HAL_InitTick+0x68>)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016c2:	2300      	movs	r3, #0
 80016c4:	e000      	b.n	80016c8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	2400000c 	.word	0x2400000c
 80016d4:	24000000 	.word	0x24000000
 80016d8:	24000008 	.word	0x24000008

080016dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016e0:	4b06      	ldr	r3, [pc, #24]	@ (80016fc <HAL_IncTick+0x20>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	461a      	mov	r2, r3
 80016e6:	4b06      	ldr	r3, [pc, #24]	@ (8001700 <HAL_IncTick+0x24>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4413      	add	r3, r2
 80016ec:	4a04      	ldr	r2, [pc, #16]	@ (8001700 <HAL_IncTick+0x24>)
 80016ee:	6013      	str	r3, [r2, #0]
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	2400000c 	.word	0x2400000c
 8001700:	240003cc 	.word	0x240003cc

08001704 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  return uwTick;
 8001708:	4b03      	ldr	r3, [pc, #12]	@ (8001718 <HAL_GetTick+0x14>)
 800170a:	681b      	ldr	r3, [r3, #0]
}
 800170c:	4618      	mov	r0, r3
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	240003cc 	.word	0x240003cc

0800171c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001724:	f7ff ffee 	bl	8001704 <HAL_GetTick>
 8001728:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001734:	d005      	beq.n	8001742 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001736:	4b0a      	ldr	r3, [pc, #40]	@ (8001760 <HAL_Delay+0x44>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	461a      	mov	r2, r3
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	4413      	add	r3, r2
 8001740:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001742:	bf00      	nop
 8001744:	f7ff ffde 	bl	8001704 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	68fa      	ldr	r2, [r7, #12]
 8001750:	429a      	cmp	r2, r3
 8001752:	d8f7      	bhi.n	8001744 <HAL_Delay+0x28>
  {
  }
}
 8001754:	bf00      	nop
 8001756:	bf00      	nop
 8001758:	3710      	adds	r7, #16
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	2400000c 	.word	0x2400000c

08001764 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001768:	4b03      	ldr	r3, [pc, #12]	@ (8001778 <HAL_GetREVID+0x14>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	0c1b      	lsrs	r3, r3, #16
}
 800176e:	4618      	mov	r0, r3
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	5c001000 	.word	0x5c001000

0800177c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f003 0307 	and.w	r3, r3, #7
 800178a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800178c:	4b0b      	ldr	r3, [pc, #44]	@ (80017bc <__NVIC_SetPriorityGrouping+0x40>)
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001792:	68ba      	ldr	r2, [r7, #8]
 8001794:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001798:	4013      	ands	r3, r2
 800179a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017a4:	4b06      	ldr	r3, [pc, #24]	@ (80017c0 <__NVIC_SetPriorityGrouping+0x44>)
 80017a6:	4313      	orrs	r3, r2
 80017a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017aa:	4a04      	ldr	r2, [pc, #16]	@ (80017bc <__NVIC_SetPriorityGrouping+0x40>)
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	60d3      	str	r3, [r2, #12]
}
 80017b0:	bf00      	nop
 80017b2:	3714      	adds	r7, #20
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	e000ed00 	.word	0xe000ed00
 80017c0:	05fa0000 	.word	0x05fa0000

080017c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017c8:	4b04      	ldr	r3, [pc, #16]	@ (80017dc <__NVIC_GetPriorityGrouping+0x18>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	0a1b      	lsrs	r3, r3, #8
 80017ce:	f003 0307 	and.w	r3, r3, #7
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	e000ed00 	.word	0xe000ed00

080017e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	6039      	str	r1, [r7, #0]
 80017ea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80017ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	db0a      	blt.n	800180a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	490c      	ldr	r1, [pc, #48]	@ (800182c <__NVIC_SetPriority+0x4c>)
 80017fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017fe:	0112      	lsls	r2, r2, #4
 8001800:	b2d2      	uxtb	r2, r2
 8001802:	440b      	add	r3, r1
 8001804:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001808:	e00a      	b.n	8001820 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	b2da      	uxtb	r2, r3
 800180e:	4908      	ldr	r1, [pc, #32]	@ (8001830 <__NVIC_SetPriority+0x50>)
 8001810:	88fb      	ldrh	r3, [r7, #6]
 8001812:	f003 030f 	and.w	r3, r3, #15
 8001816:	3b04      	subs	r3, #4
 8001818:	0112      	lsls	r2, r2, #4
 800181a:	b2d2      	uxtb	r2, r2
 800181c:	440b      	add	r3, r1
 800181e:	761a      	strb	r2, [r3, #24]
}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	e000e100 	.word	0xe000e100
 8001830:	e000ed00 	.word	0xe000ed00

08001834 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001834:	b480      	push	{r7}
 8001836:	b089      	sub	sp, #36	@ 0x24
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f003 0307 	and.w	r3, r3, #7
 8001846:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	f1c3 0307 	rsb	r3, r3, #7
 800184e:	2b04      	cmp	r3, #4
 8001850:	bf28      	it	cs
 8001852:	2304      	movcs	r3, #4
 8001854:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	3304      	adds	r3, #4
 800185a:	2b06      	cmp	r3, #6
 800185c:	d902      	bls.n	8001864 <NVIC_EncodePriority+0x30>
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	3b03      	subs	r3, #3
 8001862:	e000      	b.n	8001866 <NVIC_EncodePriority+0x32>
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001868:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	43da      	mvns	r2, r3
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	401a      	ands	r2, r3
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800187c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	fa01 f303 	lsl.w	r3, r1, r3
 8001886:	43d9      	mvns	r1, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800188c:	4313      	orrs	r3, r2
         );
}
 800188e:	4618      	mov	r0, r3
 8001890:	3724      	adds	r7, #36	@ 0x24
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
	...

0800189c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	3b01      	subs	r3, #1
 80018a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018ac:	d301      	bcc.n	80018b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ae:	2301      	movs	r3, #1
 80018b0:	e00f      	b.n	80018d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018b2:	4a0a      	ldr	r2, [pc, #40]	@ (80018dc <SysTick_Config+0x40>)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	3b01      	subs	r3, #1
 80018b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ba:	210f      	movs	r1, #15
 80018bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80018c0:	f7ff ff8e 	bl	80017e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018c4:	4b05      	ldr	r3, [pc, #20]	@ (80018dc <SysTick_Config+0x40>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ca:	4b04      	ldr	r3, [pc, #16]	@ (80018dc <SysTick_Config+0x40>)
 80018cc:	2207      	movs	r2, #7
 80018ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	e000e010 	.word	0xe000e010

080018e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f7ff ff47 	bl	800177c <__NVIC_SetPriorityGrouping>
}
 80018ee:	bf00      	nop
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b086      	sub	sp, #24
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	4603      	mov	r3, r0
 80018fe:	60b9      	str	r1, [r7, #8]
 8001900:	607a      	str	r2, [r7, #4]
 8001902:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001904:	f7ff ff5e 	bl	80017c4 <__NVIC_GetPriorityGrouping>
 8001908:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	68b9      	ldr	r1, [r7, #8]
 800190e:	6978      	ldr	r0, [r7, #20]
 8001910:	f7ff ff90 	bl	8001834 <NVIC_EncodePriority>
 8001914:	4602      	mov	r2, r0
 8001916:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800191a:	4611      	mov	r1, r2
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff ff5f 	bl	80017e0 <__NVIC_SetPriority>
}
 8001922:	bf00      	nop
 8001924:	3718      	adds	r7, #24
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b082      	sub	sp, #8
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f7ff ffb2 	bl	800189c <SysTick_Config>
 8001938:	4603      	mov	r3, r0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
	...

08001944 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001948:	f3bf 8f5f 	dmb	sy
}
 800194c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800194e:	4b07      	ldr	r3, [pc, #28]	@ (800196c <HAL_MPU_Disable+0x28>)
 8001950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001952:	4a06      	ldr	r2, [pc, #24]	@ (800196c <HAL_MPU_Disable+0x28>)
 8001954:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001958:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800195a:	4b05      	ldr	r3, [pc, #20]	@ (8001970 <HAL_MPU_Disable+0x2c>)
 800195c:	2200      	movs	r2, #0
 800195e:	605a      	str	r2, [r3, #4]
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	e000ed00 	.word	0xe000ed00
 8001970:	e000ed90 	.word	0xe000ed90

08001974 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800197c:	4a0b      	ldr	r2, [pc, #44]	@ (80019ac <HAL_MPU_Enable+0x38>)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f043 0301 	orr.w	r3, r3, #1
 8001984:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001986:	4b0a      	ldr	r3, [pc, #40]	@ (80019b0 <HAL_MPU_Enable+0x3c>)
 8001988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800198a:	4a09      	ldr	r2, [pc, #36]	@ (80019b0 <HAL_MPU_Enable+0x3c>)
 800198c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001990:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001992:	f3bf 8f4f 	dsb	sy
}
 8001996:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001998:	f3bf 8f6f 	isb	sy
}
 800199c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	e000ed90 	.word	0xe000ed90
 80019b0:	e000ed00 	.word	0xe000ed00

080019b4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	785a      	ldrb	r2, [r3, #1]
 80019c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001a30 <HAL_MPU_ConfigRegion+0x7c>)
 80019c2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80019c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001a30 <HAL_MPU_ConfigRegion+0x7c>)
 80019c6:	691b      	ldr	r3, [r3, #16]
 80019c8:	4a19      	ldr	r2, [pc, #100]	@ (8001a30 <HAL_MPU_ConfigRegion+0x7c>)
 80019ca:	f023 0301 	bic.w	r3, r3, #1
 80019ce:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80019d0:	4a17      	ldr	r2, [pc, #92]	@ (8001a30 <HAL_MPU_ConfigRegion+0x7c>)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	7b1b      	ldrb	r3, [r3, #12]
 80019dc:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	7adb      	ldrb	r3, [r3, #11]
 80019e2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80019e4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	7a9b      	ldrb	r3, [r3, #10]
 80019ea:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80019ec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	7b5b      	ldrb	r3, [r3, #13]
 80019f2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80019f4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	7b9b      	ldrb	r3, [r3, #14]
 80019fa:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80019fc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	7bdb      	ldrb	r3, [r3, #15]
 8001a02:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001a04:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	7a5b      	ldrb	r3, [r3, #9]
 8001a0a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001a0c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	7a1b      	ldrb	r3, [r3, #8]
 8001a12:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001a14:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	7812      	ldrb	r2, [r2, #0]
 8001a1a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a1c:	4a04      	ldr	r2, [pc, #16]	@ (8001a30 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001a1e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a20:	6113      	str	r3, [r2, #16]
}
 8001a22:	bf00      	nop
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	e000ed90 	.word	0xe000ed90

08001a34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b089      	sub	sp, #36	@ 0x24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001a42:	4b89      	ldr	r3, [pc, #548]	@ (8001c68 <HAL_GPIO_Init+0x234>)
 8001a44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001a46:	e194      	b.n	8001d72 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	2101      	movs	r1, #1
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	fa01 f303 	lsl.w	r3, r1, r3
 8001a54:	4013      	ands	r3, r2
 8001a56:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f000 8186 	beq.w	8001d6c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f003 0303 	and.w	r3, r3, #3
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d005      	beq.n	8001a78 <HAL_GPIO_Init+0x44>
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f003 0303 	and.w	r3, r3, #3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d130      	bne.n	8001ada <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	2203      	movs	r2, #3
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	68da      	ldr	r2, [r3, #12]
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001aae:	2201      	movs	r2, #1
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	43db      	mvns	r3, r3
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	4013      	ands	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	091b      	lsrs	r3, r3, #4
 8001ac4:	f003 0201 	and.w	r2, r3, #1
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f003 0303 	and.w	r3, r3, #3
 8001ae2:	2b03      	cmp	r3, #3
 8001ae4:	d017      	beq.n	8001b16 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	2203      	movs	r2, #3
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	43db      	mvns	r3, r3
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	4013      	ands	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	689a      	ldr	r2, [r3, #8]
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f003 0303 	and.w	r3, r3, #3
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d123      	bne.n	8001b6a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	08da      	lsrs	r2, r3, #3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	3208      	adds	r2, #8
 8001b2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	220f      	movs	r2, #15
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	4013      	ands	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	691a      	ldr	r2, [r3, #16]
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	f003 0307 	and.w	r3, r3, #7
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	08da      	lsrs	r2, r3, #3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	3208      	adds	r2, #8
 8001b64:	69b9      	ldr	r1, [r7, #24]
 8001b66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	2203      	movs	r2, #3
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	43db      	mvns	r3, r3
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f003 0203 	and.w	r2, r3, #3
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	f000 80e0 	beq.w	8001d6c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bac:	4b2f      	ldr	r3, [pc, #188]	@ (8001c6c <HAL_GPIO_Init+0x238>)
 8001bae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001bb2:	4a2e      	ldr	r2, [pc, #184]	@ (8001c6c <HAL_GPIO_Init+0x238>)
 8001bb4:	f043 0302 	orr.w	r3, r3, #2
 8001bb8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001bbc:	4b2b      	ldr	r3, [pc, #172]	@ (8001c6c <HAL_GPIO_Init+0x238>)
 8001bbe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bca:	4a29      	ldr	r2, [pc, #164]	@ (8001c70 <HAL_GPIO_Init+0x23c>)
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	089b      	lsrs	r3, r3, #2
 8001bd0:	3302      	adds	r3, #2
 8001bd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	f003 0303 	and.w	r3, r3, #3
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	220f      	movs	r2, #15
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	43db      	mvns	r3, r3
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	4013      	ands	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a20      	ldr	r2, [pc, #128]	@ (8001c74 <HAL_GPIO_Init+0x240>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d052      	beq.n	8001c9c <HAL_GPIO_Init+0x268>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a1f      	ldr	r2, [pc, #124]	@ (8001c78 <HAL_GPIO_Init+0x244>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d031      	beq.n	8001c62 <HAL_GPIO_Init+0x22e>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a1e      	ldr	r2, [pc, #120]	@ (8001c7c <HAL_GPIO_Init+0x248>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d02b      	beq.n	8001c5e <HAL_GPIO_Init+0x22a>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a1d      	ldr	r2, [pc, #116]	@ (8001c80 <HAL_GPIO_Init+0x24c>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d025      	beq.n	8001c5a <HAL_GPIO_Init+0x226>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a1c      	ldr	r2, [pc, #112]	@ (8001c84 <HAL_GPIO_Init+0x250>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d01f      	beq.n	8001c56 <HAL_GPIO_Init+0x222>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a1b      	ldr	r2, [pc, #108]	@ (8001c88 <HAL_GPIO_Init+0x254>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d019      	beq.n	8001c52 <HAL_GPIO_Init+0x21e>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a1a      	ldr	r2, [pc, #104]	@ (8001c8c <HAL_GPIO_Init+0x258>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d013      	beq.n	8001c4e <HAL_GPIO_Init+0x21a>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a19      	ldr	r2, [pc, #100]	@ (8001c90 <HAL_GPIO_Init+0x25c>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d00d      	beq.n	8001c4a <HAL_GPIO_Init+0x216>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a18      	ldr	r2, [pc, #96]	@ (8001c94 <HAL_GPIO_Init+0x260>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d007      	beq.n	8001c46 <HAL_GPIO_Init+0x212>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a17      	ldr	r2, [pc, #92]	@ (8001c98 <HAL_GPIO_Init+0x264>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d101      	bne.n	8001c42 <HAL_GPIO_Init+0x20e>
 8001c3e:	2309      	movs	r3, #9
 8001c40:	e02d      	b.n	8001c9e <HAL_GPIO_Init+0x26a>
 8001c42:	230a      	movs	r3, #10
 8001c44:	e02b      	b.n	8001c9e <HAL_GPIO_Init+0x26a>
 8001c46:	2308      	movs	r3, #8
 8001c48:	e029      	b.n	8001c9e <HAL_GPIO_Init+0x26a>
 8001c4a:	2307      	movs	r3, #7
 8001c4c:	e027      	b.n	8001c9e <HAL_GPIO_Init+0x26a>
 8001c4e:	2306      	movs	r3, #6
 8001c50:	e025      	b.n	8001c9e <HAL_GPIO_Init+0x26a>
 8001c52:	2305      	movs	r3, #5
 8001c54:	e023      	b.n	8001c9e <HAL_GPIO_Init+0x26a>
 8001c56:	2304      	movs	r3, #4
 8001c58:	e021      	b.n	8001c9e <HAL_GPIO_Init+0x26a>
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e01f      	b.n	8001c9e <HAL_GPIO_Init+0x26a>
 8001c5e:	2302      	movs	r3, #2
 8001c60:	e01d      	b.n	8001c9e <HAL_GPIO_Init+0x26a>
 8001c62:	2301      	movs	r3, #1
 8001c64:	e01b      	b.n	8001c9e <HAL_GPIO_Init+0x26a>
 8001c66:	bf00      	nop
 8001c68:	58000080 	.word	0x58000080
 8001c6c:	58024400 	.word	0x58024400
 8001c70:	58000400 	.word	0x58000400
 8001c74:	58020000 	.word	0x58020000
 8001c78:	58020400 	.word	0x58020400
 8001c7c:	58020800 	.word	0x58020800
 8001c80:	58020c00 	.word	0x58020c00
 8001c84:	58021000 	.word	0x58021000
 8001c88:	58021400 	.word	0x58021400
 8001c8c:	58021800 	.word	0x58021800
 8001c90:	58021c00 	.word	0x58021c00
 8001c94:	58022000 	.word	0x58022000
 8001c98:	58022400 	.word	0x58022400
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	69fa      	ldr	r2, [r7, #28]
 8001ca0:	f002 0203 	and.w	r2, r2, #3
 8001ca4:	0092      	lsls	r2, r2, #2
 8001ca6:	4093      	lsls	r3, r2
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cae:	4938      	ldr	r1, [pc, #224]	@ (8001d90 <HAL_GPIO_Init+0x35c>)
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	089b      	lsrs	r3, r3, #2
 8001cb4:	3302      	adds	r3, #2
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001cbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d003      	beq.n	8001ce2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001ce2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001cea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d003      	beq.n	8001d10 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001d10:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	43db      	mvns	r3, r3
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	4013      	ands	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d003      	beq.n	8001d3c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	43db      	mvns	r3, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d003      	beq.n	8001d66 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	3301      	adds	r3, #1
 8001d70:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	fa22 f303 	lsr.w	r3, r2, r3
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	f47f ae63 	bne.w	8001a48 <HAL_GPIO_Init+0x14>
  }
}
 8001d82:	bf00      	nop
 8001d84:	bf00      	nop
 8001d86:	3724      	adds	r7, #36	@ 0x24
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	58000400 	.word	0x58000400

08001d94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	807b      	strh	r3, [r7, #2]
 8001da0:	4613      	mov	r3, r2
 8001da2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001da4:	787b      	ldrb	r3, [r7, #1]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001daa:	887a      	ldrh	r2, [r7, #2]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001db0:	e003      	b.n	8001dba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001db2:	887b      	ldrh	r3, [r7, #2]
 8001db4:	041a      	lsls	r2, r3, #16
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	619a      	str	r2, [r3, #24]
}
 8001dba:	bf00      	nop
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
	...

08001dc8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001dd0:	4b19      	ldr	r3, [pc, #100]	@ (8001e38 <HAL_PWREx_ConfigSupply+0x70>)
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	f003 0304 	and.w	r3, r3, #4
 8001dd8:	2b04      	cmp	r3, #4
 8001dda:	d00a      	beq.n	8001df2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001ddc:	4b16      	ldr	r3, [pc, #88]	@ (8001e38 <HAL_PWREx_ConfigSupply+0x70>)
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	f003 0307 	and.w	r3, r3, #7
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d001      	beq.n	8001dee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e01f      	b.n	8001e2e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001dee:	2300      	movs	r3, #0
 8001df0:	e01d      	b.n	8001e2e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001df2:	4b11      	ldr	r3, [pc, #68]	@ (8001e38 <HAL_PWREx_ConfigSupply+0x70>)
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	f023 0207 	bic.w	r2, r3, #7
 8001dfa:	490f      	ldr	r1, [pc, #60]	@ (8001e38 <HAL_PWREx_ConfigSupply+0x70>)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001e02:	f7ff fc7f 	bl	8001704 <HAL_GetTick>
 8001e06:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001e08:	e009      	b.n	8001e1e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001e0a:	f7ff fc7b 	bl	8001704 <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001e18:	d901      	bls.n	8001e1e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e007      	b.n	8001e2e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001e1e:	4b06      	ldr	r3, [pc, #24]	@ (8001e38 <HAL_PWREx_ConfigSupply+0x70>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e2a:	d1ee      	bne.n	8001e0a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3710      	adds	r7, #16
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	58024800 	.word	0x58024800

08001e3c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b08c      	sub	sp, #48	@ 0x30
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d102      	bne.n	8001e50 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	f000 bc48 	b.w	80026e0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0301 	and.w	r3, r3, #1
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f000 8088 	beq.w	8001f6e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e5e:	4b99      	ldr	r3, [pc, #612]	@ (80020c4 <HAL_RCC_OscConfig+0x288>)
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001e68:	4b96      	ldr	r3, [pc, #600]	@ (80020c4 <HAL_RCC_OscConfig+0x288>)
 8001e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001e6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e70:	2b10      	cmp	r3, #16
 8001e72:	d007      	beq.n	8001e84 <HAL_RCC_OscConfig+0x48>
 8001e74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e76:	2b18      	cmp	r3, #24
 8001e78:	d111      	bne.n	8001e9e <HAL_RCC_OscConfig+0x62>
 8001e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e7c:	f003 0303 	and.w	r3, r3, #3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d10c      	bne.n	8001e9e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e84:	4b8f      	ldr	r3, [pc, #572]	@ (80020c4 <HAL_RCC_OscConfig+0x288>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d06d      	beq.n	8001f6c <HAL_RCC_OscConfig+0x130>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d169      	bne.n	8001f6c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	f000 bc21 	b.w	80026e0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ea6:	d106      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x7a>
 8001ea8:	4b86      	ldr	r3, [pc, #536]	@ (80020c4 <HAL_RCC_OscConfig+0x288>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a85      	ldr	r2, [pc, #532]	@ (80020c4 <HAL_RCC_OscConfig+0x288>)
 8001eae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001eb2:	6013      	str	r3, [r2, #0]
 8001eb4:	e02e      	b.n	8001f14 <HAL_RCC_OscConfig+0xd8>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d10c      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x9c>
 8001ebe:	4b81      	ldr	r3, [pc, #516]	@ (80020c4 <HAL_RCC_OscConfig+0x288>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a80      	ldr	r2, [pc, #512]	@ (80020c4 <HAL_RCC_OscConfig+0x288>)
 8001ec4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ec8:	6013      	str	r3, [r2, #0]
 8001eca:	4b7e      	ldr	r3, [pc, #504]	@ (80020c4 <HAL_RCC_OscConfig+0x288>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a7d      	ldr	r2, [pc, #500]	@ (80020c4 <HAL_RCC_OscConfig+0x288>)
 8001ed0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ed4:	6013      	str	r3, [r2, #0]
 8001ed6:	e01d      	b.n	8001f14 <HAL_RCC_OscConfig+0xd8>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ee0:	d10c      	bne.n	8001efc <HAL_RCC_OscConfig+0xc0>
 8001ee2:	4b78      	ldr	r3, [pc, #480]	@ (80020c4 <HAL_RCC_OscConfig+0x288>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a77      	ldr	r2, [pc, #476]	@ (80020c4 <HAL_RCC_OscConfig+0x288>)
 8001ee8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001eec:	6013      	str	r3, [r2, #0]
 8001eee:	4b75      	ldr	r3, [pc, #468]	@ (80020c4 <HAL_RCC_OscConfig+0x288>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a74      	ldr	r2, [pc, #464]	@ (80020c4 <HAL_RCC_OscConfig+0x288>)
 8001ef4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ef8:	6013      	str	r3, [r2, #0]
 8001efa:	e00b      	b.n	8001f14 <HAL_RCC_OscConfig+0xd8>
 8001efc:	4b71      	ldr	r3, [pc, #452]	@ (80020c4 <HAL_RCC_OscConfig+0x288>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a70      	ldr	r2, [pc, #448]	@ (80020c4 <HAL_RCC_OscConfig+0x288>)
 8001f02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f06:	6013      	str	r3, [r2, #0]
 8001f08:	4b6e      	ldr	r3, [pc, #440]	@ (80020c4 <HAL_RCC_OscConfig+0x288>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a6d      	ldr	r2, [pc, #436]	@ (80020c4 <HAL_RCC_OscConfig+0x288>)
 8001f0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d013      	beq.n	8001f44 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f1c:	f7ff fbf2 	bl	8001704 <HAL_GetTick>
 8001f20:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f24:	f7ff fbee 	bl	8001704 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b64      	cmp	r3, #100	@ 0x64
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e3d4      	b.n	80026e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f36:	4b63      	ldr	r3, [pc, #396]	@ (80020c4 <HAL_RCC_OscConfig+0x288>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d0f0      	beq.n	8001f24 <HAL_RCC_OscConfig+0xe8>
 8001f42:	e014      	b.n	8001f6e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f44:	f7ff fbde 	bl	8001704 <HAL_GetTick>
 8001f48:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f4a:	e008      	b.n	8001f5e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f4c:	f7ff fbda 	bl	8001704 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b64      	cmp	r3, #100	@ 0x64
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e3c0      	b.n	80026e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f5e:	4b59      	ldr	r3, [pc, #356]	@ (80020c4 <HAL_RCC_OscConfig+0x288>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1f0      	bne.n	8001f4c <HAL_RCC_OscConfig+0x110>
 8001f6a:	e000      	b.n	8001f6e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f000 80ca 	beq.w	8002110 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f7c:	4b51      	ldr	r3, [pc, #324]	@ (80020c4 <HAL_RCC_OscConfig+0x288>)
 8001f7e:	691b      	ldr	r3, [r3, #16]
 8001f80:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001f84:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001f86:	4b4f      	ldr	r3, [pc, #316]	@ (80020c4 <HAL_RCC_OscConfig+0x288>)
 8001f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f8a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001f8c:	6a3b      	ldr	r3, [r7, #32]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d007      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x166>
 8001f92:	6a3b      	ldr	r3, [r7, #32]
 8001f94:	2b18      	cmp	r3, #24
 8001f96:	d156      	bne.n	8002046 <HAL_RCC_OscConfig+0x20a>
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	f003 0303 	and.w	r3, r3, #3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d151      	bne.n	8002046 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fa2:	4b48      	ldr	r3, [pc, #288]	@ (80020c4 <HAL_RCC_OscConfig+0x288>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0304 	and.w	r3, r3, #4
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d005      	beq.n	8001fba <HAL_RCC_OscConfig+0x17e>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d101      	bne.n	8001fba <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e392      	b.n	80026e0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001fba:	4b42      	ldr	r3, [pc, #264]	@ (80020c4 <HAL_RCC_OscConfig+0x288>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f023 0219 	bic.w	r2, r3, #25
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	493f      	ldr	r1, [pc, #252]	@ (80020c4 <HAL_RCC_OscConfig+0x288>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fcc:	f7ff fb9a 	bl	8001704 <HAL_GetTick>
 8001fd0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fd2:	e008      	b.n	8001fe6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fd4:	f7ff fb96 	bl	8001704 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e37c      	b.n	80026e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fe6:	4b37      	ldr	r3, [pc, #220]	@ (80020c4 <HAL_RCC_OscConfig+0x288>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0304 	and.w	r3, r3, #4
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d0f0      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ff2:	f7ff fbb7 	bl	8001764 <HAL_GetREVID>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d817      	bhi.n	8002030 <HAL_RCC_OscConfig+0x1f4>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	691b      	ldr	r3, [r3, #16]
 8002004:	2b40      	cmp	r3, #64	@ 0x40
 8002006:	d108      	bne.n	800201a <HAL_RCC_OscConfig+0x1de>
 8002008:	4b2e      	ldr	r3, [pc, #184]	@ (80020c4 <HAL_RCC_OscConfig+0x288>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002010:	4a2c      	ldr	r2, [pc, #176]	@ (80020c4 <HAL_RCC_OscConfig+0x288>)
 8002012:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002016:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002018:	e07a      	b.n	8002110 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800201a:	4b2a      	ldr	r3, [pc, #168]	@ (80020c4 <HAL_RCC_OscConfig+0x288>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	031b      	lsls	r3, r3, #12
 8002028:	4926      	ldr	r1, [pc, #152]	@ (80020c4 <HAL_RCC_OscConfig+0x288>)
 800202a:	4313      	orrs	r3, r2
 800202c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800202e:	e06f      	b.n	8002110 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002030:	4b24      	ldr	r3, [pc, #144]	@ (80020c4 <HAL_RCC_OscConfig+0x288>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	691b      	ldr	r3, [r3, #16]
 800203c:	061b      	lsls	r3, r3, #24
 800203e:	4921      	ldr	r1, [pc, #132]	@ (80020c4 <HAL_RCC_OscConfig+0x288>)
 8002040:	4313      	orrs	r3, r2
 8002042:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002044:	e064      	b.n	8002110 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d047      	beq.n	80020de <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800204e:	4b1d      	ldr	r3, [pc, #116]	@ (80020c4 <HAL_RCC_OscConfig+0x288>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f023 0219 	bic.w	r2, r3, #25
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	491a      	ldr	r1, [pc, #104]	@ (80020c4 <HAL_RCC_OscConfig+0x288>)
 800205c:	4313      	orrs	r3, r2
 800205e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002060:	f7ff fb50 	bl	8001704 <HAL_GetTick>
 8002064:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002068:	f7ff fb4c 	bl	8001704 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b02      	cmp	r3, #2
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e332      	b.n	80026e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800207a:	4b12      	ldr	r3, [pc, #72]	@ (80020c4 <HAL_RCC_OscConfig+0x288>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0304 	and.w	r3, r3, #4
 8002082:	2b00      	cmp	r3, #0
 8002084:	d0f0      	beq.n	8002068 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002086:	f7ff fb6d 	bl	8001764 <HAL_GetREVID>
 800208a:	4603      	mov	r3, r0
 800208c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002090:	4293      	cmp	r3, r2
 8002092:	d819      	bhi.n	80020c8 <HAL_RCC_OscConfig+0x28c>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	691b      	ldr	r3, [r3, #16]
 8002098:	2b40      	cmp	r3, #64	@ 0x40
 800209a:	d108      	bne.n	80020ae <HAL_RCC_OscConfig+0x272>
 800209c:	4b09      	ldr	r3, [pc, #36]	@ (80020c4 <HAL_RCC_OscConfig+0x288>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80020a4:	4a07      	ldr	r2, [pc, #28]	@ (80020c4 <HAL_RCC_OscConfig+0x288>)
 80020a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020aa:	6053      	str	r3, [r2, #4]
 80020ac:	e030      	b.n	8002110 <HAL_RCC_OscConfig+0x2d4>
 80020ae:	4b05      	ldr	r3, [pc, #20]	@ (80020c4 <HAL_RCC_OscConfig+0x288>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	031b      	lsls	r3, r3, #12
 80020bc:	4901      	ldr	r1, [pc, #4]	@ (80020c4 <HAL_RCC_OscConfig+0x288>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	604b      	str	r3, [r1, #4]
 80020c2:	e025      	b.n	8002110 <HAL_RCC_OscConfig+0x2d4>
 80020c4:	58024400 	.word	0x58024400
 80020c8:	4b9a      	ldr	r3, [pc, #616]	@ (8002334 <HAL_RCC_OscConfig+0x4f8>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	691b      	ldr	r3, [r3, #16]
 80020d4:	061b      	lsls	r3, r3, #24
 80020d6:	4997      	ldr	r1, [pc, #604]	@ (8002334 <HAL_RCC_OscConfig+0x4f8>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	604b      	str	r3, [r1, #4]
 80020dc:	e018      	b.n	8002110 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020de:	4b95      	ldr	r3, [pc, #596]	@ (8002334 <HAL_RCC_OscConfig+0x4f8>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a94      	ldr	r2, [pc, #592]	@ (8002334 <HAL_RCC_OscConfig+0x4f8>)
 80020e4:	f023 0301 	bic.w	r3, r3, #1
 80020e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ea:	f7ff fb0b 	bl	8001704 <HAL_GetTick>
 80020ee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80020f0:	e008      	b.n	8002104 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020f2:	f7ff fb07 	bl	8001704 <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e2ed      	b.n	80026e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002104:	4b8b      	ldr	r3, [pc, #556]	@ (8002334 <HAL_RCC_OscConfig+0x4f8>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0304 	and.w	r3, r3, #4
 800210c:	2b00      	cmp	r3, #0
 800210e:	d1f0      	bne.n	80020f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0310 	and.w	r3, r3, #16
 8002118:	2b00      	cmp	r3, #0
 800211a:	f000 80a9 	beq.w	8002270 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800211e:	4b85      	ldr	r3, [pc, #532]	@ (8002334 <HAL_RCC_OscConfig+0x4f8>)
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002126:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002128:	4b82      	ldr	r3, [pc, #520]	@ (8002334 <HAL_RCC_OscConfig+0x4f8>)
 800212a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800212c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	2b08      	cmp	r3, #8
 8002132:	d007      	beq.n	8002144 <HAL_RCC_OscConfig+0x308>
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	2b18      	cmp	r3, #24
 8002138:	d13a      	bne.n	80021b0 <HAL_RCC_OscConfig+0x374>
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	f003 0303 	and.w	r3, r3, #3
 8002140:	2b01      	cmp	r3, #1
 8002142:	d135      	bne.n	80021b0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002144:	4b7b      	ldr	r3, [pc, #492]	@ (8002334 <HAL_RCC_OscConfig+0x4f8>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800214c:	2b00      	cmp	r3, #0
 800214e:	d005      	beq.n	800215c <HAL_RCC_OscConfig+0x320>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	69db      	ldr	r3, [r3, #28]
 8002154:	2b80      	cmp	r3, #128	@ 0x80
 8002156:	d001      	beq.n	800215c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e2c1      	b.n	80026e0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800215c:	f7ff fb02 	bl	8001764 <HAL_GetREVID>
 8002160:	4603      	mov	r3, r0
 8002162:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002166:	4293      	cmp	r3, r2
 8002168:	d817      	bhi.n	800219a <HAL_RCC_OscConfig+0x35e>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a1b      	ldr	r3, [r3, #32]
 800216e:	2b20      	cmp	r3, #32
 8002170:	d108      	bne.n	8002184 <HAL_RCC_OscConfig+0x348>
 8002172:	4b70      	ldr	r3, [pc, #448]	@ (8002334 <HAL_RCC_OscConfig+0x4f8>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800217a:	4a6e      	ldr	r2, [pc, #440]	@ (8002334 <HAL_RCC_OscConfig+0x4f8>)
 800217c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002180:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002182:	e075      	b.n	8002270 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002184:	4b6b      	ldr	r3, [pc, #428]	@ (8002334 <HAL_RCC_OscConfig+0x4f8>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a1b      	ldr	r3, [r3, #32]
 8002190:	069b      	lsls	r3, r3, #26
 8002192:	4968      	ldr	r1, [pc, #416]	@ (8002334 <HAL_RCC_OscConfig+0x4f8>)
 8002194:	4313      	orrs	r3, r2
 8002196:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002198:	e06a      	b.n	8002270 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800219a:	4b66      	ldr	r3, [pc, #408]	@ (8002334 <HAL_RCC_OscConfig+0x4f8>)
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a1b      	ldr	r3, [r3, #32]
 80021a6:	061b      	lsls	r3, r3, #24
 80021a8:	4962      	ldr	r1, [pc, #392]	@ (8002334 <HAL_RCC_OscConfig+0x4f8>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80021ae:	e05f      	b.n	8002270 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	69db      	ldr	r3, [r3, #28]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d042      	beq.n	800223e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80021b8:	4b5e      	ldr	r3, [pc, #376]	@ (8002334 <HAL_RCC_OscConfig+0x4f8>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a5d      	ldr	r2, [pc, #372]	@ (8002334 <HAL_RCC_OscConfig+0x4f8>)
 80021be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c4:	f7ff fa9e 	bl	8001704 <HAL_GetTick>
 80021c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80021ca:	e008      	b.n	80021de <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80021cc:	f7ff fa9a 	bl	8001704 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e280      	b.n	80026e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80021de:	4b55      	ldr	r3, [pc, #340]	@ (8002334 <HAL_RCC_OscConfig+0x4f8>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d0f0      	beq.n	80021cc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80021ea:	f7ff fabb 	bl	8001764 <HAL_GetREVID>
 80021ee:	4603      	mov	r3, r0
 80021f0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d817      	bhi.n	8002228 <HAL_RCC_OscConfig+0x3ec>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	2b20      	cmp	r3, #32
 80021fe:	d108      	bne.n	8002212 <HAL_RCC_OscConfig+0x3d6>
 8002200:	4b4c      	ldr	r3, [pc, #304]	@ (8002334 <HAL_RCC_OscConfig+0x4f8>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002208:	4a4a      	ldr	r2, [pc, #296]	@ (8002334 <HAL_RCC_OscConfig+0x4f8>)
 800220a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800220e:	6053      	str	r3, [r2, #4]
 8002210:	e02e      	b.n	8002270 <HAL_RCC_OscConfig+0x434>
 8002212:	4b48      	ldr	r3, [pc, #288]	@ (8002334 <HAL_RCC_OscConfig+0x4f8>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a1b      	ldr	r3, [r3, #32]
 800221e:	069b      	lsls	r3, r3, #26
 8002220:	4944      	ldr	r1, [pc, #272]	@ (8002334 <HAL_RCC_OscConfig+0x4f8>)
 8002222:	4313      	orrs	r3, r2
 8002224:	604b      	str	r3, [r1, #4]
 8002226:	e023      	b.n	8002270 <HAL_RCC_OscConfig+0x434>
 8002228:	4b42      	ldr	r3, [pc, #264]	@ (8002334 <HAL_RCC_OscConfig+0x4f8>)
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a1b      	ldr	r3, [r3, #32]
 8002234:	061b      	lsls	r3, r3, #24
 8002236:	493f      	ldr	r1, [pc, #252]	@ (8002334 <HAL_RCC_OscConfig+0x4f8>)
 8002238:	4313      	orrs	r3, r2
 800223a:	60cb      	str	r3, [r1, #12]
 800223c:	e018      	b.n	8002270 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800223e:	4b3d      	ldr	r3, [pc, #244]	@ (8002334 <HAL_RCC_OscConfig+0x4f8>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a3c      	ldr	r2, [pc, #240]	@ (8002334 <HAL_RCC_OscConfig+0x4f8>)
 8002244:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002248:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800224a:	f7ff fa5b 	bl	8001704 <HAL_GetTick>
 800224e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002250:	e008      	b.n	8002264 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002252:	f7ff fa57 	bl	8001704 <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	2b02      	cmp	r3, #2
 800225e:	d901      	bls.n	8002264 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e23d      	b.n	80026e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002264:	4b33      	ldr	r3, [pc, #204]	@ (8002334 <HAL_RCC_OscConfig+0x4f8>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800226c:	2b00      	cmp	r3, #0
 800226e:	d1f0      	bne.n	8002252 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0308 	and.w	r3, r3, #8
 8002278:	2b00      	cmp	r3, #0
 800227a:	d036      	beq.n	80022ea <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	695b      	ldr	r3, [r3, #20]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d019      	beq.n	80022b8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002284:	4b2b      	ldr	r3, [pc, #172]	@ (8002334 <HAL_RCC_OscConfig+0x4f8>)
 8002286:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002288:	4a2a      	ldr	r2, [pc, #168]	@ (8002334 <HAL_RCC_OscConfig+0x4f8>)
 800228a:	f043 0301 	orr.w	r3, r3, #1
 800228e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002290:	f7ff fa38 	bl	8001704 <HAL_GetTick>
 8002294:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002296:	e008      	b.n	80022aa <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002298:	f7ff fa34 	bl	8001704 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e21a      	b.n	80026e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80022aa:	4b22      	ldr	r3, [pc, #136]	@ (8002334 <HAL_RCC_OscConfig+0x4f8>)
 80022ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d0f0      	beq.n	8002298 <HAL_RCC_OscConfig+0x45c>
 80022b6:	e018      	b.n	80022ea <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022b8:	4b1e      	ldr	r3, [pc, #120]	@ (8002334 <HAL_RCC_OscConfig+0x4f8>)
 80022ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022bc:	4a1d      	ldr	r2, [pc, #116]	@ (8002334 <HAL_RCC_OscConfig+0x4f8>)
 80022be:	f023 0301 	bic.w	r3, r3, #1
 80022c2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022c4:	f7ff fa1e 	bl	8001704 <HAL_GetTick>
 80022c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022cc:	f7ff fa1a 	bl	8001704 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e200      	b.n	80026e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80022de:	4b15      	ldr	r3, [pc, #84]	@ (8002334 <HAL_RCC_OscConfig+0x4f8>)
 80022e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1f0      	bne.n	80022cc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0320 	and.w	r3, r3, #32
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d039      	beq.n	800236a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	699b      	ldr	r3, [r3, #24]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d01c      	beq.n	8002338 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80022fe:	4b0d      	ldr	r3, [pc, #52]	@ (8002334 <HAL_RCC_OscConfig+0x4f8>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a0c      	ldr	r2, [pc, #48]	@ (8002334 <HAL_RCC_OscConfig+0x4f8>)
 8002304:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002308:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800230a:	f7ff f9fb 	bl	8001704 <HAL_GetTick>
 800230e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002310:	e008      	b.n	8002324 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002312:	f7ff f9f7 	bl	8001704 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e1dd      	b.n	80026e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002324:	4b03      	ldr	r3, [pc, #12]	@ (8002334 <HAL_RCC_OscConfig+0x4f8>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d0f0      	beq.n	8002312 <HAL_RCC_OscConfig+0x4d6>
 8002330:	e01b      	b.n	800236a <HAL_RCC_OscConfig+0x52e>
 8002332:	bf00      	nop
 8002334:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002338:	4b9b      	ldr	r3, [pc, #620]	@ (80025a8 <HAL_RCC_OscConfig+0x76c>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a9a      	ldr	r2, [pc, #616]	@ (80025a8 <HAL_RCC_OscConfig+0x76c>)
 800233e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002342:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002344:	f7ff f9de 	bl	8001704 <HAL_GetTick>
 8002348:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800234a:	e008      	b.n	800235e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800234c:	f7ff f9da 	bl	8001704 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b02      	cmp	r3, #2
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e1c0      	b.n	80026e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800235e:	4b92      	ldr	r3, [pc, #584]	@ (80025a8 <HAL_RCC_OscConfig+0x76c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d1f0      	bne.n	800234c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0304 	and.w	r3, r3, #4
 8002372:	2b00      	cmp	r3, #0
 8002374:	f000 8081 	beq.w	800247a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002378:	4b8c      	ldr	r3, [pc, #560]	@ (80025ac <HAL_RCC_OscConfig+0x770>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a8b      	ldr	r2, [pc, #556]	@ (80025ac <HAL_RCC_OscConfig+0x770>)
 800237e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002382:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002384:	f7ff f9be 	bl	8001704 <HAL_GetTick>
 8002388:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800238c:	f7ff f9ba 	bl	8001704 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b64      	cmp	r3, #100	@ 0x64
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e1a0      	b.n	80026e0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800239e:	4b83      	ldr	r3, [pc, #524]	@ (80025ac <HAL_RCC_OscConfig+0x770>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d0f0      	beq.n	800238c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d106      	bne.n	80023c0 <HAL_RCC_OscConfig+0x584>
 80023b2:	4b7d      	ldr	r3, [pc, #500]	@ (80025a8 <HAL_RCC_OscConfig+0x76c>)
 80023b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023b6:	4a7c      	ldr	r2, [pc, #496]	@ (80025a8 <HAL_RCC_OscConfig+0x76c>)
 80023b8:	f043 0301 	orr.w	r3, r3, #1
 80023bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80023be:	e02d      	b.n	800241c <HAL_RCC_OscConfig+0x5e0>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d10c      	bne.n	80023e2 <HAL_RCC_OscConfig+0x5a6>
 80023c8:	4b77      	ldr	r3, [pc, #476]	@ (80025a8 <HAL_RCC_OscConfig+0x76c>)
 80023ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023cc:	4a76      	ldr	r2, [pc, #472]	@ (80025a8 <HAL_RCC_OscConfig+0x76c>)
 80023ce:	f023 0301 	bic.w	r3, r3, #1
 80023d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80023d4:	4b74      	ldr	r3, [pc, #464]	@ (80025a8 <HAL_RCC_OscConfig+0x76c>)
 80023d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023d8:	4a73      	ldr	r2, [pc, #460]	@ (80025a8 <HAL_RCC_OscConfig+0x76c>)
 80023da:	f023 0304 	bic.w	r3, r3, #4
 80023de:	6713      	str	r3, [r2, #112]	@ 0x70
 80023e0:	e01c      	b.n	800241c <HAL_RCC_OscConfig+0x5e0>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	2b05      	cmp	r3, #5
 80023e8:	d10c      	bne.n	8002404 <HAL_RCC_OscConfig+0x5c8>
 80023ea:	4b6f      	ldr	r3, [pc, #444]	@ (80025a8 <HAL_RCC_OscConfig+0x76c>)
 80023ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023ee:	4a6e      	ldr	r2, [pc, #440]	@ (80025a8 <HAL_RCC_OscConfig+0x76c>)
 80023f0:	f043 0304 	orr.w	r3, r3, #4
 80023f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80023f6:	4b6c      	ldr	r3, [pc, #432]	@ (80025a8 <HAL_RCC_OscConfig+0x76c>)
 80023f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023fa:	4a6b      	ldr	r2, [pc, #428]	@ (80025a8 <HAL_RCC_OscConfig+0x76c>)
 80023fc:	f043 0301 	orr.w	r3, r3, #1
 8002400:	6713      	str	r3, [r2, #112]	@ 0x70
 8002402:	e00b      	b.n	800241c <HAL_RCC_OscConfig+0x5e0>
 8002404:	4b68      	ldr	r3, [pc, #416]	@ (80025a8 <HAL_RCC_OscConfig+0x76c>)
 8002406:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002408:	4a67      	ldr	r2, [pc, #412]	@ (80025a8 <HAL_RCC_OscConfig+0x76c>)
 800240a:	f023 0301 	bic.w	r3, r3, #1
 800240e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002410:	4b65      	ldr	r3, [pc, #404]	@ (80025a8 <HAL_RCC_OscConfig+0x76c>)
 8002412:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002414:	4a64      	ldr	r2, [pc, #400]	@ (80025a8 <HAL_RCC_OscConfig+0x76c>)
 8002416:	f023 0304 	bic.w	r3, r3, #4
 800241a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d015      	beq.n	8002450 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002424:	f7ff f96e 	bl	8001704 <HAL_GetTick>
 8002428:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800242a:	e00a      	b.n	8002442 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800242c:	f7ff f96a 	bl	8001704 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	f241 3288 	movw	r2, #5000	@ 0x1388
 800243a:	4293      	cmp	r3, r2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e14e      	b.n	80026e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002442:	4b59      	ldr	r3, [pc, #356]	@ (80025a8 <HAL_RCC_OscConfig+0x76c>)
 8002444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d0ee      	beq.n	800242c <HAL_RCC_OscConfig+0x5f0>
 800244e:	e014      	b.n	800247a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002450:	f7ff f958 	bl	8001704 <HAL_GetTick>
 8002454:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002456:	e00a      	b.n	800246e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002458:	f7ff f954 	bl	8001704 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002466:	4293      	cmp	r3, r2
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e138      	b.n	80026e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800246e:	4b4e      	ldr	r3, [pc, #312]	@ (80025a8 <HAL_RCC_OscConfig+0x76c>)
 8002470:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1ee      	bne.n	8002458 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800247e:	2b00      	cmp	r3, #0
 8002480:	f000 812d 	beq.w	80026de <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002484:	4b48      	ldr	r3, [pc, #288]	@ (80025a8 <HAL_RCC_OscConfig+0x76c>)
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800248c:	2b18      	cmp	r3, #24
 800248e:	f000 80bd 	beq.w	800260c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002496:	2b02      	cmp	r3, #2
 8002498:	f040 809e 	bne.w	80025d8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800249c:	4b42      	ldr	r3, [pc, #264]	@ (80025a8 <HAL_RCC_OscConfig+0x76c>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a41      	ldr	r2, [pc, #260]	@ (80025a8 <HAL_RCC_OscConfig+0x76c>)
 80024a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a8:	f7ff f92c 	bl	8001704 <HAL_GetTick>
 80024ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024b0:	f7ff f928 	bl	8001704 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e10e      	b.n	80026e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80024c2:	4b39      	ldr	r3, [pc, #228]	@ (80025a8 <HAL_RCC_OscConfig+0x76c>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1f0      	bne.n	80024b0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024ce:	4b36      	ldr	r3, [pc, #216]	@ (80025a8 <HAL_RCC_OscConfig+0x76c>)
 80024d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80024d2:	4b37      	ldr	r3, [pc, #220]	@ (80025b0 <HAL_RCC_OscConfig+0x774>)
 80024d4:	4013      	ands	r3, r2
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80024de:	0112      	lsls	r2, r2, #4
 80024e0:	430a      	orrs	r2, r1
 80024e2:	4931      	ldr	r1, [pc, #196]	@ (80025a8 <HAL_RCC_OscConfig+0x76c>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	628b      	str	r3, [r1, #40]	@ 0x28
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ec:	3b01      	subs	r3, #1
 80024ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024f6:	3b01      	subs	r3, #1
 80024f8:	025b      	lsls	r3, r3, #9
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	431a      	orrs	r2, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002502:	3b01      	subs	r3, #1
 8002504:	041b      	lsls	r3, r3, #16
 8002506:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800250a:	431a      	orrs	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002510:	3b01      	subs	r3, #1
 8002512:	061b      	lsls	r3, r3, #24
 8002514:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002518:	4923      	ldr	r1, [pc, #140]	@ (80025a8 <HAL_RCC_OscConfig+0x76c>)
 800251a:	4313      	orrs	r3, r2
 800251c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800251e:	4b22      	ldr	r3, [pc, #136]	@ (80025a8 <HAL_RCC_OscConfig+0x76c>)
 8002520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002522:	4a21      	ldr	r2, [pc, #132]	@ (80025a8 <HAL_RCC_OscConfig+0x76c>)
 8002524:	f023 0301 	bic.w	r3, r3, #1
 8002528:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800252a:	4b1f      	ldr	r3, [pc, #124]	@ (80025a8 <HAL_RCC_OscConfig+0x76c>)
 800252c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800252e:	4b21      	ldr	r3, [pc, #132]	@ (80025b4 <HAL_RCC_OscConfig+0x778>)
 8002530:	4013      	ands	r3, r2
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002536:	00d2      	lsls	r2, r2, #3
 8002538:	491b      	ldr	r1, [pc, #108]	@ (80025a8 <HAL_RCC_OscConfig+0x76c>)
 800253a:	4313      	orrs	r3, r2
 800253c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800253e:	4b1a      	ldr	r3, [pc, #104]	@ (80025a8 <HAL_RCC_OscConfig+0x76c>)
 8002540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002542:	f023 020c 	bic.w	r2, r3, #12
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800254a:	4917      	ldr	r1, [pc, #92]	@ (80025a8 <HAL_RCC_OscConfig+0x76c>)
 800254c:	4313      	orrs	r3, r2
 800254e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002550:	4b15      	ldr	r3, [pc, #84]	@ (80025a8 <HAL_RCC_OscConfig+0x76c>)
 8002552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002554:	f023 0202 	bic.w	r2, r3, #2
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800255c:	4912      	ldr	r1, [pc, #72]	@ (80025a8 <HAL_RCC_OscConfig+0x76c>)
 800255e:	4313      	orrs	r3, r2
 8002560:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002562:	4b11      	ldr	r3, [pc, #68]	@ (80025a8 <HAL_RCC_OscConfig+0x76c>)
 8002564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002566:	4a10      	ldr	r2, [pc, #64]	@ (80025a8 <HAL_RCC_OscConfig+0x76c>)
 8002568:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800256c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800256e:	4b0e      	ldr	r3, [pc, #56]	@ (80025a8 <HAL_RCC_OscConfig+0x76c>)
 8002570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002572:	4a0d      	ldr	r2, [pc, #52]	@ (80025a8 <HAL_RCC_OscConfig+0x76c>)
 8002574:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002578:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800257a:	4b0b      	ldr	r3, [pc, #44]	@ (80025a8 <HAL_RCC_OscConfig+0x76c>)
 800257c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800257e:	4a0a      	ldr	r2, [pc, #40]	@ (80025a8 <HAL_RCC_OscConfig+0x76c>)
 8002580:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002584:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002586:	4b08      	ldr	r3, [pc, #32]	@ (80025a8 <HAL_RCC_OscConfig+0x76c>)
 8002588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800258a:	4a07      	ldr	r2, [pc, #28]	@ (80025a8 <HAL_RCC_OscConfig+0x76c>)
 800258c:	f043 0301 	orr.w	r3, r3, #1
 8002590:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002592:	4b05      	ldr	r3, [pc, #20]	@ (80025a8 <HAL_RCC_OscConfig+0x76c>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a04      	ldr	r2, [pc, #16]	@ (80025a8 <HAL_RCC_OscConfig+0x76c>)
 8002598:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800259c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800259e:	f7ff f8b1 	bl	8001704 <HAL_GetTick>
 80025a2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80025a4:	e011      	b.n	80025ca <HAL_RCC_OscConfig+0x78e>
 80025a6:	bf00      	nop
 80025a8:	58024400 	.word	0x58024400
 80025ac:	58024800 	.word	0x58024800
 80025b0:	fffffc0c 	.word	0xfffffc0c
 80025b4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025b8:	f7ff f8a4 	bl	8001704 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e08a      	b.n	80026e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80025ca:	4b47      	ldr	r3, [pc, #284]	@ (80026e8 <HAL_RCC_OscConfig+0x8ac>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d0f0      	beq.n	80025b8 <HAL_RCC_OscConfig+0x77c>
 80025d6:	e082      	b.n	80026de <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025d8:	4b43      	ldr	r3, [pc, #268]	@ (80026e8 <HAL_RCC_OscConfig+0x8ac>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a42      	ldr	r2, [pc, #264]	@ (80026e8 <HAL_RCC_OscConfig+0x8ac>)
 80025de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80025e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e4:	f7ff f88e 	bl	8001704 <HAL_GetTick>
 80025e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ec:	f7ff f88a 	bl	8001704 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e070      	b.n	80026e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80025fe:	4b3a      	ldr	r3, [pc, #232]	@ (80026e8 <HAL_RCC_OscConfig+0x8ac>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d1f0      	bne.n	80025ec <HAL_RCC_OscConfig+0x7b0>
 800260a:	e068      	b.n	80026de <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800260c:	4b36      	ldr	r3, [pc, #216]	@ (80026e8 <HAL_RCC_OscConfig+0x8ac>)
 800260e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002610:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002612:	4b35      	ldr	r3, [pc, #212]	@ (80026e8 <HAL_RCC_OscConfig+0x8ac>)
 8002614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002616:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800261c:	2b01      	cmp	r3, #1
 800261e:	d031      	beq.n	8002684 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	f003 0203 	and.w	r2, r3, #3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800262a:	429a      	cmp	r2, r3
 800262c:	d12a      	bne.n	8002684 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	091b      	lsrs	r3, r3, #4
 8002632:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800263a:	429a      	cmp	r2, r3
 800263c:	d122      	bne.n	8002684 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002648:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800264a:	429a      	cmp	r2, r3
 800264c:	d11a      	bne.n	8002684 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	0a5b      	lsrs	r3, r3, #9
 8002652:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800265a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800265c:	429a      	cmp	r2, r3
 800265e:	d111      	bne.n	8002684 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	0c1b      	lsrs	r3, r3, #16
 8002664:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800266c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800266e:	429a      	cmp	r2, r3
 8002670:	d108      	bne.n	8002684 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	0e1b      	lsrs	r3, r3, #24
 8002676:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800267e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002680:	429a      	cmp	r2, r3
 8002682:	d001      	beq.n	8002688 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e02b      	b.n	80026e0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002688:	4b17      	ldr	r3, [pc, #92]	@ (80026e8 <HAL_RCC_OscConfig+0x8ac>)
 800268a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800268c:	08db      	lsrs	r3, r3, #3
 800268e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002692:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	429a      	cmp	r2, r3
 800269c:	d01f      	beq.n	80026de <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800269e:	4b12      	ldr	r3, [pc, #72]	@ (80026e8 <HAL_RCC_OscConfig+0x8ac>)
 80026a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026a2:	4a11      	ldr	r2, [pc, #68]	@ (80026e8 <HAL_RCC_OscConfig+0x8ac>)
 80026a4:	f023 0301 	bic.w	r3, r3, #1
 80026a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80026aa:	f7ff f82b 	bl	8001704 <HAL_GetTick>
 80026ae:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80026b0:	bf00      	nop
 80026b2:	f7ff f827 	bl	8001704 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d0f9      	beq.n	80026b2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80026be:	4b0a      	ldr	r3, [pc, #40]	@ (80026e8 <HAL_RCC_OscConfig+0x8ac>)
 80026c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026c2:	4b0a      	ldr	r3, [pc, #40]	@ (80026ec <HAL_RCC_OscConfig+0x8b0>)
 80026c4:	4013      	ands	r3, r2
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80026ca:	00d2      	lsls	r2, r2, #3
 80026cc:	4906      	ldr	r1, [pc, #24]	@ (80026e8 <HAL_RCC_OscConfig+0x8ac>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80026d2:	4b05      	ldr	r3, [pc, #20]	@ (80026e8 <HAL_RCC_OscConfig+0x8ac>)
 80026d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026d6:	4a04      	ldr	r2, [pc, #16]	@ (80026e8 <HAL_RCC_OscConfig+0x8ac>)
 80026d8:	f043 0301 	orr.w	r3, r3, #1
 80026dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80026de:	2300      	movs	r3, #0
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3730      	adds	r7, #48	@ 0x30
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	58024400 	.word	0x58024400
 80026ec:	ffff0007 	.word	0xffff0007

080026f0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d101      	bne.n	8002704 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e19c      	b.n	8002a3e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002704:	4b8a      	ldr	r3, [pc, #552]	@ (8002930 <HAL_RCC_ClockConfig+0x240>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 030f 	and.w	r3, r3, #15
 800270c:	683a      	ldr	r2, [r7, #0]
 800270e:	429a      	cmp	r2, r3
 8002710:	d910      	bls.n	8002734 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002712:	4b87      	ldr	r3, [pc, #540]	@ (8002930 <HAL_RCC_ClockConfig+0x240>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f023 020f 	bic.w	r2, r3, #15
 800271a:	4985      	ldr	r1, [pc, #532]	@ (8002930 <HAL_RCC_ClockConfig+0x240>)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	4313      	orrs	r3, r2
 8002720:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002722:	4b83      	ldr	r3, [pc, #524]	@ (8002930 <HAL_RCC_ClockConfig+0x240>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 030f 	and.w	r3, r3, #15
 800272a:	683a      	ldr	r2, [r7, #0]
 800272c:	429a      	cmp	r2, r3
 800272e:	d001      	beq.n	8002734 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e184      	b.n	8002a3e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0304 	and.w	r3, r3, #4
 800273c:	2b00      	cmp	r3, #0
 800273e:	d010      	beq.n	8002762 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	691a      	ldr	r2, [r3, #16]
 8002744:	4b7b      	ldr	r3, [pc, #492]	@ (8002934 <HAL_RCC_ClockConfig+0x244>)
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800274c:	429a      	cmp	r2, r3
 800274e:	d908      	bls.n	8002762 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002750:	4b78      	ldr	r3, [pc, #480]	@ (8002934 <HAL_RCC_ClockConfig+0x244>)
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	691b      	ldr	r3, [r3, #16]
 800275c:	4975      	ldr	r1, [pc, #468]	@ (8002934 <HAL_RCC_ClockConfig+0x244>)
 800275e:	4313      	orrs	r3, r2
 8002760:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0308 	and.w	r3, r3, #8
 800276a:	2b00      	cmp	r3, #0
 800276c:	d010      	beq.n	8002790 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	695a      	ldr	r2, [r3, #20]
 8002772:	4b70      	ldr	r3, [pc, #448]	@ (8002934 <HAL_RCC_ClockConfig+0x244>)
 8002774:	69db      	ldr	r3, [r3, #28]
 8002776:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800277a:	429a      	cmp	r2, r3
 800277c:	d908      	bls.n	8002790 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800277e:	4b6d      	ldr	r3, [pc, #436]	@ (8002934 <HAL_RCC_ClockConfig+0x244>)
 8002780:	69db      	ldr	r3, [r3, #28]
 8002782:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	496a      	ldr	r1, [pc, #424]	@ (8002934 <HAL_RCC_ClockConfig+0x244>)
 800278c:	4313      	orrs	r3, r2
 800278e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0310 	and.w	r3, r3, #16
 8002798:	2b00      	cmp	r3, #0
 800279a:	d010      	beq.n	80027be <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	699a      	ldr	r2, [r3, #24]
 80027a0:	4b64      	ldr	r3, [pc, #400]	@ (8002934 <HAL_RCC_ClockConfig+0x244>)
 80027a2:	69db      	ldr	r3, [r3, #28]
 80027a4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d908      	bls.n	80027be <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80027ac:	4b61      	ldr	r3, [pc, #388]	@ (8002934 <HAL_RCC_ClockConfig+0x244>)
 80027ae:	69db      	ldr	r3, [r3, #28]
 80027b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	495e      	ldr	r1, [pc, #376]	@ (8002934 <HAL_RCC_ClockConfig+0x244>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0320 	and.w	r3, r3, #32
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d010      	beq.n	80027ec <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	69da      	ldr	r2, [r3, #28]
 80027ce:	4b59      	ldr	r3, [pc, #356]	@ (8002934 <HAL_RCC_ClockConfig+0x244>)
 80027d0:	6a1b      	ldr	r3, [r3, #32]
 80027d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d908      	bls.n	80027ec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80027da:	4b56      	ldr	r3, [pc, #344]	@ (8002934 <HAL_RCC_ClockConfig+0x244>)
 80027dc:	6a1b      	ldr	r3, [r3, #32]
 80027de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	69db      	ldr	r3, [r3, #28]
 80027e6:	4953      	ldr	r1, [pc, #332]	@ (8002934 <HAL_RCC_ClockConfig+0x244>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d010      	beq.n	800281a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	68da      	ldr	r2, [r3, #12]
 80027fc:	4b4d      	ldr	r3, [pc, #308]	@ (8002934 <HAL_RCC_ClockConfig+0x244>)
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	f003 030f 	and.w	r3, r3, #15
 8002804:	429a      	cmp	r2, r3
 8002806:	d908      	bls.n	800281a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002808:	4b4a      	ldr	r3, [pc, #296]	@ (8002934 <HAL_RCC_ClockConfig+0x244>)
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	f023 020f 	bic.w	r2, r3, #15
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	4947      	ldr	r1, [pc, #284]	@ (8002934 <HAL_RCC_ClockConfig+0x244>)
 8002816:	4313      	orrs	r3, r2
 8002818:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	2b00      	cmp	r3, #0
 8002824:	d055      	beq.n	80028d2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002826:	4b43      	ldr	r3, [pc, #268]	@ (8002934 <HAL_RCC_ClockConfig+0x244>)
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	4940      	ldr	r1, [pc, #256]	@ (8002934 <HAL_RCC_ClockConfig+0x244>)
 8002834:	4313      	orrs	r3, r2
 8002836:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	2b02      	cmp	r3, #2
 800283e:	d107      	bne.n	8002850 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002840:	4b3c      	ldr	r3, [pc, #240]	@ (8002934 <HAL_RCC_ClockConfig+0x244>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d121      	bne.n	8002890 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e0f6      	b.n	8002a3e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	2b03      	cmp	r3, #3
 8002856:	d107      	bne.n	8002868 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002858:	4b36      	ldr	r3, [pc, #216]	@ (8002934 <HAL_RCC_ClockConfig+0x244>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d115      	bne.n	8002890 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e0ea      	b.n	8002a3e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	2b01      	cmp	r3, #1
 800286e:	d107      	bne.n	8002880 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002870:	4b30      	ldr	r3, [pc, #192]	@ (8002934 <HAL_RCC_ClockConfig+0x244>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002878:	2b00      	cmp	r3, #0
 800287a:	d109      	bne.n	8002890 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e0de      	b.n	8002a3e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002880:	4b2c      	ldr	r3, [pc, #176]	@ (8002934 <HAL_RCC_ClockConfig+0x244>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0304 	and.w	r3, r3, #4
 8002888:	2b00      	cmp	r3, #0
 800288a:	d101      	bne.n	8002890 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e0d6      	b.n	8002a3e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002890:	4b28      	ldr	r3, [pc, #160]	@ (8002934 <HAL_RCC_ClockConfig+0x244>)
 8002892:	691b      	ldr	r3, [r3, #16]
 8002894:	f023 0207 	bic.w	r2, r3, #7
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	4925      	ldr	r1, [pc, #148]	@ (8002934 <HAL_RCC_ClockConfig+0x244>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028a2:	f7fe ff2f 	bl	8001704 <HAL_GetTick>
 80028a6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028a8:	e00a      	b.n	80028c0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028aa:	f7fe ff2b 	bl	8001704 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d901      	bls.n	80028c0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e0be      	b.n	8002a3e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028c0:	4b1c      	ldr	r3, [pc, #112]	@ (8002934 <HAL_RCC_ClockConfig+0x244>)
 80028c2:	691b      	ldr	r3, [r3, #16]
 80028c4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	00db      	lsls	r3, r3, #3
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d1eb      	bne.n	80028aa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d010      	beq.n	8002900 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	68da      	ldr	r2, [r3, #12]
 80028e2:	4b14      	ldr	r3, [pc, #80]	@ (8002934 <HAL_RCC_ClockConfig+0x244>)
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	f003 030f 	and.w	r3, r3, #15
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d208      	bcs.n	8002900 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028ee:	4b11      	ldr	r3, [pc, #68]	@ (8002934 <HAL_RCC_ClockConfig+0x244>)
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	f023 020f 	bic.w	r2, r3, #15
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	490e      	ldr	r1, [pc, #56]	@ (8002934 <HAL_RCC_ClockConfig+0x244>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002900:	4b0b      	ldr	r3, [pc, #44]	@ (8002930 <HAL_RCC_ClockConfig+0x240>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 030f 	and.w	r3, r3, #15
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	429a      	cmp	r2, r3
 800290c:	d214      	bcs.n	8002938 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800290e:	4b08      	ldr	r3, [pc, #32]	@ (8002930 <HAL_RCC_ClockConfig+0x240>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f023 020f 	bic.w	r2, r3, #15
 8002916:	4906      	ldr	r1, [pc, #24]	@ (8002930 <HAL_RCC_ClockConfig+0x240>)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	4313      	orrs	r3, r2
 800291c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800291e:	4b04      	ldr	r3, [pc, #16]	@ (8002930 <HAL_RCC_ClockConfig+0x240>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 030f 	and.w	r3, r3, #15
 8002926:	683a      	ldr	r2, [r7, #0]
 8002928:	429a      	cmp	r2, r3
 800292a:	d005      	beq.n	8002938 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e086      	b.n	8002a3e <HAL_RCC_ClockConfig+0x34e>
 8002930:	52002000 	.word	0x52002000
 8002934:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0304 	and.w	r3, r3, #4
 8002940:	2b00      	cmp	r3, #0
 8002942:	d010      	beq.n	8002966 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	691a      	ldr	r2, [r3, #16]
 8002948:	4b3f      	ldr	r3, [pc, #252]	@ (8002a48 <HAL_RCC_ClockConfig+0x358>)
 800294a:	699b      	ldr	r3, [r3, #24]
 800294c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002950:	429a      	cmp	r2, r3
 8002952:	d208      	bcs.n	8002966 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002954:	4b3c      	ldr	r3, [pc, #240]	@ (8002a48 <HAL_RCC_ClockConfig+0x358>)
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	691b      	ldr	r3, [r3, #16]
 8002960:	4939      	ldr	r1, [pc, #228]	@ (8002a48 <HAL_RCC_ClockConfig+0x358>)
 8002962:	4313      	orrs	r3, r2
 8002964:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0308 	and.w	r3, r3, #8
 800296e:	2b00      	cmp	r3, #0
 8002970:	d010      	beq.n	8002994 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	695a      	ldr	r2, [r3, #20]
 8002976:	4b34      	ldr	r3, [pc, #208]	@ (8002a48 <HAL_RCC_ClockConfig+0x358>)
 8002978:	69db      	ldr	r3, [r3, #28]
 800297a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800297e:	429a      	cmp	r2, r3
 8002980:	d208      	bcs.n	8002994 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002982:	4b31      	ldr	r3, [pc, #196]	@ (8002a48 <HAL_RCC_ClockConfig+0x358>)
 8002984:	69db      	ldr	r3, [r3, #28]
 8002986:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	492e      	ldr	r1, [pc, #184]	@ (8002a48 <HAL_RCC_ClockConfig+0x358>)
 8002990:	4313      	orrs	r3, r2
 8002992:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0310 	and.w	r3, r3, #16
 800299c:	2b00      	cmp	r3, #0
 800299e:	d010      	beq.n	80029c2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	699a      	ldr	r2, [r3, #24]
 80029a4:	4b28      	ldr	r3, [pc, #160]	@ (8002a48 <HAL_RCC_ClockConfig+0x358>)
 80029a6:	69db      	ldr	r3, [r3, #28]
 80029a8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d208      	bcs.n	80029c2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80029b0:	4b25      	ldr	r3, [pc, #148]	@ (8002a48 <HAL_RCC_ClockConfig+0x358>)
 80029b2:	69db      	ldr	r3, [r3, #28]
 80029b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	4922      	ldr	r1, [pc, #136]	@ (8002a48 <HAL_RCC_ClockConfig+0x358>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0320 	and.w	r3, r3, #32
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d010      	beq.n	80029f0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	69da      	ldr	r2, [r3, #28]
 80029d2:	4b1d      	ldr	r3, [pc, #116]	@ (8002a48 <HAL_RCC_ClockConfig+0x358>)
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80029da:	429a      	cmp	r2, r3
 80029dc:	d208      	bcs.n	80029f0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80029de:	4b1a      	ldr	r3, [pc, #104]	@ (8002a48 <HAL_RCC_ClockConfig+0x358>)
 80029e0:	6a1b      	ldr	r3, [r3, #32]
 80029e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	4917      	ldr	r1, [pc, #92]	@ (8002a48 <HAL_RCC_ClockConfig+0x358>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80029f0:	f000 f834 	bl	8002a5c <HAL_RCC_GetSysClockFreq>
 80029f4:	4602      	mov	r2, r0
 80029f6:	4b14      	ldr	r3, [pc, #80]	@ (8002a48 <HAL_RCC_ClockConfig+0x358>)
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	0a1b      	lsrs	r3, r3, #8
 80029fc:	f003 030f 	and.w	r3, r3, #15
 8002a00:	4912      	ldr	r1, [pc, #72]	@ (8002a4c <HAL_RCC_ClockConfig+0x35c>)
 8002a02:	5ccb      	ldrb	r3, [r1, r3]
 8002a04:	f003 031f 	and.w	r3, r3, #31
 8002a08:	fa22 f303 	lsr.w	r3, r2, r3
 8002a0c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8002a48 <HAL_RCC_ClockConfig+0x358>)
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	f003 030f 	and.w	r3, r3, #15
 8002a16:	4a0d      	ldr	r2, [pc, #52]	@ (8002a4c <HAL_RCC_ClockConfig+0x35c>)
 8002a18:	5cd3      	ldrb	r3, [r2, r3]
 8002a1a:	f003 031f 	and.w	r3, r3, #31
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	fa22 f303 	lsr.w	r3, r2, r3
 8002a24:	4a0a      	ldr	r2, [pc, #40]	@ (8002a50 <HAL_RCC_ClockConfig+0x360>)
 8002a26:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002a28:	4a0a      	ldr	r2, [pc, #40]	@ (8002a54 <HAL_RCC_ClockConfig+0x364>)
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002a2e:	4b0a      	ldr	r3, [pc, #40]	@ (8002a58 <HAL_RCC_ClockConfig+0x368>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7fe fe1c 	bl	8001670 <HAL_InitTick>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3718      	adds	r7, #24
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	58024400 	.word	0x58024400
 8002a4c:	08007408 	.word	0x08007408
 8002a50:	24000004 	.word	0x24000004
 8002a54:	24000000 	.word	0x24000000
 8002a58:	24000008 	.word	0x24000008

08002a5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b089      	sub	sp, #36	@ 0x24
 8002a60:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a62:	4bb3      	ldr	r3, [pc, #716]	@ (8002d30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a6a:	2b18      	cmp	r3, #24
 8002a6c:	f200 8155 	bhi.w	8002d1a <HAL_RCC_GetSysClockFreq+0x2be>
 8002a70:	a201      	add	r2, pc, #4	@ (adr r2, 8002a78 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a76:	bf00      	nop
 8002a78:	08002add 	.word	0x08002add
 8002a7c:	08002d1b 	.word	0x08002d1b
 8002a80:	08002d1b 	.word	0x08002d1b
 8002a84:	08002d1b 	.word	0x08002d1b
 8002a88:	08002d1b 	.word	0x08002d1b
 8002a8c:	08002d1b 	.word	0x08002d1b
 8002a90:	08002d1b 	.word	0x08002d1b
 8002a94:	08002d1b 	.word	0x08002d1b
 8002a98:	08002b03 	.word	0x08002b03
 8002a9c:	08002d1b 	.word	0x08002d1b
 8002aa0:	08002d1b 	.word	0x08002d1b
 8002aa4:	08002d1b 	.word	0x08002d1b
 8002aa8:	08002d1b 	.word	0x08002d1b
 8002aac:	08002d1b 	.word	0x08002d1b
 8002ab0:	08002d1b 	.word	0x08002d1b
 8002ab4:	08002d1b 	.word	0x08002d1b
 8002ab8:	08002b09 	.word	0x08002b09
 8002abc:	08002d1b 	.word	0x08002d1b
 8002ac0:	08002d1b 	.word	0x08002d1b
 8002ac4:	08002d1b 	.word	0x08002d1b
 8002ac8:	08002d1b 	.word	0x08002d1b
 8002acc:	08002d1b 	.word	0x08002d1b
 8002ad0:	08002d1b 	.word	0x08002d1b
 8002ad4:	08002d1b 	.word	0x08002d1b
 8002ad8:	08002b0f 	.word	0x08002b0f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002adc:	4b94      	ldr	r3, [pc, #592]	@ (8002d30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0320 	and.w	r3, r3, #32
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d009      	beq.n	8002afc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002ae8:	4b91      	ldr	r3, [pc, #580]	@ (8002d30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	08db      	lsrs	r3, r3, #3
 8002aee:	f003 0303 	and.w	r3, r3, #3
 8002af2:	4a90      	ldr	r2, [pc, #576]	@ (8002d34 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002af4:	fa22 f303 	lsr.w	r3, r2, r3
 8002af8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002afa:	e111      	b.n	8002d20 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002afc:	4b8d      	ldr	r3, [pc, #564]	@ (8002d34 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002afe:	61bb      	str	r3, [r7, #24]
      break;
 8002b00:	e10e      	b.n	8002d20 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002b02:	4b8d      	ldr	r3, [pc, #564]	@ (8002d38 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002b04:	61bb      	str	r3, [r7, #24]
      break;
 8002b06:	e10b      	b.n	8002d20 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002b08:	4b8c      	ldr	r3, [pc, #560]	@ (8002d3c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002b0a:	61bb      	str	r3, [r7, #24]
      break;
 8002b0c:	e108      	b.n	8002d20 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002b0e:	4b88      	ldr	r3, [pc, #544]	@ (8002d30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b12:	f003 0303 	and.w	r3, r3, #3
 8002b16:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002b18:	4b85      	ldr	r3, [pc, #532]	@ (8002d30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b1c:	091b      	lsrs	r3, r3, #4
 8002b1e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b22:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002b24:	4b82      	ldr	r3, [pc, #520]	@ (8002d30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b28:	f003 0301 	and.w	r3, r3, #1
 8002b2c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002b2e:	4b80      	ldr	r3, [pc, #512]	@ (8002d30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b32:	08db      	lsrs	r3, r3, #3
 8002b34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	fb02 f303 	mul.w	r3, r2, r3
 8002b3e:	ee07 3a90 	vmov	s15, r3
 8002b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b46:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	f000 80e1 	beq.w	8002d14 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	f000 8083 	beq.w	8002c60 <HAL_RCC_GetSysClockFreq+0x204>
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	f200 80a1 	bhi.w	8002ca4 <HAL_RCC_GetSysClockFreq+0x248>
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d003      	beq.n	8002b70 <HAL_RCC_GetSysClockFreq+0x114>
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d056      	beq.n	8002c1c <HAL_RCC_GetSysClockFreq+0x1c0>
 8002b6e:	e099      	b.n	8002ca4 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002b70:	4b6f      	ldr	r3, [pc, #444]	@ (8002d30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0320 	and.w	r3, r3, #32
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d02d      	beq.n	8002bd8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002b7c:	4b6c      	ldr	r3, [pc, #432]	@ (8002d30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	08db      	lsrs	r3, r3, #3
 8002b82:	f003 0303 	and.w	r3, r3, #3
 8002b86:	4a6b      	ldr	r2, [pc, #428]	@ (8002d34 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002b88:	fa22 f303 	lsr.w	r3, r2, r3
 8002b8c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	ee07 3a90 	vmov	s15, r3
 8002b94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	ee07 3a90 	vmov	s15, r3
 8002b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ba2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ba6:	4b62      	ldr	r3, [pc, #392]	@ (8002d30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bae:	ee07 3a90 	vmov	s15, r3
 8002bb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bb6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002bba:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002d40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002bbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002bc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002bc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002bca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bd2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002bd6:	e087      	b.n	8002ce8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	ee07 3a90 	vmov	s15, r3
 8002bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002be2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002d44 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002be6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002bea:	4b51      	ldr	r3, [pc, #324]	@ (8002d30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bf2:	ee07 3a90 	vmov	s15, r3
 8002bf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bfa:	ed97 6a02 	vldr	s12, [r7, #8]
 8002bfe:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002d40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002c02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c16:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002c1a:	e065      	b.n	8002ce8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	ee07 3a90 	vmov	s15, r3
 8002c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c26:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002d48 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002c2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c2e:	4b40      	ldr	r3, [pc, #256]	@ (8002d30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c36:	ee07 3a90 	vmov	s15, r3
 8002c3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c42:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002d40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002c46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c5a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002c5e:	e043      	b.n	8002ce8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	ee07 3a90 	vmov	s15, r3
 8002c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c6a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002d4c <HAL_RCC_GetSysClockFreq+0x2f0>
 8002c6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c72:	4b2f      	ldr	r3, [pc, #188]	@ (8002d30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c7a:	ee07 3a90 	vmov	s15, r3
 8002c7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c82:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c86:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002d40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002c8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c9e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002ca2:	e021      	b.n	8002ce8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	ee07 3a90 	vmov	s15, r3
 8002caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cae:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002d48 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002cb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cb6:	4b1e      	ldr	r3, [pc, #120]	@ (8002d30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cbe:	ee07 3a90 	vmov	s15, r3
 8002cc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002cca:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002d40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002cce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002cd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002cd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002cda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002cde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ce2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002ce6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002ce8:	4b11      	ldr	r3, [pc, #68]	@ (8002d30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cec:	0a5b      	lsrs	r3, r3, #9
 8002cee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	ee07 3a90 	vmov	s15, r3
 8002cfc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d00:	edd7 6a07 	vldr	s13, [r7, #28]
 8002d04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d0c:	ee17 3a90 	vmov	r3, s15
 8002d10:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002d12:	e005      	b.n	8002d20 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002d14:	2300      	movs	r3, #0
 8002d16:	61bb      	str	r3, [r7, #24]
      break;
 8002d18:	e002      	b.n	8002d20 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002d1a:	4b07      	ldr	r3, [pc, #28]	@ (8002d38 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002d1c:	61bb      	str	r3, [r7, #24]
      break;
 8002d1e:	bf00      	nop
  }

  return sysclockfreq;
 8002d20:	69bb      	ldr	r3, [r7, #24]
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3724      	adds	r7, #36	@ 0x24
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	58024400 	.word	0x58024400
 8002d34:	03d09000 	.word	0x03d09000
 8002d38:	003d0900 	.word	0x003d0900
 8002d3c:	017d7840 	.word	0x017d7840
 8002d40:	46000000 	.word	0x46000000
 8002d44:	4c742400 	.word	0x4c742400
 8002d48:	4a742400 	.word	0x4a742400
 8002d4c:	4bbebc20 	.word	0x4bbebc20

08002d50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002d56:	f7ff fe81 	bl	8002a5c <HAL_RCC_GetSysClockFreq>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	4b10      	ldr	r3, [pc, #64]	@ (8002da0 <HAL_RCC_GetHCLKFreq+0x50>)
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	0a1b      	lsrs	r3, r3, #8
 8002d62:	f003 030f 	and.w	r3, r3, #15
 8002d66:	490f      	ldr	r1, [pc, #60]	@ (8002da4 <HAL_RCC_GetHCLKFreq+0x54>)
 8002d68:	5ccb      	ldrb	r3, [r1, r3]
 8002d6a:	f003 031f 	and.w	r3, r3, #31
 8002d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d72:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002d74:	4b0a      	ldr	r3, [pc, #40]	@ (8002da0 <HAL_RCC_GetHCLKFreq+0x50>)
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	f003 030f 	and.w	r3, r3, #15
 8002d7c:	4a09      	ldr	r2, [pc, #36]	@ (8002da4 <HAL_RCC_GetHCLKFreq+0x54>)
 8002d7e:	5cd3      	ldrb	r3, [r2, r3]
 8002d80:	f003 031f 	and.w	r3, r3, #31
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	fa22 f303 	lsr.w	r3, r2, r3
 8002d8a:	4a07      	ldr	r2, [pc, #28]	@ (8002da8 <HAL_RCC_GetHCLKFreq+0x58>)
 8002d8c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002d8e:	4a07      	ldr	r2, [pc, #28]	@ (8002dac <HAL_RCC_GetHCLKFreq+0x5c>)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002d94:	4b04      	ldr	r3, [pc, #16]	@ (8002da8 <HAL_RCC_GetHCLKFreq+0x58>)
 8002d96:	681b      	ldr	r3, [r3, #0]
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3708      	adds	r7, #8
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	58024400 	.word	0x58024400
 8002da4:	08007408 	.word	0x08007408
 8002da8:	24000004 	.word	0x24000004
 8002dac:	24000000 	.word	0x24000000

08002db0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002db4:	f7ff ffcc 	bl	8002d50 <HAL_RCC_GetHCLKFreq>
 8002db8:	4602      	mov	r2, r0
 8002dba:	4b06      	ldr	r3, [pc, #24]	@ (8002dd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dbc:	69db      	ldr	r3, [r3, #28]
 8002dbe:	091b      	lsrs	r3, r3, #4
 8002dc0:	f003 0307 	and.w	r3, r3, #7
 8002dc4:	4904      	ldr	r1, [pc, #16]	@ (8002dd8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002dc6:	5ccb      	ldrb	r3, [r1, r3]
 8002dc8:	f003 031f 	and.w	r3, r3, #31
 8002dcc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	58024400 	.word	0x58024400
 8002dd8:	08007408 	.word	0x08007408

08002ddc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002de0:	f7ff ffb6 	bl	8002d50 <HAL_RCC_GetHCLKFreq>
 8002de4:	4602      	mov	r2, r0
 8002de6:	4b06      	ldr	r3, [pc, #24]	@ (8002e00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002de8:	69db      	ldr	r3, [r3, #28]
 8002dea:	0a1b      	lsrs	r3, r3, #8
 8002dec:	f003 0307 	and.w	r3, r3, #7
 8002df0:	4904      	ldr	r1, [pc, #16]	@ (8002e04 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002df2:	5ccb      	ldrb	r3, [r1, r3]
 8002df4:	f003 031f 	and.w	r3, r3, #31
 8002df8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	58024400 	.word	0x58024400
 8002e04:	08007408 	.word	0x08007408

08002e08 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e0c:	b0ca      	sub	sp, #296	@ 0x128
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e14:	2300      	movs	r3, #0
 8002e16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e28:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002e2c:	2500      	movs	r5, #0
 8002e2e:	ea54 0305 	orrs.w	r3, r4, r5
 8002e32:	d049      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002e34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e38:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e3a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002e3e:	d02f      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002e40:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002e44:	d828      	bhi.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002e46:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002e4a:	d01a      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002e4c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002e50:	d822      	bhi.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d003      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002e56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e5a:	d007      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002e5c:	e01c      	b.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e5e:	4bb8      	ldr	r3, [pc, #736]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e62:	4ab7      	ldr	r2, [pc, #732]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002e6a:	e01a      	b.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e70:	3308      	adds	r3, #8
 8002e72:	2102      	movs	r1, #2
 8002e74:	4618      	mov	r0, r3
 8002e76:	f001 fc8f 	bl	8004798 <RCCEx_PLL2_Config>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002e80:	e00f      	b.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e86:	3328      	adds	r3, #40	@ 0x28
 8002e88:	2102      	movs	r1, #2
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f001 fd36 	bl	80048fc <RCCEx_PLL3_Config>
 8002e90:	4603      	mov	r3, r0
 8002e92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002e96:	e004      	b.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002e9e:	e000      	b.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002ea0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ea2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d10a      	bne.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002eaa:	4ba5      	ldr	r3, [pc, #660]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002eac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002eae:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002eb6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002eb8:	4aa1      	ldr	r2, [pc, #644]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002eba:	430b      	orrs	r3, r1
 8002ebc:	6513      	str	r3, [r2, #80]	@ 0x50
 8002ebe:	e003      	b.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ec0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ec4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002ec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002ed4:	f04f 0900 	mov.w	r9, #0
 8002ed8:	ea58 0309 	orrs.w	r3, r8, r9
 8002edc:	d047      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ee2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ee4:	2b04      	cmp	r3, #4
 8002ee6:	d82a      	bhi.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002ee8:	a201      	add	r2, pc, #4	@ (adr r2, 8002ef0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eee:	bf00      	nop
 8002ef0:	08002f05 	.word	0x08002f05
 8002ef4:	08002f13 	.word	0x08002f13
 8002ef8:	08002f29 	.word	0x08002f29
 8002efc:	08002f47 	.word	0x08002f47
 8002f00:	08002f47 	.word	0x08002f47
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f04:	4b8e      	ldr	r3, [pc, #568]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f08:	4a8d      	ldr	r2, [pc, #564]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002f10:	e01a      	b.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f16:	3308      	adds	r3, #8
 8002f18:	2100      	movs	r1, #0
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f001 fc3c 	bl	8004798 <RCCEx_PLL2_Config>
 8002f20:	4603      	mov	r3, r0
 8002f22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002f26:	e00f      	b.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f2c:	3328      	adds	r3, #40	@ 0x28
 8002f2e:	2100      	movs	r1, #0
 8002f30:	4618      	mov	r0, r3
 8002f32:	f001 fce3 	bl	80048fc <RCCEx_PLL3_Config>
 8002f36:	4603      	mov	r3, r0
 8002f38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002f3c:	e004      	b.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002f44:	e000      	b.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002f46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d10a      	bne.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f50:	4b7b      	ldr	r3, [pc, #492]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f54:	f023 0107 	bic.w	r1, r3, #7
 8002f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f5e:	4a78      	ldr	r2, [pc, #480]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f60:	430b      	orrs	r3, r1
 8002f62:	6513      	str	r3, [r2, #80]	@ 0x50
 8002f64:	e003      	b.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f76:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8002f7a:	f04f 0b00 	mov.w	fp, #0
 8002f7e:	ea5a 030b 	orrs.w	r3, sl, fp
 8002f82:	d04c      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f8e:	d030      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002f90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f94:	d829      	bhi.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002f96:	2bc0      	cmp	r3, #192	@ 0xc0
 8002f98:	d02d      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002f9a:	2bc0      	cmp	r3, #192	@ 0xc0
 8002f9c:	d825      	bhi.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002f9e:	2b80      	cmp	r3, #128	@ 0x80
 8002fa0:	d018      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002fa2:	2b80      	cmp	r3, #128	@ 0x80
 8002fa4:	d821      	bhi.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d002      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002faa:	2b40      	cmp	r3, #64	@ 0x40
 8002fac:	d007      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002fae:	e01c      	b.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fb0:	4b63      	ldr	r3, [pc, #396]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fb4:	4a62      	ldr	r2, [pc, #392]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002fb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002fbc:	e01c      	b.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fc2:	3308      	adds	r3, #8
 8002fc4:	2100      	movs	r1, #0
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f001 fbe6 	bl	8004798 <RCCEx_PLL2_Config>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002fd2:	e011      	b.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002fd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fd8:	3328      	adds	r3, #40	@ 0x28
 8002fda:	2100      	movs	r1, #0
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f001 fc8d 	bl	80048fc <RCCEx_PLL3_Config>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002fe8:	e006      	b.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002ff0:	e002      	b.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002ff2:	bf00      	nop
 8002ff4:	e000      	b.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002ff6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ff8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d10a      	bne.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003000:	4b4f      	ldr	r3, [pc, #316]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003002:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003004:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003008:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800300c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800300e:	4a4c      	ldr	r2, [pc, #304]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003010:	430b      	orrs	r3, r1
 8003012:	6513      	str	r3, [r2, #80]	@ 0x50
 8003014:	e003      	b.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003016:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800301a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800301e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003026:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800302a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800302e:	2300      	movs	r3, #0
 8003030:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003034:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003038:	460b      	mov	r3, r1
 800303a:	4313      	orrs	r3, r2
 800303c:	d053      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800303e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003042:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003046:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800304a:	d035      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800304c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003050:	d82e      	bhi.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003052:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003056:	d031      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003058:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800305c:	d828      	bhi.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800305e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003062:	d01a      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003064:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003068:	d822      	bhi.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800306a:	2b00      	cmp	r3, #0
 800306c:	d003      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800306e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003072:	d007      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003074:	e01c      	b.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003076:	4b32      	ldr	r3, [pc, #200]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800307a:	4a31      	ldr	r2, [pc, #196]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800307c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003080:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003082:	e01c      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003084:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003088:	3308      	adds	r3, #8
 800308a:	2100      	movs	r1, #0
 800308c:	4618      	mov	r0, r3
 800308e:	f001 fb83 	bl	8004798 <RCCEx_PLL2_Config>
 8003092:	4603      	mov	r3, r0
 8003094:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003098:	e011      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800309a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800309e:	3328      	adds	r3, #40	@ 0x28
 80030a0:	2100      	movs	r1, #0
 80030a2:	4618      	mov	r0, r3
 80030a4:	f001 fc2a 	bl	80048fc <RCCEx_PLL3_Config>
 80030a8:	4603      	mov	r3, r0
 80030aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80030ae:	e006      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80030b6:	e002      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80030b8:	bf00      	nop
 80030ba:	e000      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80030bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d10b      	bne.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80030c6:	4b1e      	ldr	r3, [pc, #120]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80030c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ca:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80030ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80030d6:	4a1a      	ldr	r2, [pc, #104]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80030d8:	430b      	orrs	r3, r1
 80030da:	6593      	str	r3, [r2, #88]	@ 0x58
 80030dc:	e003      	b.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80030e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ee:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80030f2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80030f6:	2300      	movs	r3, #0
 80030f8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80030fc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003100:	460b      	mov	r3, r1
 8003102:	4313      	orrs	r3, r2
 8003104:	d056      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003106:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800310a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800310e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003112:	d038      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003114:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003118:	d831      	bhi.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800311a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800311e:	d034      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003120:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003124:	d82b      	bhi.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003126:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800312a:	d01d      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800312c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003130:	d825      	bhi.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003132:	2b00      	cmp	r3, #0
 8003134:	d006      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003136:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800313a:	d00a      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800313c:	e01f      	b.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800313e:	bf00      	nop
 8003140:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003144:	4ba2      	ldr	r3, [pc, #648]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003148:	4aa1      	ldr	r2, [pc, #644]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800314a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800314e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003150:	e01c      	b.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003152:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003156:	3308      	adds	r3, #8
 8003158:	2100      	movs	r1, #0
 800315a:	4618      	mov	r0, r3
 800315c:	f001 fb1c 	bl	8004798 <RCCEx_PLL2_Config>
 8003160:	4603      	mov	r3, r0
 8003162:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003166:	e011      	b.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003168:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800316c:	3328      	adds	r3, #40	@ 0x28
 800316e:	2100      	movs	r1, #0
 8003170:	4618      	mov	r0, r3
 8003172:	f001 fbc3 	bl	80048fc <RCCEx_PLL3_Config>
 8003176:	4603      	mov	r3, r0
 8003178:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800317c:	e006      	b.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003184:	e002      	b.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003186:	bf00      	nop
 8003188:	e000      	b.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800318a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800318c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003190:	2b00      	cmp	r3, #0
 8003192:	d10b      	bne.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003194:	4b8e      	ldr	r3, [pc, #568]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003196:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003198:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800319c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031a0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80031a4:	4a8a      	ldr	r2, [pc, #552]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031a6:	430b      	orrs	r3, r1
 80031a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80031aa:	e003      	b.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80031b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031bc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80031c0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80031c4:	2300      	movs	r3, #0
 80031c6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80031ca:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80031ce:	460b      	mov	r3, r1
 80031d0:	4313      	orrs	r3, r2
 80031d2:	d03a      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80031d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031da:	2b30      	cmp	r3, #48	@ 0x30
 80031dc:	d01f      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x416>
 80031de:	2b30      	cmp	r3, #48	@ 0x30
 80031e0:	d819      	bhi.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80031e2:	2b20      	cmp	r3, #32
 80031e4:	d00c      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80031e6:	2b20      	cmp	r3, #32
 80031e8:	d815      	bhi.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d019      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80031ee:	2b10      	cmp	r3, #16
 80031f0:	d111      	bne.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031f2:	4b77      	ldr	r3, [pc, #476]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031f6:	4a76      	ldr	r2, [pc, #472]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80031fe:	e011      	b.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003200:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003204:	3308      	adds	r3, #8
 8003206:	2102      	movs	r1, #2
 8003208:	4618      	mov	r0, r3
 800320a:	f001 fac5 	bl	8004798 <RCCEx_PLL2_Config>
 800320e:	4603      	mov	r3, r0
 8003210:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003214:	e006      	b.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800321c:	e002      	b.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800321e:	bf00      	nop
 8003220:	e000      	b.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003222:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003224:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003228:	2b00      	cmp	r3, #0
 800322a:	d10a      	bne.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800322c:	4b68      	ldr	r3, [pc, #416]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800322e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003230:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003234:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800323a:	4a65      	ldr	r2, [pc, #404]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800323c:	430b      	orrs	r3, r1
 800323e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003240:	e003      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003242:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003246:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800324a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800324e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003252:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003256:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800325a:	2300      	movs	r3, #0
 800325c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003260:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003264:	460b      	mov	r3, r1
 8003266:	4313      	orrs	r3, r2
 8003268:	d051      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800326a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800326e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003270:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003274:	d035      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003276:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800327a:	d82e      	bhi.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800327c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003280:	d031      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003282:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003286:	d828      	bhi.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003288:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800328c:	d01a      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800328e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003292:	d822      	bhi.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003294:	2b00      	cmp	r3, #0
 8003296:	d003      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003298:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800329c:	d007      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800329e:	e01c      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032a0:	4b4b      	ldr	r3, [pc, #300]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80032a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032a4:	4a4a      	ldr	r2, [pc, #296]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80032a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80032ac:	e01c      	b.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80032ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032b2:	3308      	adds	r3, #8
 80032b4:	2100      	movs	r1, #0
 80032b6:	4618      	mov	r0, r3
 80032b8:	f001 fa6e 	bl	8004798 <RCCEx_PLL2_Config>
 80032bc:	4603      	mov	r3, r0
 80032be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80032c2:	e011      	b.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80032c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032c8:	3328      	adds	r3, #40	@ 0x28
 80032ca:	2100      	movs	r1, #0
 80032cc:	4618      	mov	r0, r3
 80032ce:	f001 fb15 	bl	80048fc <RCCEx_PLL3_Config>
 80032d2:	4603      	mov	r3, r0
 80032d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80032d8:	e006      	b.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80032e0:	e002      	b.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80032e2:	bf00      	nop
 80032e4:	e000      	b.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80032e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d10a      	bne.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80032f0:	4b37      	ldr	r3, [pc, #220]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80032f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032f4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80032f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032fe:	4a34      	ldr	r2, [pc, #208]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003300:	430b      	orrs	r3, r1
 8003302:	6513      	str	r3, [r2, #80]	@ 0x50
 8003304:	e003      	b.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003306:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800330a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800330e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003316:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800331a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800331e:	2300      	movs	r3, #0
 8003320:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003324:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003328:	460b      	mov	r3, r1
 800332a:	4313      	orrs	r3, r2
 800332c:	d056      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800332e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003332:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003334:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003338:	d033      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800333a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800333e:	d82c      	bhi.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003340:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003344:	d02f      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003346:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800334a:	d826      	bhi.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800334c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003350:	d02b      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003352:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003356:	d820      	bhi.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003358:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800335c:	d012      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800335e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003362:	d81a      	bhi.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003364:	2b00      	cmp	r3, #0
 8003366:	d022      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003368:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800336c:	d115      	bne.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800336e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003372:	3308      	adds	r3, #8
 8003374:	2101      	movs	r1, #1
 8003376:	4618      	mov	r0, r3
 8003378:	f001 fa0e 	bl	8004798 <RCCEx_PLL2_Config>
 800337c:	4603      	mov	r3, r0
 800337e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003382:	e015      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003384:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003388:	3328      	adds	r3, #40	@ 0x28
 800338a:	2101      	movs	r1, #1
 800338c:	4618      	mov	r0, r3
 800338e:	f001 fab5 	bl	80048fc <RCCEx_PLL3_Config>
 8003392:	4603      	mov	r3, r0
 8003394:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003398:	e00a      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80033a0:	e006      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80033a2:	bf00      	nop
 80033a4:	e004      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80033a6:	bf00      	nop
 80033a8:	e002      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80033aa:	bf00      	nop
 80033ac:	e000      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80033ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d10d      	bne.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80033b8:	4b05      	ldr	r3, [pc, #20]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80033ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033bc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80033c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80033c6:	4a02      	ldr	r2, [pc, #8]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80033c8:	430b      	orrs	r3, r1
 80033ca:	6513      	str	r3, [r2, #80]	@ 0x50
 80033cc:	e006      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80033ce:	bf00      	nop
 80033d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80033dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80033e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80033ec:	2300      	movs	r3, #0
 80033ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80033f2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80033f6:	460b      	mov	r3, r1
 80033f8:	4313      	orrs	r3, r2
 80033fa:	d055      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80033fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003400:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003404:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003408:	d033      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800340a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800340e:	d82c      	bhi.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003410:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003414:	d02f      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003416:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800341a:	d826      	bhi.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800341c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003420:	d02b      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003422:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003426:	d820      	bhi.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003428:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800342c:	d012      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800342e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003432:	d81a      	bhi.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003434:	2b00      	cmp	r3, #0
 8003436:	d022      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003438:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800343c:	d115      	bne.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800343e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003442:	3308      	adds	r3, #8
 8003444:	2101      	movs	r1, #1
 8003446:	4618      	mov	r0, r3
 8003448:	f001 f9a6 	bl	8004798 <RCCEx_PLL2_Config>
 800344c:	4603      	mov	r3, r0
 800344e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003452:	e015      	b.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003454:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003458:	3328      	adds	r3, #40	@ 0x28
 800345a:	2101      	movs	r1, #1
 800345c:	4618      	mov	r0, r3
 800345e:	f001 fa4d 	bl	80048fc <RCCEx_PLL3_Config>
 8003462:	4603      	mov	r3, r0
 8003464:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003468:	e00a      	b.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003470:	e006      	b.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003472:	bf00      	nop
 8003474:	e004      	b.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003476:	bf00      	nop
 8003478:	e002      	b.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800347a:	bf00      	nop
 800347c:	e000      	b.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800347e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003480:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003484:	2b00      	cmp	r3, #0
 8003486:	d10b      	bne.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003488:	4ba3      	ldr	r3, [pc, #652]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800348a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800348c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003490:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003494:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003498:	4a9f      	ldr	r2, [pc, #636]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800349a:	430b      	orrs	r3, r1
 800349c:	6593      	str	r3, [r2, #88]	@ 0x58
 800349e:	e003      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80034a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80034b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80034b8:	2300      	movs	r3, #0
 80034ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80034be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80034c2:	460b      	mov	r3, r1
 80034c4:	4313      	orrs	r3, r2
 80034c6:	d037      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80034c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80034d2:	d00e      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80034d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80034d8:	d816      	bhi.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d018      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80034de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80034e2:	d111      	bne.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034e4:	4b8c      	ldr	r3, [pc, #560]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034e8:	4a8b      	ldr	r2, [pc, #556]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80034f0:	e00f      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80034f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034f6:	3308      	adds	r3, #8
 80034f8:	2101      	movs	r1, #1
 80034fa:	4618      	mov	r0, r3
 80034fc:	f001 f94c 	bl	8004798 <RCCEx_PLL2_Config>
 8003500:	4603      	mov	r3, r0
 8003502:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003506:	e004      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800350e:	e000      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003510:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003512:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003516:	2b00      	cmp	r3, #0
 8003518:	d10a      	bne.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800351a:	4b7f      	ldr	r3, [pc, #508]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800351c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800351e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003522:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003526:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003528:	4a7b      	ldr	r2, [pc, #492]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800352a:	430b      	orrs	r3, r1
 800352c:	6513      	str	r3, [r2, #80]	@ 0x50
 800352e:	e003      	b.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003530:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003534:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003538:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800353c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003540:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003544:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003548:	2300      	movs	r3, #0
 800354a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800354e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003552:	460b      	mov	r3, r1
 8003554:	4313      	orrs	r3, r2
 8003556:	d039      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003558:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800355c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800355e:	2b03      	cmp	r3, #3
 8003560:	d81c      	bhi.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003562:	a201      	add	r2, pc, #4	@ (adr r2, 8003568 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003568:	080035a5 	.word	0x080035a5
 800356c:	08003579 	.word	0x08003579
 8003570:	08003587 	.word	0x08003587
 8003574:	080035a5 	.word	0x080035a5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003578:	4b67      	ldr	r3, [pc, #412]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800357a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800357c:	4a66      	ldr	r2, [pc, #408]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800357e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003582:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003584:	e00f      	b.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003586:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800358a:	3308      	adds	r3, #8
 800358c:	2102      	movs	r1, #2
 800358e:	4618      	mov	r0, r3
 8003590:	f001 f902 	bl	8004798 <RCCEx_PLL2_Config>
 8003594:	4603      	mov	r3, r0
 8003596:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800359a:	e004      	b.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80035a2:	e000      	b.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80035a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10a      	bne.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80035ae:	4b5a      	ldr	r3, [pc, #360]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035b2:	f023 0103 	bic.w	r1, r3, #3
 80035b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035bc:	4a56      	ldr	r2, [pc, #344]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035be:	430b      	orrs	r3, r1
 80035c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035c2:	e003      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80035d8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80035dc:	2300      	movs	r3, #0
 80035de:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80035e2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80035e6:	460b      	mov	r3, r1
 80035e8:	4313      	orrs	r3, r2
 80035ea:	f000 809f 	beq.w	800372c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035ee:	4b4b      	ldr	r3, [pc, #300]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a4a      	ldr	r2, [pc, #296]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80035f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035f8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80035fa:	f7fe f883 	bl	8001704 <HAL_GetTick>
 80035fe:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003602:	e00b      	b.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003604:	f7fe f87e 	bl	8001704 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	2b64      	cmp	r3, #100	@ 0x64
 8003612:	d903      	bls.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800361a:	e005      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800361c:	4b3f      	ldr	r3, [pc, #252]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003624:	2b00      	cmp	r3, #0
 8003626:	d0ed      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003628:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800362c:	2b00      	cmp	r3, #0
 800362e:	d179      	bne.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003630:	4b39      	ldr	r3, [pc, #228]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003632:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003638:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800363c:	4053      	eors	r3, r2
 800363e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003642:	2b00      	cmp	r3, #0
 8003644:	d015      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003646:	4b34      	ldr	r3, [pc, #208]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003648:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800364a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800364e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003652:	4b31      	ldr	r3, [pc, #196]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003654:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003656:	4a30      	ldr	r2, [pc, #192]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003658:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800365c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800365e:	4b2e      	ldr	r3, [pc, #184]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003660:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003662:	4a2d      	ldr	r2, [pc, #180]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003664:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003668:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800366a:	4a2b      	ldr	r2, [pc, #172]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800366c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003670:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003672:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003676:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800367a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800367e:	d118      	bne.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003680:	f7fe f840 	bl	8001704 <HAL_GetTick>
 8003684:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003688:	e00d      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800368a:	f7fe f83b 	bl	8001704 <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003694:	1ad2      	subs	r2, r2, r3
 8003696:	f241 3388 	movw	r3, #5000	@ 0x1388
 800369a:	429a      	cmp	r2, r3
 800369c:	d903      	bls.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80036a4:	e005      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80036a6:	4b1c      	ldr	r3, [pc, #112]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d0eb      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80036b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d129      	bne.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80036c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80036ca:	d10e      	bne.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80036cc:	4b12      	ldr	r3, [pc, #72]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80036d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80036dc:	091a      	lsrs	r2, r3, #4
 80036de:	4b10      	ldr	r3, [pc, #64]	@ (8003720 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80036e0:	4013      	ands	r3, r2
 80036e2:	4a0d      	ldr	r2, [pc, #52]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036e4:	430b      	orrs	r3, r1
 80036e6:	6113      	str	r3, [r2, #16]
 80036e8:	e005      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80036ea:	4b0b      	ldr	r3, [pc, #44]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	4a0a      	ldr	r2, [pc, #40]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036f0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80036f4:	6113      	str	r3, [r2, #16]
 80036f6:	4b08      	ldr	r3, [pc, #32]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036f8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80036fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003702:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003706:	4a04      	ldr	r2, [pc, #16]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003708:	430b      	orrs	r3, r1
 800370a:	6713      	str	r3, [r2, #112]	@ 0x70
 800370c:	e00e      	b.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800370e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003712:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003716:	e009      	b.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003718:	58024400 	.word	0x58024400
 800371c:	58024800 	.word	0x58024800
 8003720:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003724:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003728:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800372c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003734:	f002 0301 	and.w	r3, r2, #1
 8003738:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800373c:	2300      	movs	r3, #0
 800373e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003742:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003746:	460b      	mov	r3, r1
 8003748:	4313      	orrs	r3, r2
 800374a:	f000 8089 	beq.w	8003860 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800374e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003752:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003754:	2b28      	cmp	r3, #40	@ 0x28
 8003756:	d86b      	bhi.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003758:	a201      	add	r2, pc, #4	@ (adr r2, 8003760 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800375a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800375e:	bf00      	nop
 8003760:	08003839 	.word	0x08003839
 8003764:	08003831 	.word	0x08003831
 8003768:	08003831 	.word	0x08003831
 800376c:	08003831 	.word	0x08003831
 8003770:	08003831 	.word	0x08003831
 8003774:	08003831 	.word	0x08003831
 8003778:	08003831 	.word	0x08003831
 800377c:	08003831 	.word	0x08003831
 8003780:	08003805 	.word	0x08003805
 8003784:	08003831 	.word	0x08003831
 8003788:	08003831 	.word	0x08003831
 800378c:	08003831 	.word	0x08003831
 8003790:	08003831 	.word	0x08003831
 8003794:	08003831 	.word	0x08003831
 8003798:	08003831 	.word	0x08003831
 800379c:	08003831 	.word	0x08003831
 80037a0:	0800381b 	.word	0x0800381b
 80037a4:	08003831 	.word	0x08003831
 80037a8:	08003831 	.word	0x08003831
 80037ac:	08003831 	.word	0x08003831
 80037b0:	08003831 	.word	0x08003831
 80037b4:	08003831 	.word	0x08003831
 80037b8:	08003831 	.word	0x08003831
 80037bc:	08003831 	.word	0x08003831
 80037c0:	08003839 	.word	0x08003839
 80037c4:	08003831 	.word	0x08003831
 80037c8:	08003831 	.word	0x08003831
 80037cc:	08003831 	.word	0x08003831
 80037d0:	08003831 	.word	0x08003831
 80037d4:	08003831 	.word	0x08003831
 80037d8:	08003831 	.word	0x08003831
 80037dc:	08003831 	.word	0x08003831
 80037e0:	08003839 	.word	0x08003839
 80037e4:	08003831 	.word	0x08003831
 80037e8:	08003831 	.word	0x08003831
 80037ec:	08003831 	.word	0x08003831
 80037f0:	08003831 	.word	0x08003831
 80037f4:	08003831 	.word	0x08003831
 80037f8:	08003831 	.word	0x08003831
 80037fc:	08003831 	.word	0x08003831
 8003800:	08003839 	.word	0x08003839
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003804:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003808:	3308      	adds	r3, #8
 800380a:	2101      	movs	r1, #1
 800380c:	4618      	mov	r0, r3
 800380e:	f000 ffc3 	bl	8004798 <RCCEx_PLL2_Config>
 8003812:	4603      	mov	r3, r0
 8003814:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003818:	e00f      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800381a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800381e:	3328      	adds	r3, #40	@ 0x28
 8003820:	2101      	movs	r1, #1
 8003822:	4618      	mov	r0, r3
 8003824:	f001 f86a 	bl	80048fc <RCCEx_PLL3_Config>
 8003828:	4603      	mov	r3, r0
 800382a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800382e:	e004      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003836:	e000      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003838:	bf00      	nop
    }

    if (ret == HAL_OK)
 800383a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800383e:	2b00      	cmp	r3, #0
 8003840:	d10a      	bne.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003842:	4bbf      	ldr	r3, [pc, #764]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003844:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003846:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800384a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800384e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003850:	4abb      	ldr	r2, [pc, #748]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003852:	430b      	orrs	r3, r1
 8003854:	6553      	str	r3, [r2, #84]	@ 0x54
 8003856:	e003      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003858:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800385c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003860:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003868:	f002 0302 	and.w	r3, r2, #2
 800386c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003870:	2300      	movs	r3, #0
 8003872:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003876:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800387a:	460b      	mov	r3, r1
 800387c:	4313      	orrs	r3, r2
 800387e:	d041      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003880:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003884:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003886:	2b05      	cmp	r3, #5
 8003888:	d824      	bhi.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800388a:	a201      	add	r2, pc, #4	@ (adr r2, 8003890 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800388c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003890:	080038dd 	.word	0x080038dd
 8003894:	080038a9 	.word	0x080038a9
 8003898:	080038bf 	.word	0x080038bf
 800389c:	080038dd 	.word	0x080038dd
 80038a0:	080038dd 	.word	0x080038dd
 80038a4:	080038dd 	.word	0x080038dd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80038a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ac:	3308      	adds	r3, #8
 80038ae:	2101      	movs	r1, #1
 80038b0:	4618      	mov	r0, r3
 80038b2:	f000 ff71 	bl	8004798 <RCCEx_PLL2_Config>
 80038b6:	4603      	mov	r3, r0
 80038b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80038bc:	e00f      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80038be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038c2:	3328      	adds	r3, #40	@ 0x28
 80038c4:	2101      	movs	r1, #1
 80038c6:	4618      	mov	r0, r3
 80038c8:	f001 f818 	bl	80048fc <RCCEx_PLL3_Config>
 80038cc:	4603      	mov	r3, r0
 80038ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80038d2:	e004      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038da:	e000      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80038dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d10a      	bne.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80038e6:	4b96      	ldr	r3, [pc, #600]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80038e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038ea:	f023 0107 	bic.w	r1, r3, #7
 80038ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038f4:	4a92      	ldr	r2, [pc, #584]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80038f6:	430b      	orrs	r3, r1
 80038f8:	6553      	str	r3, [r2, #84]	@ 0x54
 80038fa:	e003      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003900:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003904:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800390c:	f002 0304 	and.w	r3, r2, #4
 8003910:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003914:	2300      	movs	r3, #0
 8003916:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800391a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800391e:	460b      	mov	r3, r1
 8003920:	4313      	orrs	r3, r2
 8003922:	d044      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003924:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003928:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800392c:	2b05      	cmp	r3, #5
 800392e:	d825      	bhi.n	800397c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003930:	a201      	add	r2, pc, #4	@ (adr r2, 8003938 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003936:	bf00      	nop
 8003938:	08003985 	.word	0x08003985
 800393c:	08003951 	.word	0x08003951
 8003940:	08003967 	.word	0x08003967
 8003944:	08003985 	.word	0x08003985
 8003948:	08003985 	.word	0x08003985
 800394c:	08003985 	.word	0x08003985
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003950:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003954:	3308      	adds	r3, #8
 8003956:	2101      	movs	r1, #1
 8003958:	4618      	mov	r0, r3
 800395a:	f000 ff1d 	bl	8004798 <RCCEx_PLL2_Config>
 800395e:	4603      	mov	r3, r0
 8003960:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003964:	e00f      	b.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003966:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800396a:	3328      	adds	r3, #40	@ 0x28
 800396c:	2101      	movs	r1, #1
 800396e:	4618      	mov	r0, r3
 8003970:	f000 ffc4 	bl	80048fc <RCCEx_PLL3_Config>
 8003974:	4603      	mov	r3, r0
 8003976:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800397a:	e004      	b.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003982:	e000      	b.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003984:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003986:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800398a:	2b00      	cmp	r3, #0
 800398c:	d10b      	bne.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800398e:	4b6c      	ldr	r3, [pc, #432]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003992:	f023 0107 	bic.w	r1, r3, #7
 8003996:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800399a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800399e:	4a68      	ldr	r2, [pc, #416]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80039a0:	430b      	orrs	r3, r1
 80039a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80039a4:	e003      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80039ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b6:	f002 0320 	and.w	r3, r2, #32
 80039ba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80039be:	2300      	movs	r3, #0
 80039c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80039c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80039c8:	460b      	mov	r3, r1
 80039ca:	4313      	orrs	r3, r2
 80039cc:	d055      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80039ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039da:	d033      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80039dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039e0:	d82c      	bhi.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80039e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039e6:	d02f      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80039e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039ec:	d826      	bhi.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80039ee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80039f2:	d02b      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80039f4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80039f8:	d820      	bhi.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80039fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039fe:	d012      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003a00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a04:	d81a      	bhi.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d022      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003a0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a0e:	d115      	bne.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a14:	3308      	adds	r3, #8
 8003a16:	2100      	movs	r1, #0
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f000 febd 	bl	8004798 <RCCEx_PLL2_Config>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003a24:	e015      	b.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a2a:	3328      	adds	r3, #40	@ 0x28
 8003a2c:	2102      	movs	r1, #2
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f000 ff64 	bl	80048fc <RCCEx_PLL3_Config>
 8003a34:	4603      	mov	r3, r0
 8003a36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003a3a:	e00a      	b.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a42:	e006      	b.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003a44:	bf00      	nop
 8003a46:	e004      	b.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003a48:	bf00      	nop
 8003a4a:	e002      	b.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003a4c:	bf00      	nop
 8003a4e:	e000      	b.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003a50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10b      	bne.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a5a:	4b39      	ldr	r3, [pc, #228]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003a5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a5e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a6a:	4a35      	ldr	r2, [pc, #212]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003a6c:	430b      	orrs	r3, r1
 8003a6e:	6553      	str	r3, [r2, #84]	@ 0x54
 8003a70:	e003      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a82:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003a86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003a90:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003a94:	460b      	mov	r3, r1
 8003a96:	4313      	orrs	r3, r2
 8003a98:	d058      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003aa2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003aa6:	d033      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003aa8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003aac:	d82c      	bhi.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003aae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ab2:	d02f      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003ab4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ab8:	d826      	bhi.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003aba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003abe:	d02b      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003ac0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ac4:	d820      	bhi.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003ac6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003aca:	d012      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003acc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ad0:	d81a      	bhi.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d022      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003ad6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ada:	d115      	bne.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ae0:	3308      	adds	r3, #8
 8003ae2:	2100      	movs	r1, #0
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f000 fe57 	bl	8004798 <RCCEx_PLL2_Config>
 8003aea:	4603      	mov	r3, r0
 8003aec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003af0:	e015      	b.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003af6:	3328      	adds	r3, #40	@ 0x28
 8003af8:	2102      	movs	r1, #2
 8003afa:	4618      	mov	r0, r3
 8003afc:	f000 fefe 	bl	80048fc <RCCEx_PLL3_Config>
 8003b00:	4603      	mov	r3, r0
 8003b02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003b06:	e00a      	b.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b0e:	e006      	b.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003b10:	bf00      	nop
 8003b12:	e004      	b.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003b14:	bf00      	nop
 8003b16:	e002      	b.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003b18:	bf00      	nop
 8003b1a:	e000      	b.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003b1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d10e      	bne.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b26:	4b06      	ldr	r3, [pc, #24]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003b28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b2a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b32:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003b36:	4a02      	ldr	r2, [pc, #8]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003b38:	430b      	orrs	r3, r1
 8003b3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b3c:	e006      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003b3e:	bf00      	nop
 8003b40:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b54:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003b58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003b62:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003b66:	460b      	mov	r3, r1
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	d055      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b70:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003b74:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003b78:	d033      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003b7a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003b7e:	d82c      	bhi.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003b80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b84:	d02f      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003b86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b8a:	d826      	bhi.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003b8c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003b90:	d02b      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003b92:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003b96:	d820      	bhi.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003b98:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b9c:	d012      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003b9e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ba2:	d81a      	bhi.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d022      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003ba8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bac:	d115      	bne.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bb2:	3308      	adds	r3, #8
 8003bb4:	2100      	movs	r1, #0
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f000 fdee 	bl	8004798 <RCCEx_PLL2_Config>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003bc2:	e015      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003bc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bc8:	3328      	adds	r3, #40	@ 0x28
 8003bca:	2102      	movs	r1, #2
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f000 fe95 	bl	80048fc <RCCEx_PLL3_Config>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003bd8:	e00a      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003be0:	e006      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003be2:	bf00      	nop
 8003be4:	e004      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003be6:	bf00      	nop
 8003be8:	e002      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003bea:	bf00      	nop
 8003bec:	e000      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003bee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bf0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d10b      	bne.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003bf8:	4ba1      	ldr	r3, [pc, #644]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003bfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bfc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c04:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003c08:	4a9d      	ldr	r2, [pc, #628]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c0a:	430b      	orrs	r3, r1
 8003c0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c0e:	e003      	b.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c14:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c20:	f002 0308 	and.w	r3, r2, #8
 8003c24:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003c28:	2300      	movs	r3, #0
 8003c2a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003c2e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003c32:	460b      	mov	r3, r1
 8003c34:	4313      	orrs	r3, r2
 8003c36:	d01e      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c44:	d10c      	bne.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c4a:	3328      	adds	r3, #40	@ 0x28
 8003c4c:	2102      	movs	r1, #2
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f000 fe54 	bl	80048fc <RCCEx_PLL3_Config>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d002      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003c60:	4b87      	ldr	r3, [pc, #540]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c64:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c70:	4a83      	ldr	r2, [pc, #524]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c72:	430b      	orrs	r3, r1
 8003c74:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c7e:	f002 0310 	and.w	r3, r2, #16
 8003c82:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003c86:	2300      	movs	r3, #0
 8003c88:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003c8c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003c90:	460b      	mov	r3, r1
 8003c92:	4313      	orrs	r3, r2
 8003c94:	d01e      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ca2:	d10c      	bne.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ca8:	3328      	adds	r3, #40	@ 0x28
 8003caa:	2102      	movs	r1, #2
 8003cac:	4618      	mov	r0, r3
 8003cae:	f000 fe25 	bl	80048fc <RCCEx_PLL3_Config>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d002      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003cbe:	4b70      	ldr	r3, [pc, #448]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cc2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003cce:	4a6c      	ldr	r2, [pc, #432]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003cd0:	430b      	orrs	r3, r1
 8003cd2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cdc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003ce0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003cea:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003cee:	460b      	mov	r3, r1
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	d03e      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cf8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003cfc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d00:	d022      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003d02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d06:	d81b      	bhi.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d003      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003d0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d10:	d00b      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003d12:	e015      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d18:	3308      	adds	r3, #8
 8003d1a:	2100      	movs	r1, #0
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f000 fd3b 	bl	8004798 <RCCEx_PLL2_Config>
 8003d22:	4603      	mov	r3, r0
 8003d24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003d28:	e00f      	b.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d2e:	3328      	adds	r3, #40	@ 0x28
 8003d30:	2102      	movs	r1, #2
 8003d32:	4618      	mov	r0, r3
 8003d34:	f000 fde2 	bl	80048fc <RCCEx_PLL3_Config>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003d3e:	e004      	b.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d46:	e000      	b.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003d48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d10b      	bne.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d52:	4b4b      	ldr	r3, [pc, #300]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d56:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d5e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003d62:	4a47      	ldr	r2, [pc, #284]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d64:	430b      	orrs	r3, r1
 8003d66:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d68:	e003      	b.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d7a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003d7e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003d80:	2300      	movs	r3, #0
 8003d82:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003d84:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003d88:	460b      	mov	r3, r1
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	d03b      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d96:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003d9a:	d01f      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003d9c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003da0:	d818      	bhi.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003da2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003da6:	d003      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003da8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003dac:	d007      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003dae:	e011      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003db0:	4b33      	ldr	r3, [pc, #204]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003db4:	4a32      	ldr	r2, [pc, #200]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003db6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003dba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003dbc:	e00f      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dc2:	3328      	adds	r3, #40	@ 0x28
 8003dc4:	2101      	movs	r1, #1
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f000 fd98 	bl	80048fc <RCCEx_PLL3_Config>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003dd2:	e004      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003dda:	e000      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003ddc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d10b      	bne.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003de6:	4b26      	ldr	r3, [pc, #152]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003de8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dea:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003df6:	4a22      	ldr	r2, [pc, #136]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003df8:	430b      	orrs	r3, r1
 8003dfa:	6553      	str	r3, [r2, #84]	@ 0x54
 8003dfc:	e003      	b.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e0e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003e12:	673b      	str	r3, [r7, #112]	@ 0x70
 8003e14:	2300      	movs	r3, #0
 8003e16:	677b      	str	r3, [r7, #116]	@ 0x74
 8003e18:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003e1c:	460b      	mov	r3, r1
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	d034      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d003      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003e2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e30:	d007      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003e32:	e011      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e34:	4b12      	ldr	r3, [pc, #72]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e38:	4a11      	ldr	r2, [pc, #68]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003e40:	e00e      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e46:	3308      	adds	r3, #8
 8003e48:	2102      	movs	r1, #2
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f000 fca4 	bl	8004798 <RCCEx_PLL2_Config>
 8003e50:	4603      	mov	r3, r0
 8003e52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003e56:	e003      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d10d      	bne.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003e68:	4b05      	ldr	r3, [pc, #20]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e6c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e76:	4a02      	ldr	r2, [pc, #8]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e78:	430b      	orrs	r3, r1
 8003e7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e7c:	e006      	b.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003e7e:	bf00      	nop
 8003e80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e94:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003e98:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003e9e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003ea2:	460b      	mov	r3, r1
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	d00c      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eac:	3328      	adds	r3, #40	@ 0x28
 8003eae:	2102      	movs	r1, #2
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f000 fd23 	bl	80048fc <RCCEx_PLL3_Config>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d002      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eca:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003ece:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	667b      	str	r3, [r7, #100]	@ 0x64
 8003ed4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003ed8:	460b      	mov	r3, r1
 8003eda:	4313      	orrs	r3, r2
 8003edc:	d038      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ee2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ee6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003eea:	d018      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003eec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ef0:	d811      	bhi.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003ef2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ef6:	d014      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003ef8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003efc:	d80b      	bhi.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d011      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003f02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f06:	d106      	bne.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f08:	4bc3      	ldr	r3, [pc, #780]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f0c:	4ac2      	ldr	r2, [pc, #776]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003f14:	e008      	b.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f1c:	e004      	b.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003f1e:	bf00      	nop
 8003f20:	e002      	b.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003f22:	bf00      	nop
 8003f24:	e000      	b.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003f26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d10b      	bne.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f30:	4bb9      	ldr	r3, [pc, #740]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f34:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f40:	4ab5      	ldr	r2, [pc, #724]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f42:	430b      	orrs	r3, r1
 8003f44:	6553      	str	r3, [r2, #84]	@ 0x54
 8003f46:	e003      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f4c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f58:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003f5c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003f5e:	2300      	movs	r3, #0
 8003f60:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003f62:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003f66:	460b      	mov	r3, r1
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	d009      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003f6c:	4baa      	ldr	r3, [pc, #680]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f70:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f7a:	4aa7      	ldr	r2, [pc, #668]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f7c:	430b      	orrs	r3, r1
 8003f7e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f88:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003f8c:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f8e:	2300      	movs	r3, #0
 8003f90:	657b      	str	r3, [r7, #84]	@ 0x54
 8003f92:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003f96:	460b      	mov	r3, r1
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	d00a      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003f9c:	4b9e      	ldr	r3, [pc, #632]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fa8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003fac:	4a9a      	ldr	r2, [pc, #616]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003fae:	430b      	orrs	r3, r1
 8003fb0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fba:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003fbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fc4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003fc8:	460b      	mov	r3, r1
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	d009      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003fce:	4b92      	ldr	r3, [pc, #584]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003fd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fd2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fdc:	4a8e      	ldr	r2, [pc, #568]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003fde:	430b      	orrs	r3, r1
 8003fe0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fea:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003fee:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ff4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	d00e      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ffe:	4b86      	ldr	r3, [pc, #536]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	4a85      	ldr	r2, [pc, #532]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004004:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004008:	6113      	str	r3, [r2, #16]
 800400a:	4b83      	ldr	r3, [pc, #524]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800400c:	6919      	ldr	r1, [r3, #16]
 800400e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004012:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004016:	4a80      	ldr	r2, [pc, #512]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004018:	430b      	orrs	r3, r1
 800401a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800401c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004024:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004028:	63bb      	str	r3, [r7, #56]	@ 0x38
 800402a:	2300      	movs	r3, #0
 800402c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800402e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004032:	460b      	mov	r3, r1
 8004034:	4313      	orrs	r3, r2
 8004036:	d009      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004038:	4b77      	ldr	r3, [pc, #476]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800403a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800403c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004040:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004044:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004046:	4a74      	ldr	r2, [pc, #464]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004048:	430b      	orrs	r3, r1
 800404a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800404c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004054:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004058:	633b      	str	r3, [r7, #48]	@ 0x30
 800405a:	2300      	movs	r3, #0
 800405c:	637b      	str	r3, [r7, #52]	@ 0x34
 800405e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004062:	460b      	mov	r3, r1
 8004064:	4313      	orrs	r3, r2
 8004066:	d00a      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004068:	4b6b      	ldr	r3, [pc, #428]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800406a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800406c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004070:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004074:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004078:	4a67      	ldr	r2, [pc, #412]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800407a:	430b      	orrs	r3, r1
 800407c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800407e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004086:	2100      	movs	r1, #0
 8004088:	62b9      	str	r1, [r7, #40]	@ 0x28
 800408a:	f003 0301 	and.w	r3, r3, #1
 800408e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004090:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004094:	460b      	mov	r3, r1
 8004096:	4313      	orrs	r3, r2
 8004098:	d011      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800409a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800409e:	3308      	adds	r3, #8
 80040a0:	2100      	movs	r1, #0
 80040a2:	4618      	mov	r0, r3
 80040a4:	f000 fb78 	bl	8004798 <RCCEx_PLL2_Config>
 80040a8:	4603      	mov	r3, r0
 80040aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80040ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d003      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80040be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c6:	2100      	movs	r1, #0
 80040c8:	6239      	str	r1, [r7, #32]
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80040d0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80040d4:	460b      	mov	r3, r1
 80040d6:	4313      	orrs	r3, r2
 80040d8:	d011      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80040da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040de:	3308      	adds	r3, #8
 80040e0:	2101      	movs	r1, #1
 80040e2:	4618      	mov	r0, r3
 80040e4:	f000 fb58 	bl	8004798 <RCCEx_PLL2_Config>
 80040e8:	4603      	mov	r3, r0
 80040ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80040ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d003      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80040fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004106:	2100      	movs	r1, #0
 8004108:	61b9      	str	r1, [r7, #24]
 800410a:	f003 0304 	and.w	r3, r3, #4
 800410e:	61fb      	str	r3, [r7, #28]
 8004110:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004114:	460b      	mov	r3, r1
 8004116:	4313      	orrs	r3, r2
 8004118:	d011      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800411a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800411e:	3308      	adds	r3, #8
 8004120:	2102      	movs	r1, #2
 8004122:	4618      	mov	r0, r3
 8004124:	f000 fb38 	bl	8004798 <RCCEx_PLL2_Config>
 8004128:	4603      	mov	r3, r0
 800412a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800412e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004132:	2b00      	cmp	r3, #0
 8004134:	d003      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004136:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800413a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800413e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004146:	2100      	movs	r1, #0
 8004148:	6139      	str	r1, [r7, #16]
 800414a:	f003 0308 	and.w	r3, r3, #8
 800414e:	617b      	str	r3, [r7, #20]
 8004150:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004154:	460b      	mov	r3, r1
 8004156:	4313      	orrs	r3, r2
 8004158:	d011      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800415a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800415e:	3328      	adds	r3, #40	@ 0x28
 8004160:	2100      	movs	r1, #0
 8004162:	4618      	mov	r0, r3
 8004164:	f000 fbca 	bl	80048fc <RCCEx_PLL3_Config>
 8004168:	4603      	mov	r3, r0
 800416a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800416e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004172:	2b00      	cmp	r3, #0
 8004174:	d003      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004176:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800417a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800417e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004186:	2100      	movs	r1, #0
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	f003 0310 	and.w	r3, r3, #16
 800418e:	60fb      	str	r3, [r7, #12]
 8004190:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004194:	460b      	mov	r3, r1
 8004196:	4313      	orrs	r3, r2
 8004198:	d011      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800419a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800419e:	3328      	adds	r3, #40	@ 0x28
 80041a0:	2101      	movs	r1, #1
 80041a2:	4618      	mov	r0, r3
 80041a4:	f000 fbaa 	bl	80048fc <RCCEx_PLL3_Config>
 80041a8:	4603      	mov	r3, r0
 80041aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80041ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d003      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80041be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c6:	2100      	movs	r1, #0
 80041c8:	6039      	str	r1, [r7, #0]
 80041ca:	f003 0320 	and.w	r3, r3, #32
 80041ce:	607b      	str	r3, [r7, #4]
 80041d0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80041d4:	460b      	mov	r3, r1
 80041d6:	4313      	orrs	r3, r2
 80041d8:	d011      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80041da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041de:	3328      	adds	r3, #40	@ 0x28
 80041e0:	2102      	movs	r1, #2
 80041e2:	4618      	mov	r0, r3
 80041e4:	f000 fb8a 	bl	80048fc <RCCEx_PLL3_Config>
 80041e8:	4603      	mov	r3, r0
 80041ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80041ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d003      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80041fe:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004202:	2b00      	cmp	r3, #0
 8004204:	d101      	bne.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004206:	2300      	movs	r3, #0
 8004208:	e000      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
}
 800420c:	4618      	mov	r0, r3
 800420e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004212:	46bd      	mov	sp, r7
 8004214:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004218:	58024400 	.word	0x58024400

0800421c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004220:	f7fe fd96 	bl	8002d50 <HAL_RCC_GetHCLKFreq>
 8004224:	4602      	mov	r2, r0
 8004226:	4b06      	ldr	r3, [pc, #24]	@ (8004240 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004228:	6a1b      	ldr	r3, [r3, #32]
 800422a:	091b      	lsrs	r3, r3, #4
 800422c:	f003 0307 	and.w	r3, r3, #7
 8004230:	4904      	ldr	r1, [pc, #16]	@ (8004244 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004232:	5ccb      	ldrb	r3, [r1, r3]
 8004234:	f003 031f 	and.w	r3, r3, #31
 8004238:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800423c:	4618      	mov	r0, r3
 800423e:	bd80      	pop	{r7, pc}
 8004240:	58024400 	.word	0x58024400
 8004244:	08007408 	.word	0x08007408

08004248 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004248:	b480      	push	{r7}
 800424a:	b089      	sub	sp, #36	@ 0x24
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004250:	4ba1      	ldr	r3, [pc, #644]	@ (80044d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004254:	f003 0303 	and.w	r3, r3, #3
 8004258:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800425a:	4b9f      	ldr	r3, [pc, #636]	@ (80044d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800425c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800425e:	0b1b      	lsrs	r3, r3, #12
 8004260:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004264:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004266:	4b9c      	ldr	r3, [pc, #624]	@ (80044d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800426a:	091b      	lsrs	r3, r3, #4
 800426c:	f003 0301 	and.w	r3, r3, #1
 8004270:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004272:	4b99      	ldr	r3, [pc, #612]	@ (80044d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004274:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004276:	08db      	lsrs	r3, r3, #3
 8004278:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	fb02 f303 	mul.w	r3, r2, r3
 8004282:	ee07 3a90 	vmov	s15, r3
 8004286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800428a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	2b00      	cmp	r3, #0
 8004292:	f000 8111 	beq.w	80044b8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	2b02      	cmp	r3, #2
 800429a:	f000 8083 	beq.w	80043a4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	f200 80a1 	bhi.w	80043e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d003      	beq.n	80042b4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d056      	beq.n	8004360 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80042b2:	e099      	b.n	80043e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80042b4:	4b88      	ldr	r3, [pc, #544]	@ (80044d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0320 	and.w	r3, r3, #32
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d02d      	beq.n	800431c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80042c0:	4b85      	ldr	r3, [pc, #532]	@ (80044d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	08db      	lsrs	r3, r3, #3
 80042c6:	f003 0303 	and.w	r3, r3, #3
 80042ca:	4a84      	ldr	r2, [pc, #528]	@ (80044dc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80042cc:	fa22 f303 	lsr.w	r3, r2, r3
 80042d0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	ee07 3a90 	vmov	s15, r3
 80042d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	ee07 3a90 	vmov	s15, r3
 80042e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042ea:	4b7b      	ldr	r3, [pc, #492]	@ (80044d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042f2:	ee07 3a90 	vmov	s15, r3
 80042f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80042fe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80044e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004302:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004306:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800430a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800430e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004312:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004316:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800431a:	e087      	b.n	800442c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	ee07 3a90 	vmov	s15, r3
 8004322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004326:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80044e4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800432a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800432e:	4b6a      	ldr	r3, [pc, #424]	@ (80044d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004330:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004336:	ee07 3a90 	vmov	s15, r3
 800433a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800433e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004342:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80044e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004346:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800434a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800434e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004352:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800435a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800435e:	e065      	b.n	800442c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	ee07 3a90 	vmov	s15, r3
 8004366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800436a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80044e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800436e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004372:	4b59      	ldr	r3, [pc, #356]	@ (80044d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004374:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800437a:	ee07 3a90 	vmov	s15, r3
 800437e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004382:	ed97 6a03 	vldr	s12, [r7, #12]
 8004386:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80044e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800438a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800438e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004392:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004396:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800439a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800439e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80043a2:	e043      	b.n	800442c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	ee07 3a90 	vmov	s15, r3
 80043aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043ae:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80044ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80043b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043b6:	4b48      	ldr	r3, [pc, #288]	@ (80044d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043be:	ee07 3a90 	vmov	s15, r3
 80043c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80043ca:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80044e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80043ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80043e6:	e021      	b.n	800442c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	ee07 3a90 	vmov	s15, r3
 80043ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043f2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80044e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80043f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043fa:	4b37      	ldr	r3, [pc, #220]	@ (80044d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004402:	ee07 3a90 	vmov	s15, r3
 8004406:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800440a:	ed97 6a03 	vldr	s12, [r7, #12]
 800440e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80044e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004412:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004416:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800441a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800441e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004426:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800442a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800442c:	4b2a      	ldr	r3, [pc, #168]	@ (80044d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800442e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004430:	0a5b      	lsrs	r3, r3, #9
 8004432:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004436:	ee07 3a90 	vmov	s15, r3
 800443a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800443e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004442:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004446:	edd7 6a07 	vldr	s13, [r7, #28]
 800444a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800444e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004452:	ee17 2a90 	vmov	r2, s15
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800445a:	4b1f      	ldr	r3, [pc, #124]	@ (80044d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800445c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800445e:	0c1b      	lsrs	r3, r3, #16
 8004460:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004464:	ee07 3a90 	vmov	s15, r3
 8004468:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800446c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004470:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004474:	edd7 6a07 	vldr	s13, [r7, #28]
 8004478:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800447c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004480:	ee17 2a90 	vmov	r2, s15
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004488:	4b13      	ldr	r3, [pc, #76]	@ (80044d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800448a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800448c:	0e1b      	lsrs	r3, r3, #24
 800448e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004492:	ee07 3a90 	vmov	s15, r3
 8004496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800449a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800449e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80044a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80044a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044ae:	ee17 2a90 	vmov	r2, s15
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80044b6:	e008      	b.n	80044ca <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	609a      	str	r2, [r3, #8]
}
 80044ca:	bf00      	nop
 80044cc:	3724      	adds	r7, #36	@ 0x24
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr
 80044d6:	bf00      	nop
 80044d8:	58024400 	.word	0x58024400
 80044dc:	03d09000 	.word	0x03d09000
 80044e0:	46000000 	.word	0x46000000
 80044e4:	4c742400 	.word	0x4c742400
 80044e8:	4a742400 	.word	0x4a742400
 80044ec:	4bbebc20 	.word	0x4bbebc20

080044f0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b089      	sub	sp, #36	@ 0x24
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80044f8:	4ba1      	ldr	r3, [pc, #644]	@ (8004780 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044fc:	f003 0303 	and.w	r3, r3, #3
 8004500:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004502:	4b9f      	ldr	r3, [pc, #636]	@ (8004780 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004506:	0d1b      	lsrs	r3, r3, #20
 8004508:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800450c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800450e:	4b9c      	ldr	r3, [pc, #624]	@ (8004780 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004512:	0a1b      	lsrs	r3, r3, #8
 8004514:	f003 0301 	and.w	r3, r3, #1
 8004518:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800451a:	4b99      	ldr	r3, [pc, #612]	@ (8004780 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800451c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800451e:	08db      	lsrs	r3, r3, #3
 8004520:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004524:	693a      	ldr	r2, [r7, #16]
 8004526:	fb02 f303 	mul.w	r3, r2, r3
 800452a:	ee07 3a90 	vmov	s15, r3
 800452e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004532:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	2b00      	cmp	r3, #0
 800453a:	f000 8111 	beq.w	8004760 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	2b02      	cmp	r3, #2
 8004542:	f000 8083 	beq.w	800464c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	2b02      	cmp	r3, #2
 800454a:	f200 80a1 	bhi.w	8004690 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d003      	beq.n	800455c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	2b01      	cmp	r3, #1
 8004558:	d056      	beq.n	8004608 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800455a:	e099      	b.n	8004690 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800455c:	4b88      	ldr	r3, [pc, #544]	@ (8004780 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0320 	and.w	r3, r3, #32
 8004564:	2b00      	cmp	r3, #0
 8004566:	d02d      	beq.n	80045c4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004568:	4b85      	ldr	r3, [pc, #532]	@ (8004780 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	08db      	lsrs	r3, r3, #3
 800456e:	f003 0303 	and.w	r3, r3, #3
 8004572:	4a84      	ldr	r2, [pc, #528]	@ (8004784 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004574:	fa22 f303 	lsr.w	r3, r2, r3
 8004578:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	ee07 3a90 	vmov	s15, r3
 8004580:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	ee07 3a90 	vmov	s15, r3
 800458a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800458e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004592:	4b7b      	ldr	r3, [pc, #492]	@ (8004780 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800459a:	ee07 3a90 	vmov	s15, r3
 800459e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80045a6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004788 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80045aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045be:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80045c2:	e087      	b.n	80046d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	ee07 3a90 	vmov	s15, r3
 80045ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ce:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800478c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80045d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045d6:	4b6a      	ldr	r3, [pc, #424]	@ (8004780 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045de:	ee07 3a90 	vmov	s15, r3
 80045e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80045ea:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004788 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80045ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004602:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004606:	e065      	b.n	80046d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	ee07 3a90 	vmov	s15, r3
 800460e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004612:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004790 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004616:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800461a:	4b59      	ldr	r3, [pc, #356]	@ (8004780 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800461c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800461e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004622:	ee07 3a90 	vmov	s15, r3
 8004626:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800462a:	ed97 6a03 	vldr	s12, [r7, #12]
 800462e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004788 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004632:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004636:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800463a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800463e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004646:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800464a:	e043      	b.n	80046d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	ee07 3a90 	vmov	s15, r3
 8004652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004656:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004794 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800465a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800465e:	4b48      	ldr	r3, [pc, #288]	@ (8004780 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004662:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004666:	ee07 3a90 	vmov	s15, r3
 800466a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800466e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004672:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004788 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004676:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800467a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800467e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004682:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004686:	ee67 7a27 	vmul.f32	s15, s14, s15
 800468a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800468e:	e021      	b.n	80046d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	ee07 3a90 	vmov	s15, r3
 8004696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800469a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004790 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800469e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046a2:	4b37      	ldr	r3, [pc, #220]	@ (8004780 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046aa:	ee07 3a90 	vmov	s15, r3
 80046ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80046b6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004788 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80046ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046d2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80046d4:	4b2a      	ldr	r3, [pc, #168]	@ (8004780 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046d8:	0a5b      	lsrs	r3, r3, #9
 80046da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046de:	ee07 3a90 	vmov	s15, r3
 80046e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80046ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80046f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046fa:	ee17 2a90 	vmov	r2, s15
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004702:	4b1f      	ldr	r3, [pc, #124]	@ (8004780 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004706:	0c1b      	lsrs	r3, r3, #16
 8004708:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800470c:	ee07 3a90 	vmov	s15, r3
 8004710:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004714:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004718:	ee37 7a87 	vadd.f32	s14, s15, s14
 800471c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004720:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004724:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004728:	ee17 2a90 	vmov	r2, s15
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004730:	4b13      	ldr	r3, [pc, #76]	@ (8004780 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004734:	0e1b      	lsrs	r3, r3, #24
 8004736:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800473a:	ee07 3a90 	vmov	s15, r3
 800473e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004742:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004746:	ee37 7a87 	vadd.f32	s14, s15, s14
 800474a:	edd7 6a07 	vldr	s13, [r7, #28]
 800474e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004752:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004756:	ee17 2a90 	vmov	r2, s15
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800475e:	e008      	b.n	8004772 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	609a      	str	r2, [r3, #8]
}
 8004772:	bf00      	nop
 8004774:	3724      	adds	r7, #36	@ 0x24
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	58024400 	.word	0x58024400
 8004784:	03d09000 	.word	0x03d09000
 8004788:	46000000 	.word	0x46000000
 800478c:	4c742400 	.word	0x4c742400
 8004790:	4a742400 	.word	0x4a742400
 8004794:	4bbebc20 	.word	0x4bbebc20

08004798 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047a2:	2300      	movs	r3, #0
 80047a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80047a6:	4b53      	ldr	r3, [pc, #332]	@ (80048f4 <RCCEx_PLL2_Config+0x15c>)
 80047a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047aa:	f003 0303 	and.w	r3, r3, #3
 80047ae:	2b03      	cmp	r3, #3
 80047b0:	d101      	bne.n	80047b6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e099      	b.n	80048ea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80047b6:	4b4f      	ldr	r3, [pc, #316]	@ (80048f4 <RCCEx_PLL2_Config+0x15c>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a4e      	ldr	r2, [pc, #312]	@ (80048f4 <RCCEx_PLL2_Config+0x15c>)
 80047bc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80047c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047c2:	f7fc ff9f 	bl	8001704 <HAL_GetTick>
 80047c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80047c8:	e008      	b.n	80047dc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80047ca:	f7fc ff9b 	bl	8001704 <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d901      	bls.n	80047dc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e086      	b.n	80048ea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80047dc:	4b45      	ldr	r3, [pc, #276]	@ (80048f4 <RCCEx_PLL2_Config+0x15c>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d1f0      	bne.n	80047ca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80047e8:	4b42      	ldr	r3, [pc, #264]	@ (80048f4 <RCCEx_PLL2_Config+0x15c>)
 80047ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ec:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	031b      	lsls	r3, r3, #12
 80047f6:	493f      	ldr	r1, [pc, #252]	@ (80048f4 <RCCEx_PLL2_Config+0x15c>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	628b      	str	r3, [r1, #40]	@ 0x28
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	3b01      	subs	r3, #1
 8004802:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	3b01      	subs	r3, #1
 800480c:	025b      	lsls	r3, r3, #9
 800480e:	b29b      	uxth	r3, r3
 8004810:	431a      	orrs	r2, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	3b01      	subs	r3, #1
 8004818:	041b      	lsls	r3, r3, #16
 800481a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800481e:	431a      	orrs	r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	3b01      	subs	r3, #1
 8004826:	061b      	lsls	r3, r3, #24
 8004828:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800482c:	4931      	ldr	r1, [pc, #196]	@ (80048f4 <RCCEx_PLL2_Config+0x15c>)
 800482e:	4313      	orrs	r3, r2
 8004830:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004832:	4b30      	ldr	r3, [pc, #192]	@ (80048f4 <RCCEx_PLL2_Config+0x15c>)
 8004834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004836:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	695b      	ldr	r3, [r3, #20]
 800483e:	492d      	ldr	r1, [pc, #180]	@ (80048f4 <RCCEx_PLL2_Config+0x15c>)
 8004840:	4313      	orrs	r3, r2
 8004842:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004844:	4b2b      	ldr	r3, [pc, #172]	@ (80048f4 <RCCEx_PLL2_Config+0x15c>)
 8004846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004848:	f023 0220 	bic.w	r2, r3, #32
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	4928      	ldr	r1, [pc, #160]	@ (80048f4 <RCCEx_PLL2_Config+0x15c>)
 8004852:	4313      	orrs	r3, r2
 8004854:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004856:	4b27      	ldr	r3, [pc, #156]	@ (80048f4 <RCCEx_PLL2_Config+0x15c>)
 8004858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800485a:	4a26      	ldr	r2, [pc, #152]	@ (80048f4 <RCCEx_PLL2_Config+0x15c>)
 800485c:	f023 0310 	bic.w	r3, r3, #16
 8004860:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004862:	4b24      	ldr	r3, [pc, #144]	@ (80048f4 <RCCEx_PLL2_Config+0x15c>)
 8004864:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004866:	4b24      	ldr	r3, [pc, #144]	@ (80048f8 <RCCEx_PLL2_Config+0x160>)
 8004868:	4013      	ands	r3, r2
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	69d2      	ldr	r2, [r2, #28]
 800486e:	00d2      	lsls	r2, r2, #3
 8004870:	4920      	ldr	r1, [pc, #128]	@ (80048f4 <RCCEx_PLL2_Config+0x15c>)
 8004872:	4313      	orrs	r3, r2
 8004874:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004876:	4b1f      	ldr	r3, [pc, #124]	@ (80048f4 <RCCEx_PLL2_Config+0x15c>)
 8004878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800487a:	4a1e      	ldr	r2, [pc, #120]	@ (80048f4 <RCCEx_PLL2_Config+0x15c>)
 800487c:	f043 0310 	orr.w	r3, r3, #16
 8004880:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d106      	bne.n	8004896 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004888:	4b1a      	ldr	r3, [pc, #104]	@ (80048f4 <RCCEx_PLL2_Config+0x15c>)
 800488a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800488c:	4a19      	ldr	r2, [pc, #100]	@ (80048f4 <RCCEx_PLL2_Config+0x15c>)
 800488e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004892:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004894:	e00f      	b.n	80048b6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	2b01      	cmp	r3, #1
 800489a:	d106      	bne.n	80048aa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800489c:	4b15      	ldr	r3, [pc, #84]	@ (80048f4 <RCCEx_PLL2_Config+0x15c>)
 800489e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048a0:	4a14      	ldr	r2, [pc, #80]	@ (80048f4 <RCCEx_PLL2_Config+0x15c>)
 80048a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80048a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80048a8:	e005      	b.n	80048b6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80048aa:	4b12      	ldr	r3, [pc, #72]	@ (80048f4 <RCCEx_PLL2_Config+0x15c>)
 80048ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ae:	4a11      	ldr	r2, [pc, #68]	@ (80048f4 <RCCEx_PLL2_Config+0x15c>)
 80048b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80048b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80048b6:	4b0f      	ldr	r3, [pc, #60]	@ (80048f4 <RCCEx_PLL2_Config+0x15c>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a0e      	ldr	r2, [pc, #56]	@ (80048f4 <RCCEx_PLL2_Config+0x15c>)
 80048bc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80048c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048c2:	f7fc ff1f 	bl	8001704 <HAL_GetTick>
 80048c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80048c8:	e008      	b.n	80048dc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80048ca:	f7fc ff1b 	bl	8001704 <HAL_GetTick>
 80048ce:	4602      	mov	r2, r0
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d901      	bls.n	80048dc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e006      	b.n	80048ea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80048dc:	4b05      	ldr	r3, [pc, #20]	@ (80048f4 <RCCEx_PLL2_Config+0x15c>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d0f0      	beq.n	80048ca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80048e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3710      	adds	r7, #16
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	58024400 	.word	0x58024400
 80048f8:	ffff0007 	.word	0xffff0007

080048fc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004906:	2300      	movs	r3, #0
 8004908:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800490a:	4b53      	ldr	r3, [pc, #332]	@ (8004a58 <RCCEx_PLL3_Config+0x15c>)
 800490c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800490e:	f003 0303 	and.w	r3, r3, #3
 8004912:	2b03      	cmp	r3, #3
 8004914:	d101      	bne.n	800491a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e099      	b.n	8004a4e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800491a:	4b4f      	ldr	r3, [pc, #316]	@ (8004a58 <RCCEx_PLL3_Config+0x15c>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a4e      	ldr	r2, [pc, #312]	@ (8004a58 <RCCEx_PLL3_Config+0x15c>)
 8004920:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004924:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004926:	f7fc feed 	bl	8001704 <HAL_GetTick>
 800492a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800492c:	e008      	b.n	8004940 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800492e:	f7fc fee9 	bl	8001704 <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	2b02      	cmp	r3, #2
 800493a:	d901      	bls.n	8004940 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e086      	b.n	8004a4e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004940:	4b45      	ldr	r3, [pc, #276]	@ (8004a58 <RCCEx_PLL3_Config+0x15c>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d1f0      	bne.n	800492e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800494c:	4b42      	ldr	r3, [pc, #264]	@ (8004a58 <RCCEx_PLL3_Config+0x15c>)
 800494e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004950:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	051b      	lsls	r3, r3, #20
 800495a:	493f      	ldr	r1, [pc, #252]	@ (8004a58 <RCCEx_PLL3_Config+0x15c>)
 800495c:	4313      	orrs	r3, r2
 800495e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	3b01      	subs	r3, #1
 8004966:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	3b01      	subs	r3, #1
 8004970:	025b      	lsls	r3, r3, #9
 8004972:	b29b      	uxth	r3, r3
 8004974:	431a      	orrs	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	3b01      	subs	r3, #1
 800497c:	041b      	lsls	r3, r3, #16
 800497e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004982:	431a      	orrs	r2, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	691b      	ldr	r3, [r3, #16]
 8004988:	3b01      	subs	r3, #1
 800498a:	061b      	lsls	r3, r3, #24
 800498c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004990:	4931      	ldr	r1, [pc, #196]	@ (8004a58 <RCCEx_PLL3_Config+0x15c>)
 8004992:	4313      	orrs	r3, r2
 8004994:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004996:	4b30      	ldr	r3, [pc, #192]	@ (8004a58 <RCCEx_PLL3_Config+0x15c>)
 8004998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800499a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	695b      	ldr	r3, [r3, #20]
 80049a2:	492d      	ldr	r1, [pc, #180]	@ (8004a58 <RCCEx_PLL3_Config+0x15c>)
 80049a4:	4313      	orrs	r3, r2
 80049a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80049a8:	4b2b      	ldr	r3, [pc, #172]	@ (8004a58 <RCCEx_PLL3_Config+0x15c>)
 80049aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ac:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	699b      	ldr	r3, [r3, #24]
 80049b4:	4928      	ldr	r1, [pc, #160]	@ (8004a58 <RCCEx_PLL3_Config+0x15c>)
 80049b6:	4313      	orrs	r3, r2
 80049b8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80049ba:	4b27      	ldr	r3, [pc, #156]	@ (8004a58 <RCCEx_PLL3_Config+0x15c>)
 80049bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049be:	4a26      	ldr	r2, [pc, #152]	@ (8004a58 <RCCEx_PLL3_Config+0x15c>)
 80049c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80049c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80049c6:	4b24      	ldr	r3, [pc, #144]	@ (8004a58 <RCCEx_PLL3_Config+0x15c>)
 80049c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049ca:	4b24      	ldr	r3, [pc, #144]	@ (8004a5c <RCCEx_PLL3_Config+0x160>)
 80049cc:	4013      	ands	r3, r2
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	69d2      	ldr	r2, [r2, #28]
 80049d2:	00d2      	lsls	r2, r2, #3
 80049d4:	4920      	ldr	r1, [pc, #128]	@ (8004a58 <RCCEx_PLL3_Config+0x15c>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80049da:	4b1f      	ldr	r3, [pc, #124]	@ (8004a58 <RCCEx_PLL3_Config+0x15c>)
 80049dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049de:	4a1e      	ldr	r2, [pc, #120]	@ (8004a58 <RCCEx_PLL3_Config+0x15c>)
 80049e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d106      	bne.n	80049fa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80049ec:	4b1a      	ldr	r3, [pc, #104]	@ (8004a58 <RCCEx_PLL3_Config+0x15c>)
 80049ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049f0:	4a19      	ldr	r2, [pc, #100]	@ (8004a58 <RCCEx_PLL3_Config+0x15c>)
 80049f2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80049f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80049f8:	e00f      	b.n	8004a1a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d106      	bne.n	8004a0e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004a00:	4b15      	ldr	r3, [pc, #84]	@ (8004a58 <RCCEx_PLL3_Config+0x15c>)
 8004a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a04:	4a14      	ldr	r2, [pc, #80]	@ (8004a58 <RCCEx_PLL3_Config+0x15c>)
 8004a06:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004a0a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004a0c:	e005      	b.n	8004a1a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004a0e:	4b12      	ldr	r3, [pc, #72]	@ (8004a58 <RCCEx_PLL3_Config+0x15c>)
 8004a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a12:	4a11      	ldr	r2, [pc, #68]	@ (8004a58 <RCCEx_PLL3_Config+0x15c>)
 8004a14:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a18:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004a1a:	4b0f      	ldr	r3, [pc, #60]	@ (8004a58 <RCCEx_PLL3_Config+0x15c>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a0e      	ldr	r2, [pc, #56]	@ (8004a58 <RCCEx_PLL3_Config+0x15c>)
 8004a20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a26:	f7fc fe6d 	bl	8001704 <HAL_GetTick>
 8004a2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004a2c:	e008      	b.n	8004a40 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004a2e:	f7fc fe69 	bl	8001704 <HAL_GetTick>
 8004a32:	4602      	mov	r2, r0
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	d901      	bls.n	8004a40 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	e006      	b.n	8004a4e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004a40:	4b05      	ldr	r3, [pc, #20]	@ (8004a58 <RCCEx_PLL3_Config+0x15c>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d0f0      	beq.n	8004a2e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3710      	adds	r7, #16
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	58024400 	.word	0x58024400
 8004a5c:	ffff0007 	.word	0xffff0007

08004a60 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d101      	bne.n	8004a72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e10f      	b.n	8004c92 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a87      	ldr	r2, [pc, #540]	@ (8004c9c <HAL_SPI_Init+0x23c>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d00f      	beq.n	8004aa2 <HAL_SPI_Init+0x42>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a86      	ldr	r2, [pc, #536]	@ (8004ca0 <HAL_SPI_Init+0x240>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d00a      	beq.n	8004aa2 <HAL_SPI_Init+0x42>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a84      	ldr	r2, [pc, #528]	@ (8004ca4 <HAL_SPI_Init+0x244>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d005      	beq.n	8004aa2 <HAL_SPI_Init+0x42>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	2b0f      	cmp	r3, #15
 8004a9c:	d901      	bls.n	8004aa2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e0f7      	b.n	8004c92 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 fe2e 	bl	8005704 <SPI_GetPacketSize>
 8004aa8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a7b      	ldr	r2, [pc, #492]	@ (8004c9c <HAL_SPI_Init+0x23c>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d00c      	beq.n	8004ace <HAL_SPI_Init+0x6e>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a79      	ldr	r2, [pc, #484]	@ (8004ca0 <HAL_SPI_Init+0x240>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d007      	beq.n	8004ace <HAL_SPI_Init+0x6e>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a78      	ldr	r2, [pc, #480]	@ (8004ca4 <HAL_SPI_Init+0x244>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d002      	beq.n	8004ace <HAL_SPI_Init+0x6e>
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2b08      	cmp	r3, #8
 8004acc:	d811      	bhi.n	8004af2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004ad2:	4a72      	ldr	r2, [pc, #456]	@ (8004c9c <HAL_SPI_Init+0x23c>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d009      	beq.n	8004aec <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a70      	ldr	r2, [pc, #448]	@ (8004ca0 <HAL_SPI_Init+0x240>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d004      	beq.n	8004aec <HAL_SPI_Init+0x8c>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a6f      	ldr	r2, [pc, #444]	@ (8004ca4 <HAL_SPI_Init+0x244>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d104      	bne.n	8004af6 <HAL_SPI_Init+0x96>
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2b10      	cmp	r3, #16
 8004af0:	d901      	bls.n	8004af6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e0cd      	b.n	8004c92 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d106      	bne.n	8004b10 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f7fc fb0a 	bl	8001124 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2202      	movs	r2, #2
 8004b14:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f022 0201 	bic.w	r2, r2, #1
 8004b26:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8004b32:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004b3c:	d119      	bne.n	8004b72 <HAL_SPI_Init+0x112>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b46:	d103      	bne.n	8004b50 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d008      	beq.n	8004b62 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d10c      	bne.n	8004b72 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004b5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b60:	d107      	bne.n	8004b72 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004b70:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00f      	beq.n	8004b9e <HAL_SPI_Init+0x13e>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	2b06      	cmp	r3, #6
 8004b84:	d90b      	bls.n	8004b9e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	430a      	orrs	r2, r1
 8004b9a:	601a      	str	r2, [r3, #0]
 8004b9c:	e007      	b.n	8004bae <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004bac:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	69da      	ldr	r2, [r3, #28]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bb6:	431a      	orrs	r2, r3
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	431a      	orrs	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bc0:	ea42 0103 	orr.w	r1, r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	68da      	ldr	r2, [r3, #12]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	430a      	orrs	r2, r1
 8004bce:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bd8:	431a      	orrs	r2, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bde:	431a      	orrs	r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	699b      	ldr	r3, [r3, #24]
 8004be4:	431a      	orrs	r2, r3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	431a      	orrs	r2, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	695b      	ldr	r3, [r3, #20]
 8004bf0:	431a      	orrs	r2, r3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a1b      	ldr	r3, [r3, #32]
 8004bf6:	431a      	orrs	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	431a      	orrs	r2, r3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c02:	431a      	orrs	r2, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	431a      	orrs	r2, r3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c0e:	ea42 0103 	orr.w	r1, r2, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	430a      	orrs	r2, r1
 8004c1c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d113      	bne.n	8004c4e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c38:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004c4c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f022 0201 	bic.w	r2, r2, #1
 8004c5c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d00a      	beq.n	8004c80 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	430a      	orrs	r2, r1
 8004c7e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3710      	adds	r7, #16
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	40013000 	.word	0x40013000
 8004ca0:	40003800 	.word	0x40003800
 8004ca4:	40003c00 	.word	0x40003c00

08004ca8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b088      	sub	sp, #32
 8004cac:	af02      	add	r7, sp, #8
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	603b      	str	r3, [r7, #0]
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	3320      	adds	r3, #32
 8004cbe:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cc0:	f7fc fd20 	bl	8001704 <HAL_GetTick>
 8004cc4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d001      	beq.n	8004cd6 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8004cd2:	2302      	movs	r3, #2
 8004cd4:	e1d1      	b.n	800507a <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d002      	beq.n	8004ce2 <HAL_SPI_Transmit+0x3a>
 8004cdc:	88fb      	ldrh	r3, [r7, #6]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d101      	bne.n	8004ce6 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e1c9      	b.n	800507a <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d101      	bne.n	8004cf4 <HAL_SPI_Transmit+0x4c>
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	e1c2      	b.n	800507a <HAL_SPI_Transmit+0x3d2>
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2203      	movs	r2, #3
 8004d00:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	68ba      	ldr	r2, [r7, #8]
 8004d10:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	88fa      	ldrh	r2, [r7, #6]
 8004d16:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	88fa      	ldrh	r2, [r7, #6]
 8004d1e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2200      	movs	r2, #0
 8004d42:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8004d4c:	d108      	bne.n	8004d60 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d5c:	601a      	str	r2, [r3, #0]
 8004d5e:	e009      	b.n	8004d74 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004d72:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	685a      	ldr	r2, [r3, #4]
 8004d7a:	4b96      	ldr	r3, [pc, #600]	@ (8004fd4 <HAL_SPI_Transmit+0x32c>)
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	88f9      	ldrh	r1, [r7, #6]
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	6812      	ldr	r2, [r2, #0]
 8004d84:	430b      	orrs	r3, r1
 8004d86:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f042 0201 	orr.w	r2, r2, #1
 8004d96:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004da0:	d107      	bne.n	8004db2 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004db0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	2b0f      	cmp	r3, #15
 8004db8:	d947      	bls.n	8004e4a <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8004dba:	e03f      	b.n	8004e3c <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	695b      	ldr	r3, [r3, #20]
 8004dc2:	f003 0302 	and.w	r3, r3, #2
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d114      	bne.n	8004df4 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	6812      	ldr	r2, [r2, #0]
 8004dd4:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dda:	1d1a      	adds	r2, r3, #4
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	3b01      	subs	r3, #1
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004df2:	e023      	b.n	8004e3c <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004df4:	f7fc fc86 	bl	8001704 <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	683a      	ldr	r2, [r7, #0]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d803      	bhi.n	8004e0c <HAL_SPI_Transmit+0x164>
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e0a:	d102      	bne.n	8004e12 <HAL_SPI_Transmit+0x16a>
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d114      	bne.n	8004e3c <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004e12:	68f8      	ldr	r0, [r7, #12]
 8004e14:	f000 fba8 	bl	8005568 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e1e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e11e      	b.n	800507a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d1b9      	bne.n	8004dbc <HAL_SPI_Transmit+0x114>
 8004e48:	e0f1      	b.n	800502e <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	2b07      	cmp	r3, #7
 8004e50:	f240 80e6 	bls.w	8005020 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8004e54:	e05d      	b.n	8004f12 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	695b      	ldr	r3, [r3, #20]
 8004e5c:	f003 0302 	and.w	r3, r3, #2
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d132      	bne.n	8004eca <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d918      	bls.n	8004ea2 <HAL_SPI_Transmit+0x1fa>
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d014      	beq.n	8004ea2 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	6812      	ldr	r2, [r2, #0]
 8004e82:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e88:	1d1a      	adds	r2, r3, #4
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	3b02      	subs	r3, #2
 8004e98:	b29a      	uxth	r2, r3
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004ea0:	e037      	b.n	8004f12 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ea6:	881a      	ldrh	r2, [r3, #0]
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eb0:	1c9a      	adds	r2, r3, #2
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	3b01      	subs	r3, #1
 8004ec0:	b29a      	uxth	r2, r3
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004ec8:	e023      	b.n	8004f12 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004eca:	f7fc fc1b 	bl	8001704 <HAL_GetTick>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	683a      	ldr	r2, [r7, #0]
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d803      	bhi.n	8004ee2 <HAL_SPI_Transmit+0x23a>
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004ee0:	d102      	bne.n	8004ee8 <HAL_SPI_Transmit+0x240>
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d114      	bne.n	8004f12 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004ee8:	68f8      	ldr	r0, [r7, #12]
 8004eea:	f000 fb3d 	bl	8005568 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ef4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2201      	movs	r2, #1
 8004f02:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	e0b3      	b.n	800507a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d19b      	bne.n	8004e56 <HAL_SPI_Transmit+0x1ae>
 8004f1e:	e086      	b.n	800502e <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	695b      	ldr	r3, [r3, #20]
 8004f26:	f003 0302 	and.w	r3, r3, #2
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d154      	bne.n	8004fd8 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	2b03      	cmp	r3, #3
 8004f38:	d918      	bls.n	8004f6c <HAL_SPI_Transmit+0x2c4>
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f3e:	2b40      	cmp	r3, #64	@ 0x40
 8004f40:	d914      	bls.n	8004f6c <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	6812      	ldr	r2, [r2, #0]
 8004f4c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f52:	1d1a      	adds	r2, r3, #4
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	3b04      	subs	r3, #4
 8004f62:	b29a      	uxth	r2, r3
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004f6a:	e059      	b.n	8005020 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d917      	bls.n	8004fa8 <HAL_SPI_Transmit+0x300>
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d013      	beq.n	8004fa8 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f84:	881a      	ldrh	r2, [r3, #0]
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f8e:	1c9a      	adds	r2, r3, #2
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	3b02      	subs	r3, #2
 8004f9e:	b29a      	uxth	r2, r3
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004fa6:	e03b      	b.n	8005020 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	3320      	adds	r3, #32
 8004fb2:	7812      	ldrb	r2, [r2, #0]
 8004fb4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fba:	1c5a      	adds	r2, r3, #1
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	3b01      	subs	r3, #1
 8004fca:	b29a      	uxth	r2, r3
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004fd2:	e025      	b.n	8005020 <HAL_SPI_Transmit+0x378>
 8004fd4:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fd8:	f7fc fb94 	bl	8001704 <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	683a      	ldr	r2, [r7, #0]
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d803      	bhi.n	8004ff0 <HAL_SPI_Transmit+0x348>
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004fee:	d102      	bne.n	8004ff6 <HAL_SPI_Transmit+0x34e>
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d114      	bne.n	8005020 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004ff6:	68f8      	ldr	r0, [r7, #12]
 8004ff8:	f000 fab6 	bl	8005568 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005002:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e02c      	b.n	800507a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005026:	b29b      	uxth	r3, r3
 8005028:	2b00      	cmp	r3, #0
 800502a:	f47f af79 	bne.w	8004f20 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	9300      	str	r3, [sp, #0]
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	2200      	movs	r2, #0
 8005036:	2108      	movs	r1, #8
 8005038:	68f8      	ldr	r0, [r7, #12]
 800503a:	f000 fb35 	bl	80056a8 <SPI_WaitOnFlagUntilTimeout>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d007      	beq.n	8005054 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800504a:	f043 0220 	orr.w	r2, r3, #32
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005054:	68f8      	ldr	r0, [r7, #12]
 8005056:	f000 fa87 	bl	8005568 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2201      	movs	r2, #1
 800505e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005070:	2b00      	cmp	r3, #0
 8005072:	d001      	beq.n	8005078 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e000      	b.n	800507a <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8005078:	2300      	movs	r3, #0
  }
}
 800507a:	4618      	mov	r0, r3
 800507c:	3718      	adds	r7, #24
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop

08005084 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b088      	sub	sp, #32
 8005088:	af00      	add	r7, sp, #0
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	60b9      	str	r1, [r7, #8]
 800508e:	603b      	str	r3, [r7, #0]
 8005090:	4613      	mov	r3, r2
 8005092:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005098:	095b      	lsrs	r3, r3, #5
 800509a:	b29b      	uxth	r3, r3
 800509c:	3301      	adds	r3, #1
 800509e:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	3330      	adds	r3, #48	@ 0x30
 80050a6:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80050a8:	f7fc fb2c 	bl	8001704 <HAL_GetTick>
 80050ac:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d001      	beq.n	80050be <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 80050ba:	2302      	movs	r3, #2
 80050bc:	e250      	b.n	8005560 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d002      	beq.n	80050ca <HAL_SPI_Receive+0x46>
 80050c4:	88fb      	ldrh	r3, [r7, #6]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d101      	bne.n	80050ce <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e248      	b.n	8005560 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d101      	bne.n	80050dc <HAL_SPI_Receive+0x58>
 80050d8:	2302      	movs	r3, #2
 80050da:	e241      	b.n	8005560 <HAL_SPI_Receive+0x4dc>
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2204      	movs	r2, #4
 80050e8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	68ba      	ldr	r2, [r7, #8]
 80050f8:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	88fa      	ldrh	r2, [r7, #6]
 80050fe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	88fa      	ldrh	r2, [r7, #6]
 8005106:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2200      	movs	r2, #0
 800510e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2200      	movs	r2, #0
 8005114:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2200      	movs	r2, #0
 800511c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2200      	movs	r2, #0
 8005124:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2200      	movs	r2, #0
 800512a:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8005134:	d108      	bne.n	8005148 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005144:	601a      	str	r2, [r3, #0]
 8005146:	e009      	b.n	800515c <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800515a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	685a      	ldr	r2, [r3, #4]
 8005162:	4b95      	ldr	r3, [pc, #596]	@ (80053b8 <HAL_SPI_Receive+0x334>)
 8005164:	4013      	ands	r3, r2
 8005166:	88f9      	ldrh	r1, [r7, #6]
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	6812      	ldr	r2, [r2, #0]
 800516c:	430b      	orrs	r3, r1
 800516e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f042 0201 	orr.w	r2, r2, #1
 800517e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005188:	d107      	bne.n	800519a <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005198:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	2b0f      	cmp	r3, #15
 80051a0:	d96c      	bls.n	800527c <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80051a2:	e064      	b.n	800526e <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	695b      	ldr	r3, [r3, #20]
 80051aa:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	695b      	ldr	r3, [r3, #20]
 80051b2:	f003 0301 	and.w	r3, r3, #1
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d114      	bne.n	80051e4 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80051c2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80051c4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80051ca:	1d1a      	adds	r2, r3, #4
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	3b01      	subs	r3, #1
 80051da:	b29a      	uxth	r2, r3
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80051e2:	e044      	b.n	800526e <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	8bfa      	ldrh	r2, [r7, #30]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d919      	bls.n	8005226 <HAL_SPI_Receive+0x1a2>
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d014      	beq.n	8005226 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005204:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005206:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800520c:	1d1a      	adds	r2, r3, #4
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005218:	b29b      	uxth	r3, r3
 800521a:	3b01      	subs	r3, #1
 800521c:	b29a      	uxth	r2, r3
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005224:	e023      	b.n	800526e <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005226:	f7fc fa6d 	bl	8001704 <HAL_GetTick>
 800522a:	4602      	mov	r2, r0
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	1ad3      	subs	r3, r2, r3
 8005230:	683a      	ldr	r2, [r7, #0]
 8005232:	429a      	cmp	r2, r3
 8005234:	d803      	bhi.n	800523e <HAL_SPI_Receive+0x1ba>
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800523c:	d102      	bne.n	8005244 <HAL_SPI_Receive+0x1c0>
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d114      	bne.n	800526e <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005244:	68f8      	ldr	r0, [r7, #12]
 8005246:	f000 f98f 	bl	8005568 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005250:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2201      	movs	r2, #1
 800525e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800526a:	2303      	movs	r3, #3
 800526c:	e178      	b.n	8005560 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005274:	b29b      	uxth	r3, r3
 8005276:	2b00      	cmp	r3, #0
 8005278:	d194      	bne.n	80051a4 <HAL_SPI_Receive+0x120>
 800527a:	e15e      	b.n	800553a <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	2b07      	cmp	r3, #7
 8005282:	f240 8153 	bls.w	800552c <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8005286:	e08f      	b.n	80053a8 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	695b      	ldr	r3, [r3, #20]
 800528e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	695b      	ldr	r3, [r3, #20]
 8005296:	f003 0301 	and.w	r3, r3, #1
 800529a:	2b01      	cmp	r3, #1
 800529c:	d114      	bne.n	80052c8 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052a2:	69ba      	ldr	r2, [r7, #24]
 80052a4:	8812      	ldrh	r2, [r2, #0]
 80052a6:	b292      	uxth	r2, r2
 80052a8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052ae:	1c9a      	adds	r2, r3, #2
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	3b01      	subs	r3, #1
 80052be:	b29a      	uxth	r2, r3
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80052c6:	e06f      	b.n	80053a8 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	8bfa      	ldrh	r2, [r7, #30]
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d924      	bls.n	8005320 <HAL_SPI_Receive+0x29c>
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d01f      	beq.n	8005320 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052e4:	69ba      	ldr	r2, [r7, #24]
 80052e6:	8812      	ldrh	r2, [r2, #0]
 80052e8:	b292      	uxth	r2, r2
 80052ea:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052f0:	1c9a      	adds	r2, r3, #2
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052fa:	69ba      	ldr	r2, [r7, #24]
 80052fc:	8812      	ldrh	r2, [r2, #0]
 80052fe:	b292      	uxth	r2, r2
 8005300:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005306:	1c9a      	adds	r2, r3, #2
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005312:	b29b      	uxth	r3, r3
 8005314:	3b02      	subs	r3, #2
 8005316:	b29a      	uxth	r2, r3
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800531e:	e043      	b.n	80053a8 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005326:	b29b      	uxth	r3, r3
 8005328:	2b01      	cmp	r3, #1
 800532a:	d119      	bne.n	8005360 <HAL_SPI_Receive+0x2dc>
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005332:	2b00      	cmp	r3, #0
 8005334:	d014      	beq.n	8005360 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800533a:	69ba      	ldr	r2, [r7, #24]
 800533c:	8812      	ldrh	r2, [r2, #0]
 800533e:	b292      	uxth	r2, r2
 8005340:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005346:	1c9a      	adds	r2, r3, #2
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005352:	b29b      	uxth	r3, r3
 8005354:	3b01      	subs	r3, #1
 8005356:	b29a      	uxth	r2, r3
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800535e:	e023      	b.n	80053a8 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005360:	f7fc f9d0 	bl	8001704 <HAL_GetTick>
 8005364:	4602      	mov	r2, r0
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	683a      	ldr	r2, [r7, #0]
 800536c:	429a      	cmp	r2, r3
 800536e:	d803      	bhi.n	8005378 <HAL_SPI_Receive+0x2f4>
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005376:	d102      	bne.n	800537e <HAL_SPI_Receive+0x2fa>
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d114      	bne.n	80053a8 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800537e:	68f8      	ldr	r0, [r7, #12]
 8005380:	f000 f8f2 	bl	8005568 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800538a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80053a4:	2303      	movs	r3, #3
 80053a6:	e0db      	b.n	8005560 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	f47f af69 	bne.w	8005288 <HAL_SPI_Receive+0x204>
 80053b6:	e0c0      	b.n	800553a <HAL_SPI_Receive+0x4b6>
 80053b8:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	695b      	ldr	r3, [r3, #20]
 80053c2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	695b      	ldr	r3, [r3, #20]
 80053ca:	f003 0301 	and.w	r3, r3, #1
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d117      	bne.n	8005402 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80053de:	7812      	ldrb	r2, [r2, #0]
 80053e0:	b2d2      	uxtb	r2, r2
 80053e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80053e8:	1c5a      	adds	r2, r3, #1
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	3b01      	subs	r3, #1
 80053f8:	b29a      	uxth	r2, r3
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005400:	e094      	b.n	800552c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005408:	b29b      	uxth	r3, r3
 800540a:	8bfa      	ldrh	r2, [r7, #30]
 800540c:	429a      	cmp	r2, r3
 800540e:	d946      	bls.n	800549e <HAL_SPI_Receive+0x41a>
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005416:	2b00      	cmp	r3, #0
 8005418:	d041      	beq.n	800549e <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005426:	7812      	ldrb	r2, [r2, #0]
 8005428:	b2d2      	uxtb	r2, r2
 800542a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005430:	1c5a      	adds	r2, r3, #1
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005442:	7812      	ldrb	r2, [r2, #0]
 8005444:	b2d2      	uxtb	r2, r2
 8005446:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800544c:	1c5a      	adds	r2, r3, #1
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800545e:	7812      	ldrb	r2, [r2, #0]
 8005460:	b2d2      	uxtb	r2, r2
 8005462:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005468:	1c5a      	adds	r2, r3, #1
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800547a:	7812      	ldrb	r2, [r2, #0]
 800547c:	b2d2      	uxtb	r2, r2
 800547e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005484:	1c5a      	adds	r2, r3, #1
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005490:	b29b      	uxth	r3, r3
 8005492:	3b04      	subs	r3, #4
 8005494:	b29a      	uxth	r2, r3
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800549c:	e046      	b.n	800552c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	2b03      	cmp	r3, #3
 80054a8:	d81c      	bhi.n	80054e4 <HAL_SPI_Receive+0x460>
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d017      	beq.n	80054e4 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80054c0:	7812      	ldrb	r2, [r2, #0]
 80054c2:	b2d2      	uxtb	r2, r2
 80054c4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80054ca:	1c5a      	adds	r2, r3, #1
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	3b01      	subs	r3, #1
 80054da:	b29a      	uxth	r2, r3
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80054e2:	e023      	b.n	800552c <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054e4:	f7fc f90e 	bl	8001704 <HAL_GetTick>
 80054e8:	4602      	mov	r2, r0
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	683a      	ldr	r2, [r7, #0]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d803      	bhi.n	80054fc <HAL_SPI_Receive+0x478>
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80054fa:	d102      	bne.n	8005502 <HAL_SPI_Receive+0x47e>
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d114      	bne.n	800552c <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005502:	68f8      	ldr	r0, [r7, #12]
 8005504:	f000 f830 	bl	8005568 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800550e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2200      	movs	r2, #0
 8005524:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005528:	2303      	movs	r3, #3
 800552a:	e019      	b.n	8005560 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005532:	b29b      	uxth	r3, r3
 8005534:	2b00      	cmp	r3, #0
 8005536:	f47f af41 	bne.w	80053bc <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800553a:	68f8      	ldr	r0, [r7, #12]
 800553c:	f000 f814 	bl	8005568 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2200      	movs	r2, #0
 800554c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005556:	2b00      	cmp	r3, #0
 8005558:	d001      	beq.n	800555e <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	e000      	b.n	8005560 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800555e:	2300      	movs	r3, #0
  }
}
 8005560:	4618      	mov	r0, r3
 8005562:	3720      	adds	r7, #32
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}

08005568 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8005568:	b480      	push	{r7}
 800556a:	b085      	sub	sp, #20
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	695b      	ldr	r3, [r3, #20]
 8005576:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	699a      	ldr	r2, [r3, #24]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f042 0208 	orr.w	r2, r2, #8
 8005586:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	699a      	ldr	r2, [r3, #24]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f042 0210 	orr.w	r2, r2, #16
 8005596:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f022 0201 	bic.w	r2, r2, #1
 80055a6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	6919      	ldr	r1, [r3, #16]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	4b3c      	ldr	r3, [pc, #240]	@ (80056a4 <SPI_CloseTransfer+0x13c>)
 80055b4:	400b      	ands	r3, r1
 80055b6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	689a      	ldr	r2, [r3, #8]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80055c6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	2b04      	cmp	r3, #4
 80055d2:	d014      	beq.n	80055fe <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f003 0320 	and.w	r3, r3, #32
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d00f      	beq.n	80055fe <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055e4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	699a      	ldr	r2, [r3, #24]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f042 0220 	orr.w	r2, r2, #32
 80055fc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005604:	b2db      	uxtb	r3, r3
 8005606:	2b03      	cmp	r3, #3
 8005608:	d014      	beq.n	8005634 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005610:	2b00      	cmp	r3, #0
 8005612:	d00f      	beq.n	8005634 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800561a:	f043 0204 	orr.w	r2, r3, #4
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	699a      	ldr	r2, [r3, #24]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005632:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800563a:	2b00      	cmp	r3, #0
 800563c:	d00f      	beq.n	800565e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005644:	f043 0201 	orr.w	r2, r3, #1
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	699a      	ldr	r2, [r3, #24]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800565c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005664:	2b00      	cmp	r3, #0
 8005666:	d00f      	beq.n	8005688 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800566e:	f043 0208 	orr.w	r2, r3, #8
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	699a      	ldr	r2, [r3, #24]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005686:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8005698:	bf00      	nop
 800569a:	3714      	adds	r7, #20
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr
 80056a4:	fffffc90 	.word	0xfffffc90

080056a8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	603b      	str	r3, [r7, #0]
 80056b4:	4613      	mov	r3, r2
 80056b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80056b8:	e010      	b.n	80056dc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056ba:	f7fc f823 	bl	8001704 <HAL_GetTick>
 80056be:	4602      	mov	r2, r0
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	683a      	ldr	r2, [r7, #0]
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d803      	bhi.n	80056d2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80056d0:	d102      	bne.n	80056d8 <SPI_WaitOnFlagUntilTimeout+0x30>
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d101      	bne.n	80056dc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80056d8:	2303      	movs	r3, #3
 80056da:	e00f      	b.n	80056fc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	695a      	ldr	r2, [r3, #20]
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	4013      	ands	r3, r2
 80056e6:	68ba      	ldr	r2, [r7, #8]
 80056e8:	429a      	cmp	r2, r3
 80056ea:	bf0c      	ite	eq
 80056ec:	2301      	moveq	r3, #1
 80056ee:	2300      	movne	r3, #0
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	461a      	mov	r2, r3
 80056f4:	79fb      	ldrb	r3, [r7, #7]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d0df      	beq.n	80056ba <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80056fa:	2300      	movs	r3, #0
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3710      	adds	r7, #16
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}

08005704 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8005704:	b480      	push	{r7}
 8005706:	b085      	sub	sp, #20
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005710:	095b      	lsrs	r3, r3, #5
 8005712:	3301      	adds	r3, #1
 8005714:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	3301      	adds	r3, #1
 800571c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	3307      	adds	r3, #7
 8005722:	08db      	lsrs	r3, r3, #3
 8005724:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	fb02 f303 	mul.w	r3, r2, r3
}
 800572e:	4618      	mov	r0, r3
 8005730:	3714      	adds	r7, #20
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr

0800573a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800573a:	b580      	push	{r7, lr}
 800573c:	b082      	sub	sp, #8
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d101      	bne.n	800574c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	e042      	b.n	80057d2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005752:	2b00      	cmp	r3, #0
 8005754:	d106      	bne.n	8005764 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f7fb fd96 	bl	8001290 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2224      	movs	r2, #36	@ 0x24
 8005768:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f022 0201 	bic.w	r2, r2, #1
 800577a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005780:	2b00      	cmp	r3, #0
 8005782:	d002      	beq.n	800578a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f000 fe1f 	bl	80063c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 f8b4 	bl	80058f8 <UART_SetConfig>
 8005790:	4603      	mov	r3, r0
 8005792:	2b01      	cmp	r3, #1
 8005794:	d101      	bne.n	800579a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e01b      	b.n	80057d2 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	685a      	ldr	r2, [r3, #4]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80057a8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	689a      	ldr	r2, [r3, #8]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80057b8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f042 0201 	orr.w	r2, r2, #1
 80057c8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 fe9e 	bl	800650c <UART_CheckIdleState>
 80057d0:	4603      	mov	r3, r0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3708      	adds	r7, #8
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}

080057da <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057da:	b580      	push	{r7, lr}
 80057dc:	b08a      	sub	sp, #40	@ 0x28
 80057de:	af02      	add	r7, sp, #8
 80057e0:	60f8      	str	r0, [r7, #12]
 80057e2:	60b9      	str	r1, [r7, #8]
 80057e4:	603b      	str	r3, [r7, #0]
 80057e6:	4613      	mov	r3, r2
 80057e8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057f0:	2b20      	cmp	r3, #32
 80057f2:	d17b      	bne.n	80058ec <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d002      	beq.n	8005800 <HAL_UART_Transmit+0x26>
 80057fa:	88fb      	ldrh	r3, [r7, #6]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d101      	bne.n	8005804 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	e074      	b.n	80058ee <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2200      	movs	r2, #0
 8005808:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2221      	movs	r2, #33	@ 0x21
 8005810:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005814:	f7fb ff76 	bl	8001704 <HAL_GetTick>
 8005818:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	88fa      	ldrh	r2, [r7, #6]
 800581e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	88fa      	ldrh	r2, [r7, #6]
 8005826:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005832:	d108      	bne.n	8005846 <HAL_UART_Transmit+0x6c>
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	691b      	ldr	r3, [r3, #16]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d104      	bne.n	8005846 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800583c:	2300      	movs	r3, #0
 800583e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	61bb      	str	r3, [r7, #24]
 8005844:	e003      	b.n	800584e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800584a:	2300      	movs	r3, #0
 800584c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800584e:	e030      	b.n	80058b2 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	9300      	str	r3, [sp, #0]
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	2200      	movs	r2, #0
 8005858:	2180      	movs	r1, #128	@ 0x80
 800585a:	68f8      	ldr	r0, [r7, #12]
 800585c:	f000 ff00 	bl	8006660 <UART_WaitOnFlagUntilTimeout>
 8005860:	4603      	mov	r3, r0
 8005862:	2b00      	cmp	r3, #0
 8005864:	d005      	beq.n	8005872 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2220      	movs	r2, #32
 800586a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	e03d      	b.n	80058ee <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d10b      	bne.n	8005890 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	881b      	ldrh	r3, [r3, #0]
 800587c:	461a      	mov	r2, r3
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005886:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005888:	69bb      	ldr	r3, [r7, #24]
 800588a:	3302      	adds	r3, #2
 800588c:	61bb      	str	r3, [r7, #24]
 800588e:	e007      	b.n	80058a0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	781a      	ldrb	r2, [r3, #0]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	3301      	adds	r3, #1
 800589e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	3b01      	subs	r3, #1
 80058aa:	b29a      	uxth	r2, r3
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d1c8      	bne.n	8005850 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	9300      	str	r3, [sp, #0]
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	2200      	movs	r2, #0
 80058c6:	2140      	movs	r1, #64	@ 0x40
 80058c8:	68f8      	ldr	r0, [r7, #12]
 80058ca:	f000 fec9 	bl	8006660 <UART_WaitOnFlagUntilTimeout>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d005      	beq.n	80058e0 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2220      	movs	r2, #32
 80058d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80058dc:	2303      	movs	r3, #3
 80058de:	e006      	b.n	80058ee <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2220      	movs	r2, #32
 80058e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80058e8:	2300      	movs	r3, #0
 80058ea:	e000      	b.n	80058ee <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80058ec:	2302      	movs	r3, #2
  }
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3720      	adds	r7, #32
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
	...

080058f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058fc:	b092      	sub	sp, #72	@ 0x48
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005902:	2300      	movs	r3, #0
 8005904:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	689a      	ldr	r2, [r3, #8]
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	431a      	orrs	r2, r3
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	695b      	ldr	r3, [r3, #20]
 8005916:	431a      	orrs	r2, r3
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	69db      	ldr	r3, [r3, #28]
 800591c:	4313      	orrs	r3, r2
 800591e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	4bbe      	ldr	r3, [pc, #760]	@ (8005c20 <UART_SetConfig+0x328>)
 8005928:	4013      	ands	r3, r2
 800592a:	697a      	ldr	r2, [r7, #20]
 800592c:	6812      	ldr	r2, [r2, #0]
 800592e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005930:	430b      	orrs	r3, r1
 8005932:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	68da      	ldr	r2, [r3, #12]
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	430a      	orrs	r2, r1
 8005948:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	699b      	ldr	r3, [r3, #24]
 800594e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4ab3      	ldr	r2, [pc, #716]	@ (8005c24 <UART_SetConfig+0x32c>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d004      	beq.n	8005964 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	6a1b      	ldr	r3, [r3, #32]
 800595e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005960:	4313      	orrs	r3, r2
 8005962:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	689a      	ldr	r2, [r3, #8]
 800596a:	4baf      	ldr	r3, [pc, #700]	@ (8005c28 <UART_SetConfig+0x330>)
 800596c:	4013      	ands	r3, r2
 800596e:	697a      	ldr	r2, [r7, #20]
 8005970:	6812      	ldr	r2, [r2, #0]
 8005972:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005974:	430b      	orrs	r3, r1
 8005976:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800597e:	f023 010f 	bic.w	r1, r3, #15
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	430a      	orrs	r2, r1
 800598c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4aa6      	ldr	r2, [pc, #664]	@ (8005c2c <UART_SetConfig+0x334>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d177      	bne.n	8005a88 <UART_SetConfig+0x190>
 8005998:	4ba5      	ldr	r3, [pc, #660]	@ (8005c30 <UART_SetConfig+0x338>)
 800599a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800599c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80059a0:	2b28      	cmp	r3, #40	@ 0x28
 80059a2:	d86d      	bhi.n	8005a80 <UART_SetConfig+0x188>
 80059a4:	a201      	add	r2, pc, #4	@ (adr r2, 80059ac <UART_SetConfig+0xb4>)
 80059a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059aa:	bf00      	nop
 80059ac:	08005a51 	.word	0x08005a51
 80059b0:	08005a81 	.word	0x08005a81
 80059b4:	08005a81 	.word	0x08005a81
 80059b8:	08005a81 	.word	0x08005a81
 80059bc:	08005a81 	.word	0x08005a81
 80059c0:	08005a81 	.word	0x08005a81
 80059c4:	08005a81 	.word	0x08005a81
 80059c8:	08005a81 	.word	0x08005a81
 80059cc:	08005a59 	.word	0x08005a59
 80059d0:	08005a81 	.word	0x08005a81
 80059d4:	08005a81 	.word	0x08005a81
 80059d8:	08005a81 	.word	0x08005a81
 80059dc:	08005a81 	.word	0x08005a81
 80059e0:	08005a81 	.word	0x08005a81
 80059e4:	08005a81 	.word	0x08005a81
 80059e8:	08005a81 	.word	0x08005a81
 80059ec:	08005a61 	.word	0x08005a61
 80059f0:	08005a81 	.word	0x08005a81
 80059f4:	08005a81 	.word	0x08005a81
 80059f8:	08005a81 	.word	0x08005a81
 80059fc:	08005a81 	.word	0x08005a81
 8005a00:	08005a81 	.word	0x08005a81
 8005a04:	08005a81 	.word	0x08005a81
 8005a08:	08005a81 	.word	0x08005a81
 8005a0c:	08005a69 	.word	0x08005a69
 8005a10:	08005a81 	.word	0x08005a81
 8005a14:	08005a81 	.word	0x08005a81
 8005a18:	08005a81 	.word	0x08005a81
 8005a1c:	08005a81 	.word	0x08005a81
 8005a20:	08005a81 	.word	0x08005a81
 8005a24:	08005a81 	.word	0x08005a81
 8005a28:	08005a81 	.word	0x08005a81
 8005a2c:	08005a71 	.word	0x08005a71
 8005a30:	08005a81 	.word	0x08005a81
 8005a34:	08005a81 	.word	0x08005a81
 8005a38:	08005a81 	.word	0x08005a81
 8005a3c:	08005a81 	.word	0x08005a81
 8005a40:	08005a81 	.word	0x08005a81
 8005a44:	08005a81 	.word	0x08005a81
 8005a48:	08005a81 	.word	0x08005a81
 8005a4c:	08005a79 	.word	0x08005a79
 8005a50:	2301      	movs	r3, #1
 8005a52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a56:	e222      	b.n	8005e9e <UART_SetConfig+0x5a6>
 8005a58:	2304      	movs	r3, #4
 8005a5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a5e:	e21e      	b.n	8005e9e <UART_SetConfig+0x5a6>
 8005a60:	2308      	movs	r3, #8
 8005a62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a66:	e21a      	b.n	8005e9e <UART_SetConfig+0x5a6>
 8005a68:	2310      	movs	r3, #16
 8005a6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a6e:	e216      	b.n	8005e9e <UART_SetConfig+0x5a6>
 8005a70:	2320      	movs	r3, #32
 8005a72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a76:	e212      	b.n	8005e9e <UART_SetConfig+0x5a6>
 8005a78:	2340      	movs	r3, #64	@ 0x40
 8005a7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a7e:	e20e      	b.n	8005e9e <UART_SetConfig+0x5a6>
 8005a80:	2380      	movs	r3, #128	@ 0x80
 8005a82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a86:	e20a      	b.n	8005e9e <UART_SetConfig+0x5a6>
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a69      	ldr	r2, [pc, #420]	@ (8005c34 <UART_SetConfig+0x33c>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d130      	bne.n	8005af4 <UART_SetConfig+0x1fc>
 8005a92:	4b67      	ldr	r3, [pc, #412]	@ (8005c30 <UART_SetConfig+0x338>)
 8005a94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a96:	f003 0307 	and.w	r3, r3, #7
 8005a9a:	2b05      	cmp	r3, #5
 8005a9c:	d826      	bhi.n	8005aec <UART_SetConfig+0x1f4>
 8005a9e:	a201      	add	r2, pc, #4	@ (adr r2, 8005aa4 <UART_SetConfig+0x1ac>)
 8005aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa4:	08005abd 	.word	0x08005abd
 8005aa8:	08005ac5 	.word	0x08005ac5
 8005aac:	08005acd 	.word	0x08005acd
 8005ab0:	08005ad5 	.word	0x08005ad5
 8005ab4:	08005add 	.word	0x08005add
 8005ab8:	08005ae5 	.word	0x08005ae5
 8005abc:	2300      	movs	r3, #0
 8005abe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ac2:	e1ec      	b.n	8005e9e <UART_SetConfig+0x5a6>
 8005ac4:	2304      	movs	r3, #4
 8005ac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aca:	e1e8      	b.n	8005e9e <UART_SetConfig+0x5a6>
 8005acc:	2308      	movs	r3, #8
 8005ace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ad2:	e1e4      	b.n	8005e9e <UART_SetConfig+0x5a6>
 8005ad4:	2310      	movs	r3, #16
 8005ad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ada:	e1e0      	b.n	8005e9e <UART_SetConfig+0x5a6>
 8005adc:	2320      	movs	r3, #32
 8005ade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ae2:	e1dc      	b.n	8005e9e <UART_SetConfig+0x5a6>
 8005ae4:	2340      	movs	r3, #64	@ 0x40
 8005ae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aea:	e1d8      	b.n	8005e9e <UART_SetConfig+0x5a6>
 8005aec:	2380      	movs	r3, #128	@ 0x80
 8005aee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005af2:	e1d4      	b.n	8005e9e <UART_SetConfig+0x5a6>
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a4f      	ldr	r2, [pc, #316]	@ (8005c38 <UART_SetConfig+0x340>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d130      	bne.n	8005b60 <UART_SetConfig+0x268>
 8005afe:	4b4c      	ldr	r3, [pc, #304]	@ (8005c30 <UART_SetConfig+0x338>)
 8005b00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b02:	f003 0307 	and.w	r3, r3, #7
 8005b06:	2b05      	cmp	r3, #5
 8005b08:	d826      	bhi.n	8005b58 <UART_SetConfig+0x260>
 8005b0a:	a201      	add	r2, pc, #4	@ (adr r2, 8005b10 <UART_SetConfig+0x218>)
 8005b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b10:	08005b29 	.word	0x08005b29
 8005b14:	08005b31 	.word	0x08005b31
 8005b18:	08005b39 	.word	0x08005b39
 8005b1c:	08005b41 	.word	0x08005b41
 8005b20:	08005b49 	.word	0x08005b49
 8005b24:	08005b51 	.word	0x08005b51
 8005b28:	2300      	movs	r3, #0
 8005b2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b2e:	e1b6      	b.n	8005e9e <UART_SetConfig+0x5a6>
 8005b30:	2304      	movs	r3, #4
 8005b32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b36:	e1b2      	b.n	8005e9e <UART_SetConfig+0x5a6>
 8005b38:	2308      	movs	r3, #8
 8005b3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b3e:	e1ae      	b.n	8005e9e <UART_SetConfig+0x5a6>
 8005b40:	2310      	movs	r3, #16
 8005b42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b46:	e1aa      	b.n	8005e9e <UART_SetConfig+0x5a6>
 8005b48:	2320      	movs	r3, #32
 8005b4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b4e:	e1a6      	b.n	8005e9e <UART_SetConfig+0x5a6>
 8005b50:	2340      	movs	r3, #64	@ 0x40
 8005b52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b56:	e1a2      	b.n	8005e9e <UART_SetConfig+0x5a6>
 8005b58:	2380      	movs	r3, #128	@ 0x80
 8005b5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b5e:	e19e      	b.n	8005e9e <UART_SetConfig+0x5a6>
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a35      	ldr	r2, [pc, #212]	@ (8005c3c <UART_SetConfig+0x344>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d130      	bne.n	8005bcc <UART_SetConfig+0x2d4>
 8005b6a:	4b31      	ldr	r3, [pc, #196]	@ (8005c30 <UART_SetConfig+0x338>)
 8005b6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b6e:	f003 0307 	and.w	r3, r3, #7
 8005b72:	2b05      	cmp	r3, #5
 8005b74:	d826      	bhi.n	8005bc4 <UART_SetConfig+0x2cc>
 8005b76:	a201      	add	r2, pc, #4	@ (adr r2, 8005b7c <UART_SetConfig+0x284>)
 8005b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b7c:	08005b95 	.word	0x08005b95
 8005b80:	08005b9d 	.word	0x08005b9d
 8005b84:	08005ba5 	.word	0x08005ba5
 8005b88:	08005bad 	.word	0x08005bad
 8005b8c:	08005bb5 	.word	0x08005bb5
 8005b90:	08005bbd 	.word	0x08005bbd
 8005b94:	2300      	movs	r3, #0
 8005b96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b9a:	e180      	b.n	8005e9e <UART_SetConfig+0x5a6>
 8005b9c:	2304      	movs	r3, #4
 8005b9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ba2:	e17c      	b.n	8005e9e <UART_SetConfig+0x5a6>
 8005ba4:	2308      	movs	r3, #8
 8005ba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005baa:	e178      	b.n	8005e9e <UART_SetConfig+0x5a6>
 8005bac:	2310      	movs	r3, #16
 8005bae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bb2:	e174      	b.n	8005e9e <UART_SetConfig+0x5a6>
 8005bb4:	2320      	movs	r3, #32
 8005bb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bba:	e170      	b.n	8005e9e <UART_SetConfig+0x5a6>
 8005bbc:	2340      	movs	r3, #64	@ 0x40
 8005bbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bc2:	e16c      	b.n	8005e9e <UART_SetConfig+0x5a6>
 8005bc4:	2380      	movs	r3, #128	@ 0x80
 8005bc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bca:	e168      	b.n	8005e9e <UART_SetConfig+0x5a6>
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a1b      	ldr	r2, [pc, #108]	@ (8005c40 <UART_SetConfig+0x348>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d142      	bne.n	8005c5c <UART_SetConfig+0x364>
 8005bd6:	4b16      	ldr	r3, [pc, #88]	@ (8005c30 <UART_SetConfig+0x338>)
 8005bd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bda:	f003 0307 	and.w	r3, r3, #7
 8005bde:	2b05      	cmp	r3, #5
 8005be0:	d838      	bhi.n	8005c54 <UART_SetConfig+0x35c>
 8005be2:	a201      	add	r2, pc, #4	@ (adr r2, 8005be8 <UART_SetConfig+0x2f0>)
 8005be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be8:	08005c01 	.word	0x08005c01
 8005bec:	08005c09 	.word	0x08005c09
 8005bf0:	08005c11 	.word	0x08005c11
 8005bf4:	08005c19 	.word	0x08005c19
 8005bf8:	08005c45 	.word	0x08005c45
 8005bfc:	08005c4d 	.word	0x08005c4d
 8005c00:	2300      	movs	r3, #0
 8005c02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c06:	e14a      	b.n	8005e9e <UART_SetConfig+0x5a6>
 8005c08:	2304      	movs	r3, #4
 8005c0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c0e:	e146      	b.n	8005e9e <UART_SetConfig+0x5a6>
 8005c10:	2308      	movs	r3, #8
 8005c12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c16:	e142      	b.n	8005e9e <UART_SetConfig+0x5a6>
 8005c18:	2310      	movs	r3, #16
 8005c1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c1e:	e13e      	b.n	8005e9e <UART_SetConfig+0x5a6>
 8005c20:	cfff69f3 	.word	0xcfff69f3
 8005c24:	58000c00 	.word	0x58000c00
 8005c28:	11fff4ff 	.word	0x11fff4ff
 8005c2c:	40011000 	.word	0x40011000
 8005c30:	58024400 	.word	0x58024400
 8005c34:	40004400 	.word	0x40004400
 8005c38:	40004800 	.word	0x40004800
 8005c3c:	40004c00 	.word	0x40004c00
 8005c40:	40005000 	.word	0x40005000
 8005c44:	2320      	movs	r3, #32
 8005c46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c4a:	e128      	b.n	8005e9e <UART_SetConfig+0x5a6>
 8005c4c:	2340      	movs	r3, #64	@ 0x40
 8005c4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c52:	e124      	b.n	8005e9e <UART_SetConfig+0x5a6>
 8005c54:	2380      	movs	r3, #128	@ 0x80
 8005c56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c5a:	e120      	b.n	8005e9e <UART_SetConfig+0x5a6>
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4acb      	ldr	r2, [pc, #812]	@ (8005f90 <UART_SetConfig+0x698>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d176      	bne.n	8005d54 <UART_SetConfig+0x45c>
 8005c66:	4bcb      	ldr	r3, [pc, #812]	@ (8005f94 <UART_SetConfig+0x69c>)
 8005c68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c6a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c6e:	2b28      	cmp	r3, #40	@ 0x28
 8005c70:	d86c      	bhi.n	8005d4c <UART_SetConfig+0x454>
 8005c72:	a201      	add	r2, pc, #4	@ (adr r2, 8005c78 <UART_SetConfig+0x380>)
 8005c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c78:	08005d1d 	.word	0x08005d1d
 8005c7c:	08005d4d 	.word	0x08005d4d
 8005c80:	08005d4d 	.word	0x08005d4d
 8005c84:	08005d4d 	.word	0x08005d4d
 8005c88:	08005d4d 	.word	0x08005d4d
 8005c8c:	08005d4d 	.word	0x08005d4d
 8005c90:	08005d4d 	.word	0x08005d4d
 8005c94:	08005d4d 	.word	0x08005d4d
 8005c98:	08005d25 	.word	0x08005d25
 8005c9c:	08005d4d 	.word	0x08005d4d
 8005ca0:	08005d4d 	.word	0x08005d4d
 8005ca4:	08005d4d 	.word	0x08005d4d
 8005ca8:	08005d4d 	.word	0x08005d4d
 8005cac:	08005d4d 	.word	0x08005d4d
 8005cb0:	08005d4d 	.word	0x08005d4d
 8005cb4:	08005d4d 	.word	0x08005d4d
 8005cb8:	08005d2d 	.word	0x08005d2d
 8005cbc:	08005d4d 	.word	0x08005d4d
 8005cc0:	08005d4d 	.word	0x08005d4d
 8005cc4:	08005d4d 	.word	0x08005d4d
 8005cc8:	08005d4d 	.word	0x08005d4d
 8005ccc:	08005d4d 	.word	0x08005d4d
 8005cd0:	08005d4d 	.word	0x08005d4d
 8005cd4:	08005d4d 	.word	0x08005d4d
 8005cd8:	08005d35 	.word	0x08005d35
 8005cdc:	08005d4d 	.word	0x08005d4d
 8005ce0:	08005d4d 	.word	0x08005d4d
 8005ce4:	08005d4d 	.word	0x08005d4d
 8005ce8:	08005d4d 	.word	0x08005d4d
 8005cec:	08005d4d 	.word	0x08005d4d
 8005cf0:	08005d4d 	.word	0x08005d4d
 8005cf4:	08005d4d 	.word	0x08005d4d
 8005cf8:	08005d3d 	.word	0x08005d3d
 8005cfc:	08005d4d 	.word	0x08005d4d
 8005d00:	08005d4d 	.word	0x08005d4d
 8005d04:	08005d4d 	.word	0x08005d4d
 8005d08:	08005d4d 	.word	0x08005d4d
 8005d0c:	08005d4d 	.word	0x08005d4d
 8005d10:	08005d4d 	.word	0x08005d4d
 8005d14:	08005d4d 	.word	0x08005d4d
 8005d18:	08005d45 	.word	0x08005d45
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d22:	e0bc      	b.n	8005e9e <UART_SetConfig+0x5a6>
 8005d24:	2304      	movs	r3, #4
 8005d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d2a:	e0b8      	b.n	8005e9e <UART_SetConfig+0x5a6>
 8005d2c:	2308      	movs	r3, #8
 8005d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d32:	e0b4      	b.n	8005e9e <UART_SetConfig+0x5a6>
 8005d34:	2310      	movs	r3, #16
 8005d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d3a:	e0b0      	b.n	8005e9e <UART_SetConfig+0x5a6>
 8005d3c:	2320      	movs	r3, #32
 8005d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d42:	e0ac      	b.n	8005e9e <UART_SetConfig+0x5a6>
 8005d44:	2340      	movs	r3, #64	@ 0x40
 8005d46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d4a:	e0a8      	b.n	8005e9e <UART_SetConfig+0x5a6>
 8005d4c:	2380      	movs	r3, #128	@ 0x80
 8005d4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d52:	e0a4      	b.n	8005e9e <UART_SetConfig+0x5a6>
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a8f      	ldr	r2, [pc, #572]	@ (8005f98 <UART_SetConfig+0x6a0>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d130      	bne.n	8005dc0 <UART_SetConfig+0x4c8>
 8005d5e:	4b8d      	ldr	r3, [pc, #564]	@ (8005f94 <UART_SetConfig+0x69c>)
 8005d60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d62:	f003 0307 	and.w	r3, r3, #7
 8005d66:	2b05      	cmp	r3, #5
 8005d68:	d826      	bhi.n	8005db8 <UART_SetConfig+0x4c0>
 8005d6a:	a201      	add	r2, pc, #4	@ (adr r2, 8005d70 <UART_SetConfig+0x478>)
 8005d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d70:	08005d89 	.word	0x08005d89
 8005d74:	08005d91 	.word	0x08005d91
 8005d78:	08005d99 	.word	0x08005d99
 8005d7c:	08005da1 	.word	0x08005da1
 8005d80:	08005da9 	.word	0x08005da9
 8005d84:	08005db1 	.word	0x08005db1
 8005d88:	2300      	movs	r3, #0
 8005d8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d8e:	e086      	b.n	8005e9e <UART_SetConfig+0x5a6>
 8005d90:	2304      	movs	r3, #4
 8005d92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d96:	e082      	b.n	8005e9e <UART_SetConfig+0x5a6>
 8005d98:	2308      	movs	r3, #8
 8005d9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d9e:	e07e      	b.n	8005e9e <UART_SetConfig+0x5a6>
 8005da0:	2310      	movs	r3, #16
 8005da2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005da6:	e07a      	b.n	8005e9e <UART_SetConfig+0x5a6>
 8005da8:	2320      	movs	r3, #32
 8005daa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dae:	e076      	b.n	8005e9e <UART_SetConfig+0x5a6>
 8005db0:	2340      	movs	r3, #64	@ 0x40
 8005db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005db6:	e072      	b.n	8005e9e <UART_SetConfig+0x5a6>
 8005db8:	2380      	movs	r3, #128	@ 0x80
 8005dba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dbe:	e06e      	b.n	8005e9e <UART_SetConfig+0x5a6>
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a75      	ldr	r2, [pc, #468]	@ (8005f9c <UART_SetConfig+0x6a4>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d130      	bne.n	8005e2c <UART_SetConfig+0x534>
 8005dca:	4b72      	ldr	r3, [pc, #456]	@ (8005f94 <UART_SetConfig+0x69c>)
 8005dcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dce:	f003 0307 	and.w	r3, r3, #7
 8005dd2:	2b05      	cmp	r3, #5
 8005dd4:	d826      	bhi.n	8005e24 <UART_SetConfig+0x52c>
 8005dd6:	a201      	add	r2, pc, #4	@ (adr r2, 8005ddc <UART_SetConfig+0x4e4>)
 8005dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ddc:	08005df5 	.word	0x08005df5
 8005de0:	08005dfd 	.word	0x08005dfd
 8005de4:	08005e05 	.word	0x08005e05
 8005de8:	08005e0d 	.word	0x08005e0d
 8005dec:	08005e15 	.word	0x08005e15
 8005df0:	08005e1d 	.word	0x08005e1d
 8005df4:	2300      	movs	r3, #0
 8005df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dfa:	e050      	b.n	8005e9e <UART_SetConfig+0x5a6>
 8005dfc:	2304      	movs	r3, #4
 8005dfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e02:	e04c      	b.n	8005e9e <UART_SetConfig+0x5a6>
 8005e04:	2308      	movs	r3, #8
 8005e06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e0a:	e048      	b.n	8005e9e <UART_SetConfig+0x5a6>
 8005e0c:	2310      	movs	r3, #16
 8005e0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e12:	e044      	b.n	8005e9e <UART_SetConfig+0x5a6>
 8005e14:	2320      	movs	r3, #32
 8005e16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e1a:	e040      	b.n	8005e9e <UART_SetConfig+0x5a6>
 8005e1c:	2340      	movs	r3, #64	@ 0x40
 8005e1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e22:	e03c      	b.n	8005e9e <UART_SetConfig+0x5a6>
 8005e24:	2380      	movs	r3, #128	@ 0x80
 8005e26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e2a:	e038      	b.n	8005e9e <UART_SetConfig+0x5a6>
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a5b      	ldr	r2, [pc, #364]	@ (8005fa0 <UART_SetConfig+0x6a8>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d130      	bne.n	8005e98 <UART_SetConfig+0x5a0>
 8005e36:	4b57      	ldr	r3, [pc, #348]	@ (8005f94 <UART_SetConfig+0x69c>)
 8005e38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e3a:	f003 0307 	and.w	r3, r3, #7
 8005e3e:	2b05      	cmp	r3, #5
 8005e40:	d826      	bhi.n	8005e90 <UART_SetConfig+0x598>
 8005e42:	a201      	add	r2, pc, #4	@ (adr r2, 8005e48 <UART_SetConfig+0x550>)
 8005e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e48:	08005e61 	.word	0x08005e61
 8005e4c:	08005e69 	.word	0x08005e69
 8005e50:	08005e71 	.word	0x08005e71
 8005e54:	08005e79 	.word	0x08005e79
 8005e58:	08005e81 	.word	0x08005e81
 8005e5c:	08005e89 	.word	0x08005e89
 8005e60:	2302      	movs	r3, #2
 8005e62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e66:	e01a      	b.n	8005e9e <UART_SetConfig+0x5a6>
 8005e68:	2304      	movs	r3, #4
 8005e6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e6e:	e016      	b.n	8005e9e <UART_SetConfig+0x5a6>
 8005e70:	2308      	movs	r3, #8
 8005e72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e76:	e012      	b.n	8005e9e <UART_SetConfig+0x5a6>
 8005e78:	2310      	movs	r3, #16
 8005e7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e7e:	e00e      	b.n	8005e9e <UART_SetConfig+0x5a6>
 8005e80:	2320      	movs	r3, #32
 8005e82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e86:	e00a      	b.n	8005e9e <UART_SetConfig+0x5a6>
 8005e88:	2340      	movs	r3, #64	@ 0x40
 8005e8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e8e:	e006      	b.n	8005e9e <UART_SetConfig+0x5a6>
 8005e90:	2380      	movs	r3, #128	@ 0x80
 8005e92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e96:	e002      	b.n	8005e9e <UART_SetConfig+0x5a6>
 8005e98:	2380      	movs	r3, #128	@ 0x80
 8005e9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a3f      	ldr	r2, [pc, #252]	@ (8005fa0 <UART_SetConfig+0x6a8>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	f040 80f8 	bne.w	800609a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005eaa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005eae:	2b20      	cmp	r3, #32
 8005eb0:	dc46      	bgt.n	8005f40 <UART_SetConfig+0x648>
 8005eb2:	2b02      	cmp	r3, #2
 8005eb4:	f2c0 8082 	blt.w	8005fbc <UART_SetConfig+0x6c4>
 8005eb8:	3b02      	subs	r3, #2
 8005eba:	2b1e      	cmp	r3, #30
 8005ebc:	d87e      	bhi.n	8005fbc <UART_SetConfig+0x6c4>
 8005ebe:	a201      	add	r2, pc, #4	@ (adr r2, 8005ec4 <UART_SetConfig+0x5cc>)
 8005ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec4:	08005f47 	.word	0x08005f47
 8005ec8:	08005fbd 	.word	0x08005fbd
 8005ecc:	08005f4f 	.word	0x08005f4f
 8005ed0:	08005fbd 	.word	0x08005fbd
 8005ed4:	08005fbd 	.word	0x08005fbd
 8005ed8:	08005fbd 	.word	0x08005fbd
 8005edc:	08005f5f 	.word	0x08005f5f
 8005ee0:	08005fbd 	.word	0x08005fbd
 8005ee4:	08005fbd 	.word	0x08005fbd
 8005ee8:	08005fbd 	.word	0x08005fbd
 8005eec:	08005fbd 	.word	0x08005fbd
 8005ef0:	08005fbd 	.word	0x08005fbd
 8005ef4:	08005fbd 	.word	0x08005fbd
 8005ef8:	08005fbd 	.word	0x08005fbd
 8005efc:	08005f6f 	.word	0x08005f6f
 8005f00:	08005fbd 	.word	0x08005fbd
 8005f04:	08005fbd 	.word	0x08005fbd
 8005f08:	08005fbd 	.word	0x08005fbd
 8005f0c:	08005fbd 	.word	0x08005fbd
 8005f10:	08005fbd 	.word	0x08005fbd
 8005f14:	08005fbd 	.word	0x08005fbd
 8005f18:	08005fbd 	.word	0x08005fbd
 8005f1c:	08005fbd 	.word	0x08005fbd
 8005f20:	08005fbd 	.word	0x08005fbd
 8005f24:	08005fbd 	.word	0x08005fbd
 8005f28:	08005fbd 	.word	0x08005fbd
 8005f2c:	08005fbd 	.word	0x08005fbd
 8005f30:	08005fbd 	.word	0x08005fbd
 8005f34:	08005fbd 	.word	0x08005fbd
 8005f38:	08005fbd 	.word	0x08005fbd
 8005f3c:	08005faf 	.word	0x08005faf
 8005f40:	2b40      	cmp	r3, #64	@ 0x40
 8005f42:	d037      	beq.n	8005fb4 <UART_SetConfig+0x6bc>
 8005f44:	e03a      	b.n	8005fbc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005f46:	f7fe f969 	bl	800421c <HAL_RCCEx_GetD3PCLK1Freq>
 8005f4a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005f4c:	e03c      	b.n	8005fc8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f52:	4618      	mov	r0, r3
 8005f54:	f7fe f978 	bl	8004248 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f5c:	e034      	b.n	8005fc8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f5e:	f107 0318 	add.w	r3, r7, #24
 8005f62:	4618      	mov	r0, r3
 8005f64:	f7fe fac4 	bl	80044f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f6c:	e02c      	b.n	8005fc8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f6e:	4b09      	ldr	r3, [pc, #36]	@ (8005f94 <UART_SetConfig+0x69c>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 0320 	and.w	r3, r3, #32
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d016      	beq.n	8005fa8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005f7a:	4b06      	ldr	r3, [pc, #24]	@ (8005f94 <UART_SetConfig+0x69c>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	08db      	lsrs	r3, r3, #3
 8005f80:	f003 0303 	and.w	r3, r3, #3
 8005f84:	4a07      	ldr	r2, [pc, #28]	@ (8005fa4 <UART_SetConfig+0x6ac>)
 8005f86:	fa22 f303 	lsr.w	r3, r2, r3
 8005f8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005f8c:	e01c      	b.n	8005fc8 <UART_SetConfig+0x6d0>
 8005f8e:	bf00      	nop
 8005f90:	40011400 	.word	0x40011400
 8005f94:	58024400 	.word	0x58024400
 8005f98:	40007800 	.word	0x40007800
 8005f9c:	40007c00 	.word	0x40007c00
 8005fa0:	58000c00 	.word	0x58000c00
 8005fa4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005fa8:	4b9d      	ldr	r3, [pc, #628]	@ (8006220 <UART_SetConfig+0x928>)
 8005faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fac:	e00c      	b.n	8005fc8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005fae:	4b9d      	ldr	r3, [pc, #628]	@ (8006224 <UART_SetConfig+0x92c>)
 8005fb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fb2:	e009      	b.n	8005fc8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fb4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005fb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fba:	e005      	b.n	8005fc8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005fc6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005fc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	f000 81de 	beq.w	800638c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fd4:	4a94      	ldr	r2, [pc, #592]	@ (8006228 <UART_SetConfig+0x930>)
 8005fd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fda:	461a      	mov	r2, r3
 8005fdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fde:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fe2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	685a      	ldr	r2, [r3, #4]
 8005fe8:	4613      	mov	r3, r2
 8005fea:	005b      	lsls	r3, r3, #1
 8005fec:	4413      	add	r3, r2
 8005fee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d305      	bcc.n	8006000 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ffa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d903      	bls.n	8006008 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006006:	e1c1      	b.n	800638c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006008:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800600a:	2200      	movs	r2, #0
 800600c:	60bb      	str	r3, [r7, #8]
 800600e:	60fa      	str	r2, [r7, #12]
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006014:	4a84      	ldr	r2, [pc, #528]	@ (8006228 <UART_SetConfig+0x930>)
 8006016:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800601a:	b29b      	uxth	r3, r3
 800601c:	2200      	movs	r2, #0
 800601e:	603b      	str	r3, [r7, #0]
 8006020:	607a      	str	r2, [r7, #4]
 8006022:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006026:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800602a:	f7fa f9a9 	bl	8000380 <__aeabi_uldivmod>
 800602e:	4602      	mov	r2, r0
 8006030:	460b      	mov	r3, r1
 8006032:	4610      	mov	r0, r2
 8006034:	4619      	mov	r1, r3
 8006036:	f04f 0200 	mov.w	r2, #0
 800603a:	f04f 0300 	mov.w	r3, #0
 800603e:	020b      	lsls	r3, r1, #8
 8006040:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006044:	0202      	lsls	r2, r0, #8
 8006046:	6979      	ldr	r1, [r7, #20]
 8006048:	6849      	ldr	r1, [r1, #4]
 800604a:	0849      	lsrs	r1, r1, #1
 800604c:	2000      	movs	r0, #0
 800604e:	460c      	mov	r4, r1
 8006050:	4605      	mov	r5, r0
 8006052:	eb12 0804 	adds.w	r8, r2, r4
 8006056:	eb43 0905 	adc.w	r9, r3, r5
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	469a      	mov	sl, r3
 8006062:	4693      	mov	fp, r2
 8006064:	4652      	mov	r2, sl
 8006066:	465b      	mov	r3, fp
 8006068:	4640      	mov	r0, r8
 800606a:	4649      	mov	r1, r9
 800606c:	f7fa f988 	bl	8000380 <__aeabi_uldivmod>
 8006070:	4602      	mov	r2, r0
 8006072:	460b      	mov	r3, r1
 8006074:	4613      	mov	r3, r2
 8006076:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800607a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800607e:	d308      	bcc.n	8006092 <UART_SetConfig+0x79a>
 8006080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006082:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006086:	d204      	bcs.n	8006092 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800608e:	60da      	str	r2, [r3, #12]
 8006090:	e17c      	b.n	800638c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006098:	e178      	b.n	800638c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	69db      	ldr	r3, [r3, #28]
 800609e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060a2:	f040 80c5 	bne.w	8006230 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80060a6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80060aa:	2b20      	cmp	r3, #32
 80060ac:	dc48      	bgt.n	8006140 <UART_SetConfig+0x848>
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	db7b      	blt.n	80061aa <UART_SetConfig+0x8b2>
 80060b2:	2b20      	cmp	r3, #32
 80060b4:	d879      	bhi.n	80061aa <UART_SetConfig+0x8b2>
 80060b6:	a201      	add	r2, pc, #4	@ (adr r2, 80060bc <UART_SetConfig+0x7c4>)
 80060b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060bc:	08006147 	.word	0x08006147
 80060c0:	0800614f 	.word	0x0800614f
 80060c4:	080061ab 	.word	0x080061ab
 80060c8:	080061ab 	.word	0x080061ab
 80060cc:	08006157 	.word	0x08006157
 80060d0:	080061ab 	.word	0x080061ab
 80060d4:	080061ab 	.word	0x080061ab
 80060d8:	080061ab 	.word	0x080061ab
 80060dc:	08006167 	.word	0x08006167
 80060e0:	080061ab 	.word	0x080061ab
 80060e4:	080061ab 	.word	0x080061ab
 80060e8:	080061ab 	.word	0x080061ab
 80060ec:	080061ab 	.word	0x080061ab
 80060f0:	080061ab 	.word	0x080061ab
 80060f4:	080061ab 	.word	0x080061ab
 80060f8:	080061ab 	.word	0x080061ab
 80060fc:	08006177 	.word	0x08006177
 8006100:	080061ab 	.word	0x080061ab
 8006104:	080061ab 	.word	0x080061ab
 8006108:	080061ab 	.word	0x080061ab
 800610c:	080061ab 	.word	0x080061ab
 8006110:	080061ab 	.word	0x080061ab
 8006114:	080061ab 	.word	0x080061ab
 8006118:	080061ab 	.word	0x080061ab
 800611c:	080061ab 	.word	0x080061ab
 8006120:	080061ab 	.word	0x080061ab
 8006124:	080061ab 	.word	0x080061ab
 8006128:	080061ab 	.word	0x080061ab
 800612c:	080061ab 	.word	0x080061ab
 8006130:	080061ab 	.word	0x080061ab
 8006134:	080061ab 	.word	0x080061ab
 8006138:	080061ab 	.word	0x080061ab
 800613c:	0800619d 	.word	0x0800619d
 8006140:	2b40      	cmp	r3, #64	@ 0x40
 8006142:	d02e      	beq.n	80061a2 <UART_SetConfig+0x8aa>
 8006144:	e031      	b.n	80061aa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006146:	f7fc fe33 	bl	8002db0 <HAL_RCC_GetPCLK1Freq>
 800614a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800614c:	e033      	b.n	80061b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800614e:	f7fc fe45 	bl	8002ddc <HAL_RCC_GetPCLK2Freq>
 8006152:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006154:	e02f      	b.n	80061b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006156:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800615a:	4618      	mov	r0, r3
 800615c:	f7fe f874 	bl	8004248 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006162:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006164:	e027      	b.n	80061b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006166:	f107 0318 	add.w	r3, r7, #24
 800616a:	4618      	mov	r0, r3
 800616c:	f7fe f9c0 	bl	80044f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006174:	e01f      	b.n	80061b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006176:	4b2d      	ldr	r3, [pc, #180]	@ (800622c <UART_SetConfig+0x934>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 0320 	and.w	r3, r3, #32
 800617e:	2b00      	cmp	r3, #0
 8006180:	d009      	beq.n	8006196 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006182:	4b2a      	ldr	r3, [pc, #168]	@ (800622c <UART_SetConfig+0x934>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	08db      	lsrs	r3, r3, #3
 8006188:	f003 0303 	and.w	r3, r3, #3
 800618c:	4a24      	ldr	r2, [pc, #144]	@ (8006220 <UART_SetConfig+0x928>)
 800618e:	fa22 f303 	lsr.w	r3, r2, r3
 8006192:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006194:	e00f      	b.n	80061b6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006196:	4b22      	ldr	r3, [pc, #136]	@ (8006220 <UART_SetConfig+0x928>)
 8006198:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800619a:	e00c      	b.n	80061b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800619c:	4b21      	ldr	r3, [pc, #132]	@ (8006224 <UART_SetConfig+0x92c>)
 800619e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061a0:	e009      	b.n	80061b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061a8:	e005      	b.n	80061b6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80061aa:	2300      	movs	r3, #0
 80061ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80061b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80061b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	f000 80e7 	beq.w	800638c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061c2:	4a19      	ldr	r2, [pc, #100]	@ (8006228 <UART_SetConfig+0x930>)
 80061c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061c8:	461a      	mov	r2, r3
 80061ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80061d0:	005a      	lsls	r2, r3, #1
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	085b      	lsrs	r3, r3, #1
 80061d8:	441a      	add	r2, r3
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	fbb2 f3f3 	udiv	r3, r2, r3
 80061e2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061e6:	2b0f      	cmp	r3, #15
 80061e8:	d916      	bls.n	8006218 <UART_SetConfig+0x920>
 80061ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061f0:	d212      	bcs.n	8006218 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80061f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	f023 030f 	bic.w	r3, r3, #15
 80061fa:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80061fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061fe:	085b      	lsrs	r3, r3, #1
 8006200:	b29b      	uxth	r3, r3
 8006202:	f003 0307 	and.w	r3, r3, #7
 8006206:	b29a      	uxth	r2, r3
 8006208:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800620a:	4313      	orrs	r3, r2
 800620c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006214:	60da      	str	r2, [r3, #12]
 8006216:	e0b9      	b.n	800638c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800621e:	e0b5      	b.n	800638c <UART_SetConfig+0xa94>
 8006220:	03d09000 	.word	0x03d09000
 8006224:	003d0900 	.word	0x003d0900
 8006228:	08007418 	.word	0x08007418
 800622c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006230:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006234:	2b20      	cmp	r3, #32
 8006236:	dc49      	bgt.n	80062cc <UART_SetConfig+0x9d4>
 8006238:	2b00      	cmp	r3, #0
 800623a:	db7c      	blt.n	8006336 <UART_SetConfig+0xa3e>
 800623c:	2b20      	cmp	r3, #32
 800623e:	d87a      	bhi.n	8006336 <UART_SetConfig+0xa3e>
 8006240:	a201      	add	r2, pc, #4	@ (adr r2, 8006248 <UART_SetConfig+0x950>)
 8006242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006246:	bf00      	nop
 8006248:	080062d3 	.word	0x080062d3
 800624c:	080062db 	.word	0x080062db
 8006250:	08006337 	.word	0x08006337
 8006254:	08006337 	.word	0x08006337
 8006258:	080062e3 	.word	0x080062e3
 800625c:	08006337 	.word	0x08006337
 8006260:	08006337 	.word	0x08006337
 8006264:	08006337 	.word	0x08006337
 8006268:	080062f3 	.word	0x080062f3
 800626c:	08006337 	.word	0x08006337
 8006270:	08006337 	.word	0x08006337
 8006274:	08006337 	.word	0x08006337
 8006278:	08006337 	.word	0x08006337
 800627c:	08006337 	.word	0x08006337
 8006280:	08006337 	.word	0x08006337
 8006284:	08006337 	.word	0x08006337
 8006288:	08006303 	.word	0x08006303
 800628c:	08006337 	.word	0x08006337
 8006290:	08006337 	.word	0x08006337
 8006294:	08006337 	.word	0x08006337
 8006298:	08006337 	.word	0x08006337
 800629c:	08006337 	.word	0x08006337
 80062a0:	08006337 	.word	0x08006337
 80062a4:	08006337 	.word	0x08006337
 80062a8:	08006337 	.word	0x08006337
 80062ac:	08006337 	.word	0x08006337
 80062b0:	08006337 	.word	0x08006337
 80062b4:	08006337 	.word	0x08006337
 80062b8:	08006337 	.word	0x08006337
 80062bc:	08006337 	.word	0x08006337
 80062c0:	08006337 	.word	0x08006337
 80062c4:	08006337 	.word	0x08006337
 80062c8:	08006329 	.word	0x08006329
 80062cc:	2b40      	cmp	r3, #64	@ 0x40
 80062ce:	d02e      	beq.n	800632e <UART_SetConfig+0xa36>
 80062d0:	e031      	b.n	8006336 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062d2:	f7fc fd6d 	bl	8002db0 <HAL_RCC_GetPCLK1Freq>
 80062d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80062d8:	e033      	b.n	8006342 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062da:	f7fc fd7f 	bl	8002ddc <HAL_RCC_GetPCLK2Freq>
 80062de:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80062e0:	e02f      	b.n	8006342 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80062e6:	4618      	mov	r0, r3
 80062e8:	f7fd ffae 	bl	8004248 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80062ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062f0:	e027      	b.n	8006342 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80062f2:	f107 0318 	add.w	r3, r7, #24
 80062f6:	4618      	mov	r0, r3
 80062f8:	f7fe f8fa 	bl	80044f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80062fc:	69fb      	ldr	r3, [r7, #28]
 80062fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006300:	e01f      	b.n	8006342 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006302:	4b2d      	ldr	r3, [pc, #180]	@ (80063b8 <UART_SetConfig+0xac0>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f003 0320 	and.w	r3, r3, #32
 800630a:	2b00      	cmp	r3, #0
 800630c:	d009      	beq.n	8006322 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800630e:	4b2a      	ldr	r3, [pc, #168]	@ (80063b8 <UART_SetConfig+0xac0>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	08db      	lsrs	r3, r3, #3
 8006314:	f003 0303 	and.w	r3, r3, #3
 8006318:	4a28      	ldr	r2, [pc, #160]	@ (80063bc <UART_SetConfig+0xac4>)
 800631a:	fa22 f303 	lsr.w	r3, r2, r3
 800631e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006320:	e00f      	b.n	8006342 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006322:	4b26      	ldr	r3, [pc, #152]	@ (80063bc <UART_SetConfig+0xac4>)
 8006324:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006326:	e00c      	b.n	8006342 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006328:	4b25      	ldr	r3, [pc, #148]	@ (80063c0 <UART_SetConfig+0xac8>)
 800632a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800632c:	e009      	b.n	8006342 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800632e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006332:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006334:	e005      	b.n	8006342 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006336:	2300      	movs	r3, #0
 8006338:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006340:	bf00      	nop
    }

    if (pclk != 0U)
 8006342:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006344:	2b00      	cmp	r3, #0
 8006346:	d021      	beq.n	800638c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800634c:	4a1d      	ldr	r2, [pc, #116]	@ (80063c4 <UART_SetConfig+0xacc>)
 800634e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006352:	461a      	mov	r2, r3
 8006354:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006356:	fbb3 f2f2 	udiv	r2, r3, r2
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	085b      	lsrs	r3, r3, #1
 8006360:	441a      	add	r2, r3
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	fbb2 f3f3 	udiv	r3, r2, r3
 800636a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800636c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800636e:	2b0f      	cmp	r3, #15
 8006370:	d909      	bls.n	8006386 <UART_SetConfig+0xa8e>
 8006372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006374:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006378:	d205      	bcs.n	8006386 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800637a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800637c:	b29a      	uxth	r2, r3
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	60da      	str	r2, [r3, #12]
 8006384:	e002      	b.n	800638c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	2201      	movs	r2, #1
 8006390:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	2201      	movs	r2, #1
 8006398:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	2200      	movs	r2, #0
 80063a0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	2200      	movs	r2, #0
 80063a6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80063a8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3748      	adds	r7, #72	@ 0x48
 80063b0:	46bd      	mov	sp, r7
 80063b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063b6:	bf00      	nop
 80063b8:	58024400 	.word	0x58024400
 80063bc:	03d09000 	.word	0x03d09000
 80063c0:	003d0900 	.word	0x003d0900
 80063c4:	08007418 	.word	0x08007418

080063c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b083      	sub	sp, #12
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063d4:	f003 0308 	and.w	r3, r3, #8
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d00a      	beq.n	80063f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	430a      	orrs	r2, r1
 80063f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063f6:	f003 0301 	and.w	r3, r3, #1
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d00a      	beq.n	8006414 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	430a      	orrs	r2, r1
 8006412:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006418:	f003 0302 	and.w	r3, r3, #2
 800641c:	2b00      	cmp	r3, #0
 800641e:	d00a      	beq.n	8006436 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	430a      	orrs	r2, r1
 8006434:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800643a:	f003 0304 	and.w	r3, r3, #4
 800643e:	2b00      	cmp	r3, #0
 8006440:	d00a      	beq.n	8006458 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	430a      	orrs	r2, r1
 8006456:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800645c:	f003 0310 	and.w	r3, r3, #16
 8006460:	2b00      	cmp	r3, #0
 8006462:	d00a      	beq.n	800647a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	430a      	orrs	r2, r1
 8006478:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800647e:	f003 0320 	and.w	r3, r3, #32
 8006482:	2b00      	cmp	r3, #0
 8006484:	d00a      	beq.n	800649c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	430a      	orrs	r2, r1
 800649a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d01a      	beq.n	80064de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	430a      	orrs	r2, r1
 80064bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80064c6:	d10a      	bne.n	80064de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	430a      	orrs	r2, r1
 80064dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d00a      	beq.n	8006500 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	430a      	orrs	r2, r1
 80064fe:	605a      	str	r2, [r3, #4]
  }
}
 8006500:	bf00      	nop
 8006502:	370c      	adds	r7, #12
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr

0800650c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b098      	sub	sp, #96	@ 0x60
 8006510:	af02      	add	r7, sp, #8
 8006512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800651c:	f7fb f8f2 	bl	8001704 <HAL_GetTick>
 8006520:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f003 0308 	and.w	r3, r3, #8
 800652c:	2b08      	cmp	r3, #8
 800652e:	d12f      	bne.n	8006590 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006530:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006534:	9300      	str	r3, [sp, #0]
 8006536:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006538:	2200      	movs	r2, #0
 800653a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 f88e 	bl	8006660 <UART_WaitOnFlagUntilTimeout>
 8006544:	4603      	mov	r3, r0
 8006546:	2b00      	cmp	r3, #0
 8006548:	d022      	beq.n	8006590 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006552:	e853 3f00 	ldrex	r3, [r3]
 8006556:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006558:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800655a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800655e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	461a      	mov	r2, r3
 8006566:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006568:	647b      	str	r3, [r7, #68]	@ 0x44
 800656a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800656c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800656e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006570:	e841 2300 	strex	r3, r2, [r1]
 8006574:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006576:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006578:	2b00      	cmp	r3, #0
 800657a:	d1e6      	bne.n	800654a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2220      	movs	r2, #32
 8006580:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800658c:	2303      	movs	r3, #3
 800658e:	e063      	b.n	8006658 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f003 0304 	and.w	r3, r3, #4
 800659a:	2b04      	cmp	r3, #4
 800659c:	d149      	bne.n	8006632 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800659e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80065a2:	9300      	str	r3, [sp, #0]
 80065a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065a6:	2200      	movs	r2, #0
 80065a8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f000 f857 	bl	8006660 <UART_WaitOnFlagUntilTimeout>
 80065b2:	4603      	mov	r3, r0
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d03c      	beq.n	8006632 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065c0:	e853 3f00 	ldrex	r3, [r3]
 80065c4:	623b      	str	r3, [r7, #32]
   return(result);
 80065c6:	6a3b      	ldr	r3, [r7, #32]
 80065c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80065cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	461a      	mov	r2, r3
 80065d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80065d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80065dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065de:	e841 2300 	strex	r3, r2, [r1]
 80065e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80065e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d1e6      	bne.n	80065b8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	3308      	adds	r3, #8
 80065f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	e853 3f00 	ldrex	r3, [r3]
 80065f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f023 0301 	bic.w	r3, r3, #1
 8006600:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	3308      	adds	r3, #8
 8006608:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800660a:	61fa      	str	r2, [r7, #28]
 800660c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800660e:	69b9      	ldr	r1, [r7, #24]
 8006610:	69fa      	ldr	r2, [r7, #28]
 8006612:	e841 2300 	strex	r3, r2, [r1]
 8006616:	617b      	str	r3, [r7, #20]
   return(result);
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d1e5      	bne.n	80065ea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2220      	movs	r2, #32
 8006622:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800662e:	2303      	movs	r3, #3
 8006630:	e012      	b.n	8006658 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2220      	movs	r2, #32
 8006636:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2220      	movs	r2, #32
 800663e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2200      	movs	r2, #0
 8006646:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2200      	movs	r2, #0
 800664c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2200      	movs	r2, #0
 8006652:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006656:	2300      	movs	r3, #0
}
 8006658:	4618      	mov	r0, r3
 800665a:	3758      	adds	r7, #88	@ 0x58
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}

08006660 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b084      	sub	sp, #16
 8006664:	af00      	add	r7, sp, #0
 8006666:	60f8      	str	r0, [r7, #12]
 8006668:	60b9      	str	r1, [r7, #8]
 800666a:	603b      	str	r3, [r7, #0]
 800666c:	4613      	mov	r3, r2
 800666e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006670:	e04f      	b.n	8006712 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006672:	69bb      	ldr	r3, [r7, #24]
 8006674:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006678:	d04b      	beq.n	8006712 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800667a:	f7fb f843 	bl	8001704 <HAL_GetTick>
 800667e:	4602      	mov	r2, r0
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	1ad3      	subs	r3, r2, r3
 8006684:	69ba      	ldr	r2, [r7, #24]
 8006686:	429a      	cmp	r2, r3
 8006688:	d302      	bcc.n	8006690 <UART_WaitOnFlagUntilTimeout+0x30>
 800668a:	69bb      	ldr	r3, [r7, #24]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d101      	bne.n	8006694 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006690:	2303      	movs	r3, #3
 8006692:	e04e      	b.n	8006732 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 0304 	and.w	r3, r3, #4
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d037      	beq.n	8006712 <UART_WaitOnFlagUntilTimeout+0xb2>
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	2b80      	cmp	r3, #128	@ 0x80
 80066a6:	d034      	beq.n	8006712 <UART_WaitOnFlagUntilTimeout+0xb2>
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	2b40      	cmp	r3, #64	@ 0x40
 80066ac:	d031      	beq.n	8006712 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	69db      	ldr	r3, [r3, #28]
 80066b4:	f003 0308 	and.w	r3, r3, #8
 80066b8:	2b08      	cmp	r3, #8
 80066ba:	d110      	bne.n	80066de <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	2208      	movs	r2, #8
 80066c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80066c4:	68f8      	ldr	r0, [r7, #12]
 80066c6:	f000 f839 	bl	800673c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2208      	movs	r2, #8
 80066ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2200      	movs	r2, #0
 80066d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	e029      	b.n	8006732 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	69db      	ldr	r3, [r3, #28]
 80066e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80066e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066ec:	d111      	bne.n	8006712 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80066f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80066f8:	68f8      	ldr	r0, [r7, #12]
 80066fa:	f000 f81f 	bl	800673c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2220      	movs	r2, #32
 8006702:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2200      	movs	r2, #0
 800670a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800670e:	2303      	movs	r3, #3
 8006710:	e00f      	b.n	8006732 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	69da      	ldr	r2, [r3, #28]
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	4013      	ands	r3, r2
 800671c:	68ba      	ldr	r2, [r7, #8]
 800671e:	429a      	cmp	r2, r3
 8006720:	bf0c      	ite	eq
 8006722:	2301      	moveq	r3, #1
 8006724:	2300      	movne	r3, #0
 8006726:	b2db      	uxtb	r3, r3
 8006728:	461a      	mov	r2, r3
 800672a:	79fb      	ldrb	r3, [r7, #7]
 800672c:	429a      	cmp	r2, r3
 800672e:	d0a0      	beq.n	8006672 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006730:	2300      	movs	r3, #0
}
 8006732:	4618      	mov	r0, r3
 8006734:	3710      	adds	r7, #16
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
	...

0800673c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800673c:	b480      	push	{r7}
 800673e:	b095      	sub	sp, #84	@ 0x54
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800674a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800674c:	e853 3f00 	ldrex	r3, [r3]
 8006750:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006754:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006758:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	461a      	mov	r2, r3
 8006760:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006762:	643b      	str	r3, [r7, #64]	@ 0x40
 8006764:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006766:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006768:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800676a:	e841 2300 	strex	r3, r2, [r1]
 800676e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006772:	2b00      	cmp	r3, #0
 8006774:	d1e6      	bne.n	8006744 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	3308      	adds	r3, #8
 800677c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800677e:	6a3b      	ldr	r3, [r7, #32]
 8006780:	e853 3f00 	ldrex	r3, [r3]
 8006784:	61fb      	str	r3, [r7, #28]
   return(result);
 8006786:	69fa      	ldr	r2, [r7, #28]
 8006788:	4b1e      	ldr	r3, [pc, #120]	@ (8006804 <UART_EndRxTransfer+0xc8>)
 800678a:	4013      	ands	r3, r2
 800678c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	3308      	adds	r3, #8
 8006794:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006796:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006798:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800679a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800679c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800679e:	e841 2300 	strex	r3, r2, [r1]
 80067a2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80067a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d1e5      	bne.n	8006776 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d118      	bne.n	80067e4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	e853 3f00 	ldrex	r3, [r3]
 80067be:	60bb      	str	r3, [r7, #8]
   return(result);
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	f023 0310 	bic.w	r3, r3, #16
 80067c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	461a      	mov	r2, r3
 80067ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067d0:	61bb      	str	r3, [r7, #24]
 80067d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d4:	6979      	ldr	r1, [r7, #20]
 80067d6:	69ba      	ldr	r2, [r7, #24]
 80067d8:	e841 2300 	strex	r3, r2, [r1]
 80067dc:	613b      	str	r3, [r7, #16]
   return(result);
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d1e6      	bne.n	80067b2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2220      	movs	r2, #32
 80067e8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80067f8:	bf00      	nop
 80067fa:	3754      	adds	r7, #84	@ 0x54
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr
 8006804:	effffffe 	.word	0xeffffffe

08006808 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006808:	b480      	push	{r7}
 800680a:	b085      	sub	sp, #20
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006816:	2b01      	cmp	r3, #1
 8006818:	d101      	bne.n	800681e <HAL_UARTEx_DisableFifoMode+0x16>
 800681a:	2302      	movs	r3, #2
 800681c:	e027      	b.n	800686e <HAL_UARTEx_DisableFifoMode+0x66>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2201      	movs	r2, #1
 8006822:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2224      	movs	r2, #36	@ 0x24
 800682a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f022 0201 	bic.w	r2, r2, #1
 8006844:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800684c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2200      	movs	r2, #0
 8006852:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	68fa      	ldr	r2, [r7, #12]
 800685a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2220      	movs	r2, #32
 8006860:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800686c:	2300      	movs	r3, #0
}
 800686e:	4618      	mov	r0, r3
 8006870:	3714      	adds	r7, #20
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr

0800687a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800687a:	b580      	push	{r7, lr}
 800687c:	b084      	sub	sp, #16
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]
 8006882:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800688a:	2b01      	cmp	r3, #1
 800688c:	d101      	bne.n	8006892 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800688e:	2302      	movs	r3, #2
 8006890:	e02d      	b.n	80068ee <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2201      	movs	r2, #1
 8006896:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2224      	movs	r2, #36	@ 0x24
 800689e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f022 0201 	bic.w	r2, r2, #1
 80068b8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	683a      	ldr	r2, [r7, #0]
 80068ca:	430a      	orrs	r2, r1
 80068cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 f850 	bl	8006974 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	68fa      	ldr	r2, [r7, #12]
 80068da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2220      	movs	r2, #32
 80068e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80068ec:	2300      	movs	r3, #0
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3710      	adds	r7, #16
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}

080068f6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80068f6:	b580      	push	{r7, lr}
 80068f8:	b084      	sub	sp, #16
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	6078      	str	r0, [r7, #4]
 80068fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006906:	2b01      	cmp	r3, #1
 8006908:	d101      	bne.n	800690e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800690a:	2302      	movs	r3, #2
 800690c:	e02d      	b.n	800696a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2201      	movs	r2, #1
 8006912:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2224      	movs	r2, #36	@ 0x24
 800691a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f022 0201 	bic.w	r2, r2, #1
 8006934:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	683a      	ldr	r2, [r7, #0]
 8006946:	430a      	orrs	r2, r1
 8006948:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 f812 	bl	8006974 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	68fa      	ldr	r2, [r7, #12]
 8006956:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2220      	movs	r2, #32
 800695c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006968:	2300      	movs	r3, #0
}
 800696a:	4618      	mov	r0, r3
 800696c:	3710      	adds	r7, #16
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
	...

08006974 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006974:	b480      	push	{r7}
 8006976:	b085      	sub	sp, #20
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006980:	2b00      	cmp	r3, #0
 8006982:	d108      	bne.n	8006996 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2201      	movs	r2, #1
 8006990:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006994:	e031      	b.n	80069fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006996:	2310      	movs	r3, #16
 8006998:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800699a:	2310      	movs	r3, #16
 800699c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	0e5b      	lsrs	r3, r3, #25
 80069a6:	b2db      	uxtb	r3, r3
 80069a8:	f003 0307 	and.w	r3, r3, #7
 80069ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	0f5b      	lsrs	r3, r3, #29
 80069b6:	b2db      	uxtb	r3, r3
 80069b8:	f003 0307 	and.w	r3, r3, #7
 80069bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80069be:	7bbb      	ldrb	r3, [r7, #14]
 80069c0:	7b3a      	ldrb	r2, [r7, #12]
 80069c2:	4911      	ldr	r1, [pc, #68]	@ (8006a08 <UARTEx_SetNbDataToProcess+0x94>)
 80069c4:	5c8a      	ldrb	r2, [r1, r2]
 80069c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80069ca:	7b3a      	ldrb	r2, [r7, #12]
 80069cc:	490f      	ldr	r1, [pc, #60]	@ (8006a0c <UARTEx_SetNbDataToProcess+0x98>)
 80069ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80069d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80069d4:	b29a      	uxth	r2, r3
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80069dc:	7bfb      	ldrb	r3, [r7, #15]
 80069de:	7b7a      	ldrb	r2, [r7, #13]
 80069e0:	4909      	ldr	r1, [pc, #36]	@ (8006a08 <UARTEx_SetNbDataToProcess+0x94>)
 80069e2:	5c8a      	ldrb	r2, [r1, r2]
 80069e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80069e8:	7b7a      	ldrb	r2, [r7, #13]
 80069ea:	4908      	ldr	r1, [pc, #32]	@ (8006a0c <UARTEx_SetNbDataToProcess+0x98>)
 80069ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80069ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80069f2:	b29a      	uxth	r2, r3
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80069fa:	bf00      	nop
 80069fc:	3714      	adds	r7, #20
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr
 8006a06:	bf00      	nop
 8006a08:	08007430 	.word	0x08007430
 8006a0c:	08007438 	.word	0x08007438

08006a10 <siprintf>:
 8006a10:	b40e      	push	{r1, r2, r3}
 8006a12:	b510      	push	{r4, lr}
 8006a14:	b09d      	sub	sp, #116	@ 0x74
 8006a16:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006a18:	9002      	str	r0, [sp, #8]
 8006a1a:	9006      	str	r0, [sp, #24]
 8006a1c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006a20:	480a      	ldr	r0, [pc, #40]	@ (8006a4c <siprintf+0x3c>)
 8006a22:	9107      	str	r1, [sp, #28]
 8006a24:	9104      	str	r1, [sp, #16]
 8006a26:	490a      	ldr	r1, [pc, #40]	@ (8006a50 <siprintf+0x40>)
 8006a28:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a2c:	9105      	str	r1, [sp, #20]
 8006a2e:	2400      	movs	r4, #0
 8006a30:	a902      	add	r1, sp, #8
 8006a32:	6800      	ldr	r0, [r0, #0]
 8006a34:	9301      	str	r3, [sp, #4]
 8006a36:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006a38:	f000 f89c 	bl	8006b74 <_svfiprintf_r>
 8006a3c:	9b02      	ldr	r3, [sp, #8]
 8006a3e:	701c      	strb	r4, [r3, #0]
 8006a40:	b01d      	add	sp, #116	@ 0x74
 8006a42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a46:	b003      	add	sp, #12
 8006a48:	4770      	bx	lr
 8006a4a:	bf00      	nop
 8006a4c:	24000010 	.word	0x24000010
 8006a50:	ffff0208 	.word	0xffff0208

08006a54 <memset>:
 8006a54:	4402      	add	r2, r0
 8006a56:	4603      	mov	r3, r0
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d100      	bne.n	8006a5e <memset+0xa>
 8006a5c:	4770      	bx	lr
 8006a5e:	f803 1b01 	strb.w	r1, [r3], #1
 8006a62:	e7f9      	b.n	8006a58 <memset+0x4>

08006a64 <__errno>:
 8006a64:	4b01      	ldr	r3, [pc, #4]	@ (8006a6c <__errno+0x8>)
 8006a66:	6818      	ldr	r0, [r3, #0]
 8006a68:	4770      	bx	lr
 8006a6a:	bf00      	nop
 8006a6c:	24000010 	.word	0x24000010

08006a70 <__libc_init_array>:
 8006a70:	b570      	push	{r4, r5, r6, lr}
 8006a72:	4d0d      	ldr	r5, [pc, #52]	@ (8006aa8 <__libc_init_array+0x38>)
 8006a74:	4c0d      	ldr	r4, [pc, #52]	@ (8006aac <__libc_init_array+0x3c>)
 8006a76:	1b64      	subs	r4, r4, r5
 8006a78:	10a4      	asrs	r4, r4, #2
 8006a7a:	2600      	movs	r6, #0
 8006a7c:	42a6      	cmp	r6, r4
 8006a7e:	d109      	bne.n	8006a94 <__libc_init_array+0x24>
 8006a80:	4d0b      	ldr	r5, [pc, #44]	@ (8006ab0 <__libc_init_array+0x40>)
 8006a82:	4c0c      	ldr	r4, [pc, #48]	@ (8006ab4 <__libc_init_array+0x44>)
 8006a84:	f000 fc64 	bl	8007350 <_init>
 8006a88:	1b64      	subs	r4, r4, r5
 8006a8a:	10a4      	asrs	r4, r4, #2
 8006a8c:	2600      	movs	r6, #0
 8006a8e:	42a6      	cmp	r6, r4
 8006a90:	d105      	bne.n	8006a9e <__libc_init_array+0x2e>
 8006a92:	bd70      	pop	{r4, r5, r6, pc}
 8006a94:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a98:	4798      	blx	r3
 8006a9a:	3601      	adds	r6, #1
 8006a9c:	e7ee      	b.n	8006a7c <__libc_init_array+0xc>
 8006a9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006aa2:	4798      	blx	r3
 8006aa4:	3601      	adds	r6, #1
 8006aa6:	e7f2      	b.n	8006a8e <__libc_init_array+0x1e>
 8006aa8:	0800747c 	.word	0x0800747c
 8006aac:	0800747c 	.word	0x0800747c
 8006ab0:	0800747c 	.word	0x0800747c
 8006ab4:	08007480 	.word	0x08007480

08006ab8 <__retarget_lock_acquire_recursive>:
 8006ab8:	4770      	bx	lr

08006aba <__retarget_lock_release_recursive>:
 8006aba:	4770      	bx	lr

08006abc <__ssputs_r>:
 8006abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ac0:	688e      	ldr	r6, [r1, #8]
 8006ac2:	461f      	mov	r7, r3
 8006ac4:	42be      	cmp	r6, r7
 8006ac6:	680b      	ldr	r3, [r1, #0]
 8006ac8:	4682      	mov	sl, r0
 8006aca:	460c      	mov	r4, r1
 8006acc:	4690      	mov	r8, r2
 8006ace:	d82d      	bhi.n	8006b2c <__ssputs_r+0x70>
 8006ad0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006ad4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006ad8:	d026      	beq.n	8006b28 <__ssputs_r+0x6c>
 8006ada:	6965      	ldr	r5, [r4, #20]
 8006adc:	6909      	ldr	r1, [r1, #16]
 8006ade:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006ae2:	eba3 0901 	sub.w	r9, r3, r1
 8006ae6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006aea:	1c7b      	adds	r3, r7, #1
 8006aec:	444b      	add	r3, r9
 8006aee:	106d      	asrs	r5, r5, #1
 8006af0:	429d      	cmp	r5, r3
 8006af2:	bf38      	it	cc
 8006af4:	461d      	movcc	r5, r3
 8006af6:	0553      	lsls	r3, r2, #21
 8006af8:	d527      	bpl.n	8006b4a <__ssputs_r+0x8e>
 8006afa:	4629      	mov	r1, r5
 8006afc:	f000 f958 	bl	8006db0 <_malloc_r>
 8006b00:	4606      	mov	r6, r0
 8006b02:	b360      	cbz	r0, 8006b5e <__ssputs_r+0xa2>
 8006b04:	6921      	ldr	r1, [r4, #16]
 8006b06:	464a      	mov	r2, r9
 8006b08:	f000 fbc2 	bl	8007290 <memcpy>
 8006b0c:	89a3      	ldrh	r3, [r4, #12]
 8006b0e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006b12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b16:	81a3      	strh	r3, [r4, #12]
 8006b18:	6126      	str	r6, [r4, #16]
 8006b1a:	6165      	str	r5, [r4, #20]
 8006b1c:	444e      	add	r6, r9
 8006b1e:	eba5 0509 	sub.w	r5, r5, r9
 8006b22:	6026      	str	r6, [r4, #0]
 8006b24:	60a5      	str	r5, [r4, #8]
 8006b26:	463e      	mov	r6, r7
 8006b28:	42be      	cmp	r6, r7
 8006b2a:	d900      	bls.n	8006b2e <__ssputs_r+0x72>
 8006b2c:	463e      	mov	r6, r7
 8006b2e:	6820      	ldr	r0, [r4, #0]
 8006b30:	4632      	mov	r2, r6
 8006b32:	4641      	mov	r1, r8
 8006b34:	f000 fb82 	bl	800723c <memmove>
 8006b38:	68a3      	ldr	r3, [r4, #8]
 8006b3a:	1b9b      	subs	r3, r3, r6
 8006b3c:	60a3      	str	r3, [r4, #8]
 8006b3e:	6823      	ldr	r3, [r4, #0]
 8006b40:	4433      	add	r3, r6
 8006b42:	6023      	str	r3, [r4, #0]
 8006b44:	2000      	movs	r0, #0
 8006b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b4a:	462a      	mov	r2, r5
 8006b4c:	f000 fb48 	bl	80071e0 <_realloc_r>
 8006b50:	4606      	mov	r6, r0
 8006b52:	2800      	cmp	r0, #0
 8006b54:	d1e0      	bne.n	8006b18 <__ssputs_r+0x5c>
 8006b56:	6921      	ldr	r1, [r4, #16]
 8006b58:	4650      	mov	r0, sl
 8006b5a:	f000 fba7 	bl	80072ac <_free_r>
 8006b5e:	230c      	movs	r3, #12
 8006b60:	f8ca 3000 	str.w	r3, [sl]
 8006b64:	89a3      	ldrh	r3, [r4, #12]
 8006b66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b6a:	81a3      	strh	r3, [r4, #12]
 8006b6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006b70:	e7e9      	b.n	8006b46 <__ssputs_r+0x8a>
	...

08006b74 <_svfiprintf_r>:
 8006b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b78:	4698      	mov	r8, r3
 8006b7a:	898b      	ldrh	r3, [r1, #12]
 8006b7c:	061b      	lsls	r3, r3, #24
 8006b7e:	b09d      	sub	sp, #116	@ 0x74
 8006b80:	4607      	mov	r7, r0
 8006b82:	460d      	mov	r5, r1
 8006b84:	4614      	mov	r4, r2
 8006b86:	d510      	bpl.n	8006baa <_svfiprintf_r+0x36>
 8006b88:	690b      	ldr	r3, [r1, #16]
 8006b8a:	b973      	cbnz	r3, 8006baa <_svfiprintf_r+0x36>
 8006b8c:	2140      	movs	r1, #64	@ 0x40
 8006b8e:	f000 f90f 	bl	8006db0 <_malloc_r>
 8006b92:	6028      	str	r0, [r5, #0]
 8006b94:	6128      	str	r0, [r5, #16]
 8006b96:	b930      	cbnz	r0, 8006ba6 <_svfiprintf_r+0x32>
 8006b98:	230c      	movs	r3, #12
 8006b9a:	603b      	str	r3, [r7, #0]
 8006b9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006ba0:	b01d      	add	sp, #116	@ 0x74
 8006ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ba6:	2340      	movs	r3, #64	@ 0x40
 8006ba8:	616b      	str	r3, [r5, #20]
 8006baa:	2300      	movs	r3, #0
 8006bac:	9309      	str	r3, [sp, #36]	@ 0x24
 8006bae:	2320      	movs	r3, #32
 8006bb0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006bb4:	f8cd 800c 	str.w	r8, [sp, #12]
 8006bb8:	2330      	movs	r3, #48	@ 0x30
 8006bba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006d58 <_svfiprintf_r+0x1e4>
 8006bbe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006bc2:	f04f 0901 	mov.w	r9, #1
 8006bc6:	4623      	mov	r3, r4
 8006bc8:	469a      	mov	sl, r3
 8006bca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006bce:	b10a      	cbz	r2, 8006bd4 <_svfiprintf_r+0x60>
 8006bd0:	2a25      	cmp	r2, #37	@ 0x25
 8006bd2:	d1f9      	bne.n	8006bc8 <_svfiprintf_r+0x54>
 8006bd4:	ebba 0b04 	subs.w	fp, sl, r4
 8006bd8:	d00b      	beq.n	8006bf2 <_svfiprintf_r+0x7e>
 8006bda:	465b      	mov	r3, fp
 8006bdc:	4622      	mov	r2, r4
 8006bde:	4629      	mov	r1, r5
 8006be0:	4638      	mov	r0, r7
 8006be2:	f7ff ff6b 	bl	8006abc <__ssputs_r>
 8006be6:	3001      	adds	r0, #1
 8006be8:	f000 80a7 	beq.w	8006d3a <_svfiprintf_r+0x1c6>
 8006bec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006bee:	445a      	add	r2, fp
 8006bf0:	9209      	str	r2, [sp, #36]	@ 0x24
 8006bf2:	f89a 3000 	ldrb.w	r3, [sl]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	f000 809f 	beq.w	8006d3a <_svfiprintf_r+0x1c6>
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006c02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c06:	f10a 0a01 	add.w	sl, sl, #1
 8006c0a:	9304      	str	r3, [sp, #16]
 8006c0c:	9307      	str	r3, [sp, #28]
 8006c0e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006c12:	931a      	str	r3, [sp, #104]	@ 0x68
 8006c14:	4654      	mov	r4, sl
 8006c16:	2205      	movs	r2, #5
 8006c18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c1c:	484e      	ldr	r0, [pc, #312]	@ (8006d58 <_svfiprintf_r+0x1e4>)
 8006c1e:	f7f9 fb5f 	bl	80002e0 <memchr>
 8006c22:	9a04      	ldr	r2, [sp, #16]
 8006c24:	b9d8      	cbnz	r0, 8006c5e <_svfiprintf_r+0xea>
 8006c26:	06d0      	lsls	r0, r2, #27
 8006c28:	bf44      	itt	mi
 8006c2a:	2320      	movmi	r3, #32
 8006c2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c30:	0711      	lsls	r1, r2, #28
 8006c32:	bf44      	itt	mi
 8006c34:	232b      	movmi	r3, #43	@ 0x2b
 8006c36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c3a:	f89a 3000 	ldrb.w	r3, [sl]
 8006c3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c40:	d015      	beq.n	8006c6e <_svfiprintf_r+0xfa>
 8006c42:	9a07      	ldr	r2, [sp, #28]
 8006c44:	4654      	mov	r4, sl
 8006c46:	2000      	movs	r0, #0
 8006c48:	f04f 0c0a 	mov.w	ip, #10
 8006c4c:	4621      	mov	r1, r4
 8006c4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c52:	3b30      	subs	r3, #48	@ 0x30
 8006c54:	2b09      	cmp	r3, #9
 8006c56:	d94b      	bls.n	8006cf0 <_svfiprintf_r+0x17c>
 8006c58:	b1b0      	cbz	r0, 8006c88 <_svfiprintf_r+0x114>
 8006c5a:	9207      	str	r2, [sp, #28]
 8006c5c:	e014      	b.n	8006c88 <_svfiprintf_r+0x114>
 8006c5e:	eba0 0308 	sub.w	r3, r0, r8
 8006c62:	fa09 f303 	lsl.w	r3, r9, r3
 8006c66:	4313      	orrs	r3, r2
 8006c68:	9304      	str	r3, [sp, #16]
 8006c6a:	46a2      	mov	sl, r4
 8006c6c:	e7d2      	b.n	8006c14 <_svfiprintf_r+0xa0>
 8006c6e:	9b03      	ldr	r3, [sp, #12]
 8006c70:	1d19      	adds	r1, r3, #4
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	9103      	str	r1, [sp, #12]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	bfbb      	ittet	lt
 8006c7a:	425b      	neglt	r3, r3
 8006c7c:	f042 0202 	orrlt.w	r2, r2, #2
 8006c80:	9307      	strge	r3, [sp, #28]
 8006c82:	9307      	strlt	r3, [sp, #28]
 8006c84:	bfb8      	it	lt
 8006c86:	9204      	strlt	r2, [sp, #16]
 8006c88:	7823      	ldrb	r3, [r4, #0]
 8006c8a:	2b2e      	cmp	r3, #46	@ 0x2e
 8006c8c:	d10a      	bne.n	8006ca4 <_svfiprintf_r+0x130>
 8006c8e:	7863      	ldrb	r3, [r4, #1]
 8006c90:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c92:	d132      	bne.n	8006cfa <_svfiprintf_r+0x186>
 8006c94:	9b03      	ldr	r3, [sp, #12]
 8006c96:	1d1a      	adds	r2, r3, #4
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	9203      	str	r2, [sp, #12]
 8006c9c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006ca0:	3402      	adds	r4, #2
 8006ca2:	9305      	str	r3, [sp, #20]
 8006ca4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006d68 <_svfiprintf_r+0x1f4>
 8006ca8:	7821      	ldrb	r1, [r4, #0]
 8006caa:	2203      	movs	r2, #3
 8006cac:	4650      	mov	r0, sl
 8006cae:	f7f9 fb17 	bl	80002e0 <memchr>
 8006cb2:	b138      	cbz	r0, 8006cc4 <_svfiprintf_r+0x150>
 8006cb4:	9b04      	ldr	r3, [sp, #16]
 8006cb6:	eba0 000a 	sub.w	r0, r0, sl
 8006cba:	2240      	movs	r2, #64	@ 0x40
 8006cbc:	4082      	lsls	r2, r0
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	3401      	adds	r4, #1
 8006cc2:	9304      	str	r3, [sp, #16]
 8006cc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cc8:	4824      	ldr	r0, [pc, #144]	@ (8006d5c <_svfiprintf_r+0x1e8>)
 8006cca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006cce:	2206      	movs	r2, #6
 8006cd0:	f7f9 fb06 	bl	80002e0 <memchr>
 8006cd4:	2800      	cmp	r0, #0
 8006cd6:	d036      	beq.n	8006d46 <_svfiprintf_r+0x1d2>
 8006cd8:	4b21      	ldr	r3, [pc, #132]	@ (8006d60 <_svfiprintf_r+0x1ec>)
 8006cda:	bb1b      	cbnz	r3, 8006d24 <_svfiprintf_r+0x1b0>
 8006cdc:	9b03      	ldr	r3, [sp, #12]
 8006cde:	3307      	adds	r3, #7
 8006ce0:	f023 0307 	bic.w	r3, r3, #7
 8006ce4:	3308      	adds	r3, #8
 8006ce6:	9303      	str	r3, [sp, #12]
 8006ce8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cea:	4433      	add	r3, r6
 8006cec:	9309      	str	r3, [sp, #36]	@ 0x24
 8006cee:	e76a      	b.n	8006bc6 <_svfiprintf_r+0x52>
 8006cf0:	fb0c 3202 	mla	r2, ip, r2, r3
 8006cf4:	460c      	mov	r4, r1
 8006cf6:	2001      	movs	r0, #1
 8006cf8:	e7a8      	b.n	8006c4c <_svfiprintf_r+0xd8>
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	3401      	adds	r4, #1
 8006cfe:	9305      	str	r3, [sp, #20]
 8006d00:	4619      	mov	r1, r3
 8006d02:	f04f 0c0a 	mov.w	ip, #10
 8006d06:	4620      	mov	r0, r4
 8006d08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d0c:	3a30      	subs	r2, #48	@ 0x30
 8006d0e:	2a09      	cmp	r2, #9
 8006d10:	d903      	bls.n	8006d1a <_svfiprintf_r+0x1a6>
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d0c6      	beq.n	8006ca4 <_svfiprintf_r+0x130>
 8006d16:	9105      	str	r1, [sp, #20]
 8006d18:	e7c4      	b.n	8006ca4 <_svfiprintf_r+0x130>
 8006d1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d1e:	4604      	mov	r4, r0
 8006d20:	2301      	movs	r3, #1
 8006d22:	e7f0      	b.n	8006d06 <_svfiprintf_r+0x192>
 8006d24:	ab03      	add	r3, sp, #12
 8006d26:	9300      	str	r3, [sp, #0]
 8006d28:	462a      	mov	r2, r5
 8006d2a:	4b0e      	ldr	r3, [pc, #56]	@ (8006d64 <_svfiprintf_r+0x1f0>)
 8006d2c:	a904      	add	r1, sp, #16
 8006d2e:	4638      	mov	r0, r7
 8006d30:	f3af 8000 	nop.w
 8006d34:	1c42      	adds	r2, r0, #1
 8006d36:	4606      	mov	r6, r0
 8006d38:	d1d6      	bne.n	8006ce8 <_svfiprintf_r+0x174>
 8006d3a:	89ab      	ldrh	r3, [r5, #12]
 8006d3c:	065b      	lsls	r3, r3, #25
 8006d3e:	f53f af2d 	bmi.w	8006b9c <_svfiprintf_r+0x28>
 8006d42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006d44:	e72c      	b.n	8006ba0 <_svfiprintf_r+0x2c>
 8006d46:	ab03      	add	r3, sp, #12
 8006d48:	9300      	str	r3, [sp, #0]
 8006d4a:	462a      	mov	r2, r5
 8006d4c:	4b05      	ldr	r3, [pc, #20]	@ (8006d64 <_svfiprintf_r+0x1f0>)
 8006d4e:	a904      	add	r1, sp, #16
 8006d50:	4638      	mov	r0, r7
 8006d52:	f000 f91b 	bl	8006f8c <_printf_i>
 8006d56:	e7ed      	b.n	8006d34 <_svfiprintf_r+0x1c0>
 8006d58:	08007440 	.word	0x08007440
 8006d5c:	0800744a 	.word	0x0800744a
 8006d60:	00000000 	.word	0x00000000
 8006d64:	08006abd 	.word	0x08006abd
 8006d68:	08007446 	.word	0x08007446

08006d6c <sbrk_aligned>:
 8006d6c:	b570      	push	{r4, r5, r6, lr}
 8006d6e:	4e0f      	ldr	r6, [pc, #60]	@ (8006dac <sbrk_aligned+0x40>)
 8006d70:	460c      	mov	r4, r1
 8006d72:	6831      	ldr	r1, [r6, #0]
 8006d74:	4605      	mov	r5, r0
 8006d76:	b911      	cbnz	r1, 8006d7e <sbrk_aligned+0x12>
 8006d78:	f000 fa7a 	bl	8007270 <_sbrk_r>
 8006d7c:	6030      	str	r0, [r6, #0]
 8006d7e:	4621      	mov	r1, r4
 8006d80:	4628      	mov	r0, r5
 8006d82:	f000 fa75 	bl	8007270 <_sbrk_r>
 8006d86:	1c43      	adds	r3, r0, #1
 8006d88:	d103      	bne.n	8006d92 <sbrk_aligned+0x26>
 8006d8a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006d8e:	4620      	mov	r0, r4
 8006d90:	bd70      	pop	{r4, r5, r6, pc}
 8006d92:	1cc4      	adds	r4, r0, #3
 8006d94:	f024 0403 	bic.w	r4, r4, #3
 8006d98:	42a0      	cmp	r0, r4
 8006d9a:	d0f8      	beq.n	8006d8e <sbrk_aligned+0x22>
 8006d9c:	1a21      	subs	r1, r4, r0
 8006d9e:	4628      	mov	r0, r5
 8006da0:	f000 fa66 	bl	8007270 <_sbrk_r>
 8006da4:	3001      	adds	r0, #1
 8006da6:	d1f2      	bne.n	8006d8e <sbrk_aligned+0x22>
 8006da8:	e7ef      	b.n	8006d8a <sbrk_aligned+0x1e>
 8006daa:	bf00      	nop
 8006dac:	2400050c 	.word	0x2400050c

08006db0 <_malloc_r>:
 8006db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006db4:	1ccd      	adds	r5, r1, #3
 8006db6:	f025 0503 	bic.w	r5, r5, #3
 8006dba:	3508      	adds	r5, #8
 8006dbc:	2d0c      	cmp	r5, #12
 8006dbe:	bf38      	it	cc
 8006dc0:	250c      	movcc	r5, #12
 8006dc2:	2d00      	cmp	r5, #0
 8006dc4:	4606      	mov	r6, r0
 8006dc6:	db01      	blt.n	8006dcc <_malloc_r+0x1c>
 8006dc8:	42a9      	cmp	r1, r5
 8006dca:	d904      	bls.n	8006dd6 <_malloc_r+0x26>
 8006dcc:	230c      	movs	r3, #12
 8006dce:	6033      	str	r3, [r6, #0]
 8006dd0:	2000      	movs	r0, #0
 8006dd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dd6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006eac <_malloc_r+0xfc>
 8006dda:	f000 f9f5 	bl	80071c8 <__malloc_lock>
 8006dde:	f8d8 3000 	ldr.w	r3, [r8]
 8006de2:	461c      	mov	r4, r3
 8006de4:	bb44      	cbnz	r4, 8006e38 <_malloc_r+0x88>
 8006de6:	4629      	mov	r1, r5
 8006de8:	4630      	mov	r0, r6
 8006dea:	f7ff ffbf 	bl	8006d6c <sbrk_aligned>
 8006dee:	1c43      	adds	r3, r0, #1
 8006df0:	4604      	mov	r4, r0
 8006df2:	d158      	bne.n	8006ea6 <_malloc_r+0xf6>
 8006df4:	f8d8 4000 	ldr.w	r4, [r8]
 8006df8:	4627      	mov	r7, r4
 8006dfa:	2f00      	cmp	r7, #0
 8006dfc:	d143      	bne.n	8006e86 <_malloc_r+0xd6>
 8006dfe:	2c00      	cmp	r4, #0
 8006e00:	d04b      	beq.n	8006e9a <_malloc_r+0xea>
 8006e02:	6823      	ldr	r3, [r4, #0]
 8006e04:	4639      	mov	r1, r7
 8006e06:	4630      	mov	r0, r6
 8006e08:	eb04 0903 	add.w	r9, r4, r3
 8006e0c:	f000 fa30 	bl	8007270 <_sbrk_r>
 8006e10:	4581      	cmp	r9, r0
 8006e12:	d142      	bne.n	8006e9a <_malloc_r+0xea>
 8006e14:	6821      	ldr	r1, [r4, #0]
 8006e16:	1a6d      	subs	r5, r5, r1
 8006e18:	4629      	mov	r1, r5
 8006e1a:	4630      	mov	r0, r6
 8006e1c:	f7ff ffa6 	bl	8006d6c <sbrk_aligned>
 8006e20:	3001      	adds	r0, #1
 8006e22:	d03a      	beq.n	8006e9a <_malloc_r+0xea>
 8006e24:	6823      	ldr	r3, [r4, #0]
 8006e26:	442b      	add	r3, r5
 8006e28:	6023      	str	r3, [r4, #0]
 8006e2a:	f8d8 3000 	ldr.w	r3, [r8]
 8006e2e:	685a      	ldr	r2, [r3, #4]
 8006e30:	bb62      	cbnz	r2, 8006e8c <_malloc_r+0xdc>
 8006e32:	f8c8 7000 	str.w	r7, [r8]
 8006e36:	e00f      	b.n	8006e58 <_malloc_r+0xa8>
 8006e38:	6822      	ldr	r2, [r4, #0]
 8006e3a:	1b52      	subs	r2, r2, r5
 8006e3c:	d420      	bmi.n	8006e80 <_malloc_r+0xd0>
 8006e3e:	2a0b      	cmp	r2, #11
 8006e40:	d917      	bls.n	8006e72 <_malloc_r+0xc2>
 8006e42:	1961      	adds	r1, r4, r5
 8006e44:	42a3      	cmp	r3, r4
 8006e46:	6025      	str	r5, [r4, #0]
 8006e48:	bf18      	it	ne
 8006e4a:	6059      	strne	r1, [r3, #4]
 8006e4c:	6863      	ldr	r3, [r4, #4]
 8006e4e:	bf08      	it	eq
 8006e50:	f8c8 1000 	streq.w	r1, [r8]
 8006e54:	5162      	str	r2, [r4, r5]
 8006e56:	604b      	str	r3, [r1, #4]
 8006e58:	4630      	mov	r0, r6
 8006e5a:	f000 f9bb 	bl	80071d4 <__malloc_unlock>
 8006e5e:	f104 000b 	add.w	r0, r4, #11
 8006e62:	1d23      	adds	r3, r4, #4
 8006e64:	f020 0007 	bic.w	r0, r0, #7
 8006e68:	1ac2      	subs	r2, r0, r3
 8006e6a:	bf1c      	itt	ne
 8006e6c:	1a1b      	subne	r3, r3, r0
 8006e6e:	50a3      	strne	r3, [r4, r2]
 8006e70:	e7af      	b.n	8006dd2 <_malloc_r+0x22>
 8006e72:	6862      	ldr	r2, [r4, #4]
 8006e74:	42a3      	cmp	r3, r4
 8006e76:	bf0c      	ite	eq
 8006e78:	f8c8 2000 	streq.w	r2, [r8]
 8006e7c:	605a      	strne	r2, [r3, #4]
 8006e7e:	e7eb      	b.n	8006e58 <_malloc_r+0xa8>
 8006e80:	4623      	mov	r3, r4
 8006e82:	6864      	ldr	r4, [r4, #4]
 8006e84:	e7ae      	b.n	8006de4 <_malloc_r+0x34>
 8006e86:	463c      	mov	r4, r7
 8006e88:	687f      	ldr	r7, [r7, #4]
 8006e8a:	e7b6      	b.n	8006dfa <_malloc_r+0x4a>
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	42a3      	cmp	r3, r4
 8006e92:	d1fb      	bne.n	8006e8c <_malloc_r+0xdc>
 8006e94:	2300      	movs	r3, #0
 8006e96:	6053      	str	r3, [r2, #4]
 8006e98:	e7de      	b.n	8006e58 <_malloc_r+0xa8>
 8006e9a:	230c      	movs	r3, #12
 8006e9c:	6033      	str	r3, [r6, #0]
 8006e9e:	4630      	mov	r0, r6
 8006ea0:	f000 f998 	bl	80071d4 <__malloc_unlock>
 8006ea4:	e794      	b.n	8006dd0 <_malloc_r+0x20>
 8006ea6:	6005      	str	r5, [r0, #0]
 8006ea8:	e7d6      	b.n	8006e58 <_malloc_r+0xa8>
 8006eaa:	bf00      	nop
 8006eac:	24000510 	.word	0x24000510

08006eb0 <_printf_common>:
 8006eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006eb4:	4616      	mov	r6, r2
 8006eb6:	4698      	mov	r8, r3
 8006eb8:	688a      	ldr	r2, [r1, #8]
 8006eba:	690b      	ldr	r3, [r1, #16]
 8006ebc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	bfb8      	it	lt
 8006ec4:	4613      	movlt	r3, r2
 8006ec6:	6033      	str	r3, [r6, #0]
 8006ec8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006ecc:	4607      	mov	r7, r0
 8006ece:	460c      	mov	r4, r1
 8006ed0:	b10a      	cbz	r2, 8006ed6 <_printf_common+0x26>
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	6033      	str	r3, [r6, #0]
 8006ed6:	6823      	ldr	r3, [r4, #0]
 8006ed8:	0699      	lsls	r1, r3, #26
 8006eda:	bf42      	ittt	mi
 8006edc:	6833      	ldrmi	r3, [r6, #0]
 8006ede:	3302      	addmi	r3, #2
 8006ee0:	6033      	strmi	r3, [r6, #0]
 8006ee2:	6825      	ldr	r5, [r4, #0]
 8006ee4:	f015 0506 	ands.w	r5, r5, #6
 8006ee8:	d106      	bne.n	8006ef8 <_printf_common+0x48>
 8006eea:	f104 0a19 	add.w	sl, r4, #25
 8006eee:	68e3      	ldr	r3, [r4, #12]
 8006ef0:	6832      	ldr	r2, [r6, #0]
 8006ef2:	1a9b      	subs	r3, r3, r2
 8006ef4:	42ab      	cmp	r3, r5
 8006ef6:	dc26      	bgt.n	8006f46 <_printf_common+0x96>
 8006ef8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006efc:	6822      	ldr	r2, [r4, #0]
 8006efe:	3b00      	subs	r3, #0
 8006f00:	bf18      	it	ne
 8006f02:	2301      	movne	r3, #1
 8006f04:	0692      	lsls	r2, r2, #26
 8006f06:	d42b      	bmi.n	8006f60 <_printf_common+0xb0>
 8006f08:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006f0c:	4641      	mov	r1, r8
 8006f0e:	4638      	mov	r0, r7
 8006f10:	47c8      	blx	r9
 8006f12:	3001      	adds	r0, #1
 8006f14:	d01e      	beq.n	8006f54 <_printf_common+0xa4>
 8006f16:	6823      	ldr	r3, [r4, #0]
 8006f18:	6922      	ldr	r2, [r4, #16]
 8006f1a:	f003 0306 	and.w	r3, r3, #6
 8006f1e:	2b04      	cmp	r3, #4
 8006f20:	bf02      	ittt	eq
 8006f22:	68e5      	ldreq	r5, [r4, #12]
 8006f24:	6833      	ldreq	r3, [r6, #0]
 8006f26:	1aed      	subeq	r5, r5, r3
 8006f28:	68a3      	ldr	r3, [r4, #8]
 8006f2a:	bf0c      	ite	eq
 8006f2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f30:	2500      	movne	r5, #0
 8006f32:	4293      	cmp	r3, r2
 8006f34:	bfc4      	itt	gt
 8006f36:	1a9b      	subgt	r3, r3, r2
 8006f38:	18ed      	addgt	r5, r5, r3
 8006f3a:	2600      	movs	r6, #0
 8006f3c:	341a      	adds	r4, #26
 8006f3e:	42b5      	cmp	r5, r6
 8006f40:	d11a      	bne.n	8006f78 <_printf_common+0xc8>
 8006f42:	2000      	movs	r0, #0
 8006f44:	e008      	b.n	8006f58 <_printf_common+0xa8>
 8006f46:	2301      	movs	r3, #1
 8006f48:	4652      	mov	r2, sl
 8006f4a:	4641      	mov	r1, r8
 8006f4c:	4638      	mov	r0, r7
 8006f4e:	47c8      	blx	r9
 8006f50:	3001      	adds	r0, #1
 8006f52:	d103      	bne.n	8006f5c <_printf_common+0xac>
 8006f54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f5c:	3501      	adds	r5, #1
 8006f5e:	e7c6      	b.n	8006eee <_printf_common+0x3e>
 8006f60:	18e1      	adds	r1, r4, r3
 8006f62:	1c5a      	adds	r2, r3, #1
 8006f64:	2030      	movs	r0, #48	@ 0x30
 8006f66:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006f6a:	4422      	add	r2, r4
 8006f6c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006f70:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006f74:	3302      	adds	r3, #2
 8006f76:	e7c7      	b.n	8006f08 <_printf_common+0x58>
 8006f78:	2301      	movs	r3, #1
 8006f7a:	4622      	mov	r2, r4
 8006f7c:	4641      	mov	r1, r8
 8006f7e:	4638      	mov	r0, r7
 8006f80:	47c8      	blx	r9
 8006f82:	3001      	adds	r0, #1
 8006f84:	d0e6      	beq.n	8006f54 <_printf_common+0xa4>
 8006f86:	3601      	adds	r6, #1
 8006f88:	e7d9      	b.n	8006f3e <_printf_common+0x8e>
	...

08006f8c <_printf_i>:
 8006f8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f90:	7e0f      	ldrb	r7, [r1, #24]
 8006f92:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006f94:	2f78      	cmp	r7, #120	@ 0x78
 8006f96:	4691      	mov	r9, r2
 8006f98:	4680      	mov	r8, r0
 8006f9a:	460c      	mov	r4, r1
 8006f9c:	469a      	mov	sl, r3
 8006f9e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006fa2:	d807      	bhi.n	8006fb4 <_printf_i+0x28>
 8006fa4:	2f62      	cmp	r7, #98	@ 0x62
 8006fa6:	d80a      	bhi.n	8006fbe <_printf_i+0x32>
 8006fa8:	2f00      	cmp	r7, #0
 8006faa:	f000 80d1 	beq.w	8007150 <_printf_i+0x1c4>
 8006fae:	2f58      	cmp	r7, #88	@ 0x58
 8006fb0:	f000 80b8 	beq.w	8007124 <_printf_i+0x198>
 8006fb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006fb8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006fbc:	e03a      	b.n	8007034 <_printf_i+0xa8>
 8006fbe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006fc2:	2b15      	cmp	r3, #21
 8006fc4:	d8f6      	bhi.n	8006fb4 <_printf_i+0x28>
 8006fc6:	a101      	add	r1, pc, #4	@ (adr r1, 8006fcc <_printf_i+0x40>)
 8006fc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006fcc:	08007025 	.word	0x08007025
 8006fd0:	08007039 	.word	0x08007039
 8006fd4:	08006fb5 	.word	0x08006fb5
 8006fd8:	08006fb5 	.word	0x08006fb5
 8006fdc:	08006fb5 	.word	0x08006fb5
 8006fe0:	08006fb5 	.word	0x08006fb5
 8006fe4:	08007039 	.word	0x08007039
 8006fe8:	08006fb5 	.word	0x08006fb5
 8006fec:	08006fb5 	.word	0x08006fb5
 8006ff0:	08006fb5 	.word	0x08006fb5
 8006ff4:	08006fb5 	.word	0x08006fb5
 8006ff8:	08007137 	.word	0x08007137
 8006ffc:	08007063 	.word	0x08007063
 8007000:	080070f1 	.word	0x080070f1
 8007004:	08006fb5 	.word	0x08006fb5
 8007008:	08006fb5 	.word	0x08006fb5
 800700c:	08007159 	.word	0x08007159
 8007010:	08006fb5 	.word	0x08006fb5
 8007014:	08007063 	.word	0x08007063
 8007018:	08006fb5 	.word	0x08006fb5
 800701c:	08006fb5 	.word	0x08006fb5
 8007020:	080070f9 	.word	0x080070f9
 8007024:	6833      	ldr	r3, [r6, #0]
 8007026:	1d1a      	adds	r2, r3, #4
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	6032      	str	r2, [r6, #0]
 800702c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007030:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007034:	2301      	movs	r3, #1
 8007036:	e09c      	b.n	8007172 <_printf_i+0x1e6>
 8007038:	6833      	ldr	r3, [r6, #0]
 800703a:	6820      	ldr	r0, [r4, #0]
 800703c:	1d19      	adds	r1, r3, #4
 800703e:	6031      	str	r1, [r6, #0]
 8007040:	0606      	lsls	r6, r0, #24
 8007042:	d501      	bpl.n	8007048 <_printf_i+0xbc>
 8007044:	681d      	ldr	r5, [r3, #0]
 8007046:	e003      	b.n	8007050 <_printf_i+0xc4>
 8007048:	0645      	lsls	r5, r0, #25
 800704a:	d5fb      	bpl.n	8007044 <_printf_i+0xb8>
 800704c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007050:	2d00      	cmp	r5, #0
 8007052:	da03      	bge.n	800705c <_printf_i+0xd0>
 8007054:	232d      	movs	r3, #45	@ 0x2d
 8007056:	426d      	negs	r5, r5
 8007058:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800705c:	4858      	ldr	r0, [pc, #352]	@ (80071c0 <_printf_i+0x234>)
 800705e:	230a      	movs	r3, #10
 8007060:	e011      	b.n	8007086 <_printf_i+0xfa>
 8007062:	6821      	ldr	r1, [r4, #0]
 8007064:	6833      	ldr	r3, [r6, #0]
 8007066:	0608      	lsls	r0, r1, #24
 8007068:	f853 5b04 	ldr.w	r5, [r3], #4
 800706c:	d402      	bmi.n	8007074 <_printf_i+0xe8>
 800706e:	0649      	lsls	r1, r1, #25
 8007070:	bf48      	it	mi
 8007072:	b2ad      	uxthmi	r5, r5
 8007074:	2f6f      	cmp	r7, #111	@ 0x6f
 8007076:	4852      	ldr	r0, [pc, #328]	@ (80071c0 <_printf_i+0x234>)
 8007078:	6033      	str	r3, [r6, #0]
 800707a:	bf14      	ite	ne
 800707c:	230a      	movne	r3, #10
 800707e:	2308      	moveq	r3, #8
 8007080:	2100      	movs	r1, #0
 8007082:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007086:	6866      	ldr	r6, [r4, #4]
 8007088:	60a6      	str	r6, [r4, #8]
 800708a:	2e00      	cmp	r6, #0
 800708c:	db05      	blt.n	800709a <_printf_i+0x10e>
 800708e:	6821      	ldr	r1, [r4, #0]
 8007090:	432e      	orrs	r6, r5
 8007092:	f021 0104 	bic.w	r1, r1, #4
 8007096:	6021      	str	r1, [r4, #0]
 8007098:	d04b      	beq.n	8007132 <_printf_i+0x1a6>
 800709a:	4616      	mov	r6, r2
 800709c:	fbb5 f1f3 	udiv	r1, r5, r3
 80070a0:	fb03 5711 	mls	r7, r3, r1, r5
 80070a4:	5dc7      	ldrb	r7, [r0, r7]
 80070a6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80070aa:	462f      	mov	r7, r5
 80070ac:	42bb      	cmp	r3, r7
 80070ae:	460d      	mov	r5, r1
 80070b0:	d9f4      	bls.n	800709c <_printf_i+0x110>
 80070b2:	2b08      	cmp	r3, #8
 80070b4:	d10b      	bne.n	80070ce <_printf_i+0x142>
 80070b6:	6823      	ldr	r3, [r4, #0]
 80070b8:	07df      	lsls	r7, r3, #31
 80070ba:	d508      	bpl.n	80070ce <_printf_i+0x142>
 80070bc:	6923      	ldr	r3, [r4, #16]
 80070be:	6861      	ldr	r1, [r4, #4]
 80070c0:	4299      	cmp	r1, r3
 80070c2:	bfde      	ittt	le
 80070c4:	2330      	movle	r3, #48	@ 0x30
 80070c6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80070ca:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80070ce:	1b92      	subs	r2, r2, r6
 80070d0:	6122      	str	r2, [r4, #16]
 80070d2:	f8cd a000 	str.w	sl, [sp]
 80070d6:	464b      	mov	r3, r9
 80070d8:	aa03      	add	r2, sp, #12
 80070da:	4621      	mov	r1, r4
 80070dc:	4640      	mov	r0, r8
 80070de:	f7ff fee7 	bl	8006eb0 <_printf_common>
 80070e2:	3001      	adds	r0, #1
 80070e4:	d14a      	bne.n	800717c <_printf_i+0x1f0>
 80070e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80070ea:	b004      	add	sp, #16
 80070ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070f0:	6823      	ldr	r3, [r4, #0]
 80070f2:	f043 0320 	orr.w	r3, r3, #32
 80070f6:	6023      	str	r3, [r4, #0]
 80070f8:	4832      	ldr	r0, [pc, #200]	@ (80071c4 <_printf_i+0x238>)
 80070fa:	2778      	movs	r7, #120	@ 0x78
 80070fc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007100:	6823      	ldr	r3, [r4, #0]
 8007102:	6831      	ldr	r1, [r6, #0]
 8007104:	061f      	lsls	r7, r3, #24
 8007106:	f851 5b04 	ldr.w	r5, [r1], #4
 800710a:	d402      	bmi.n	8007112 <_printf_i+0x186>
 800710c:	065f      	lsls	r7, r3, #25
 800710e:	bf48      	it	mi
 8007110:	b2ad      	uxthmi	r5, r5
 8007112:	6031      	str	r1, [r6, #0]
 8007114:	07d9      	lsls	r1, r3, #31
 8007116:	bf44      	itt	mi
 8007118:	f043 0320 	orrmi.w	r3, r3, #32
 800711c:	6023      	strmi	r3, [r4, #0]
 800711e:	b11d      	cbz	r5, 8007128 <_printf_i+0x19c>
 8007120:	2310      	movs	r3, #16
 8007122:	e7ad      	b.n	8007080 <_printf_i+0xf4>
 8007124:	4826      	ldr	r0, [pc, #152]	@ (80071c0 <_printf_i+0x234>)
 8007126:	e7e9      	b.n	80070fc <_printf_i+0x170>
 8007128:	6823      	ldr	r3, [r4, #0]
 800712a:	f023 0320 	bic.w	r3, r3, #32
 800712e:	6023      	str	r3, [r4, #0]
 8007130:	e7f6      	b.n	8007120 <_printf_i+0x194>
 8007132:	4616      	mov	r6, r2
 8007134:	e7bd      	b.n	80070b2 <_printf_i+0x126>
 8007136:	6833      	ldr	r3, [r6, #0]
 8007138:	6825      	ldr	r5, [r4, #0]
 800713a:	6961      	ldr	r1, [r4, #20]
 800713c:	1d18      	adds	r0, r3, #4
 800713e:	6030      	str	r0, [r6, #0]
 8007140:	062e      	lsls	r6, r5, #24
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	d501      	bpl.n	800714a <_printf_i+0x1be>
 8007146:	6019      	str	r1, [r3, #0]
 8007148:	e002      	b.n	8007150 <_printf_i+0x1c4>
 800714a:	0668      	lsls	r0, r5, #25
 800714c:	d5fb      	bpl.n	8007146 <_printf_i+0x1ba>
 800714e:	8019      	strh	r1, [r3, #0]
 8007150:	2300      	movs	r3, #0
 8007152:	6123      	str	r3, [r4, #16]
 8007154:	4616      	mov	r6, r2
 8007156:	e7bc      	b.n	80070d2 <_printf_i+0x146>
 8007158:	6833      	ldr	r3, [r6, #0]
 800715a:	1d1a      	adds	r2, r3, #4
 800715c:	6032      	str	r2, [r6, #0]
 800715e:	681e      	ldr	r6, [r3, #0]
 8007160:	6862      	ldr	r2, [r4, #4]
 8007162:	2100      	movs	r1, #0
 8007164:	4630      	mov	r0, r6
 8007166:	f7f9 f8bb 	bl	80002e0 <memchr>
 800716a:	b108      	cbz	r0, 8007170 <_printf_i+0x1e4>
 800716c:	1b80      	subs	r0, r0, r6
 800716e:	6060      	str	r0, [r4, #4]
 8007170:	6863      	ldr	r3, [r4, #4]
 8007172:	6123      	str	r3, [r4, #16]
 8007174:	2300      	movs	r3, #0
 8007176:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800717a:	e7aa      	b.n	80070d2 <_printf_i+0x146>
 800717c:	6923      	ldr	r3, [r4, #16]
 800717e:	4632      	mov	r2, r6
 8007180:	4649      	mov	r1, r9
 8007182:	4640      	mov	r0, r8
 8007184:	47d0      	blx	sl
 8007186:	3001      	adds	r0, #1
 8007188:	d0ad      	beq.n	80070e6 <_printf_i+0x15a>
 800718a:	6823      	ldr	r3, [r4, #0]
 800718c:	079b      	lsls	r3, r3, #30
 800718e:	d413      	bmi.n	80071b8 <_printf_i+0x22c>
 8007190:	68e0      	ldr	r0, [r4, #12]
 8007192:	9b03      	ldr	r3, [sp, #12]
 8007194:	4298      	cmp	r0, r3
 8007196:	bfb8      	it	lt
 8007198:	4618      	movlt	r0, r3
 800719a:	e7a6      	b.n	80070ea <_printf_i+0x15e>
 800719c:	2301      	movs	r3, #1
 800719e:	4632      	mov	r2, r6
 80071a0:	4649      	mov	r1, r9
 80071a2:	4640      	mov	r0, r8
 80071a4:	47d0      	blx	sl
 80071a6:	3001      	adds	r0, #1
 80071a8:	d09d      	beq.n	80070e6 <_printf_i+0x15a>
 80071aa:	3501      	adds	r5, #1
 80071ac:	68e3      	ldr	r3, [r4, #12]
 80071ae:	9903      	ldr	r1, [sp, #12]
 80071b0:	1a5b      	subs	r3, r3, r1
 80071b2:	42ab      	cmp	r3, r5
 80071b4:	dcf2      	bgt.n	800719c <_printf_i+0x210>
 80071b6:	e7eb      	b.n	8007190 <_printf_i+0x204>
 80071b8:	2500      	movs	r5, #0
 80071ba:	f104 0619 	add.w	r6, r4, #25
 80071be:	e7f5      	b.n	80071ac <_printf_i+0x220>
 80071c0:	08007451 	.word	0x08007451
 80071c4:	08007462 	.word	0x08007462

080071c8 <__malloc_lock>:
 80071c8:	4801      	ldr	r0, [pc, #4]	@ (80071d0 <__malloc_lock+0x8>)
 80071ca:	f7ff bc75 	b.w	8006ab8 <__retarget_lock_acquire_recursive>
 80071ce:	bf00      	nop
 80071d0:	24000508 	.word	0x24000508

080071d4 <__malloc_unlock>:
 80071d4:	4801      	ldr	r0, [pc, #4]	@ (80071dc <__malloc_unlock+0x8>)
 80071d6:	f7ff bc70 	b.w	8006aba <__retarget_lock_release_recursive>
 80071da:	bf00      	nop
 80071dc:	24000508 	.word	0x24000508

080071e0 <_realloc_r>:
 80071e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071e4:	4607      	mov	r7, r0
 80071e6:	4614      	mov	r4, r2
 80071e8:	460d      	mov	r5, r1
 80071ea:	b921      	cbnz	r1, 80071f6 <_realloc_r+0x16>
 80071ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071f0:	4611      	mov	r1, r2
 80071f2:	f7ff bddd 	b.w	8006db0 <_malloc_r>
 80071f6:	b92a      	cbnz	r2, 8007204 <_realloc_r+0x24>
 80071f8:	f000 f858 	bl	80072ac <_free_r>
 80071fc:	4625      	mov	r5, r4
 80071fe:	4628      	mov	r0, r5
 8007200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007204:	f000 f89c 	bl	8007340 <_malloc_usable_size_r>
 8007208:	4284      	cmp	r4, r0
 800720a:	4606      	mov	r6, r0
 800720c:	d802      	bhi.n	8007214 <_realloc_r+0x34>
 800720e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007212:	d8f4      	bhi.n	80071fe <_realloc_r+0x1e>
 8007214:	4621      	mov	r1, r4
 8007216:	4638      	mov	r0, r7
 8007218:	f7ff fdca 	bl	8006db0 <_malloc_r>
 800721c:	4680      	mov	r8, r0
 800721e:	b908      	cbnz	r0, 8007224 <_realloc_r+0x44>
 8007220:	4645      	mov	r5, r8
 8007222:	e7ec      	b.n	80071fe <_realloc_r+0x1e>
 8007224:	42b4      	cmp	r4, r6
 8007226:	4622      	mov	r2, r4
 8007228:	4629      	mov	r1, r5
 800722a:	bf28      	it	cs
 800722c:	4632      	movcs	r2, r6
 800722e:	f000 f82f 	bl	8007290 <memcpy>
 8007232:	4629      	mov	r1, r5
 8007234:	4638      	mov	r0, r7
 8007236:	f000 f839 	bl	80072ac <_free_r>
 800723a:	e7f1      	b.n	8007220 <_realloc_r+0x40>

0800723c <memmove>:
 800723c:	4288      	cmp	r0, r1
 800723e:	b510      	push	{r4, lr}
 8007240:	eb01 0402 	add.w	r4, r1, r2
 8007244:	d902      	bls.n	800724c <memmove+0x10>
 8007246:	4284      	cmp	r4, r0
 8007248:	4623      	mov	r3, r4
 800724a:	d807      	bhi.n	800725c <memmove+0x20>
 800724c:	1e43      	subs	r3, r0, #1
 800724e:	42a1      	cmp	r1, r4
 8007250:	d008      	beq.n	8007264 <memmove+0x28>
 8007252:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007256:	f803 2f01 	strb.w	r2, [r3, #1]!
 800725a:	e7f8      	b.n	800724e <memmove+0x12>
 800725c:	4402      	add	r2, r0
 800725e:	4601      	mov	r1, r0
 8007260:	428a      	cmp	r2, r1
 8007262:	d100      	bne.n	8007266 <memmove+0x2a>
 8007264:	bd10      	pop	{r4, pc}
 8007266:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800726a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800726e:	e7f7      	b.n	8007260 <memmove+0x24>

08007270 <_sbrk_r>:
 8007270:	b538      	push	{r3, r4, r5, lr}
 8007272:	4d06      	ldr	r5, [pc, #24]	@ (800728c <_sbrk_r+0x1c>)
 8007274:	2300      	movs	r3, #0
 8007276:	4604      	mov	r4, r0
 8007278:	4608      	mov	r0, r1
 800727a:	602b      	str	r3, [r5, #0]
 800727c:	f7fa f8a2 	bl	80013c4 <_sbrk>
 8007280:	1c43      	adds	r3, r0, #1
 8007282:	d102      	bne.n	800728a <_sbrk_r+0x1a>
 8007284:	682b      	ldr	r3, [r5, #0]
 8007286:	b103      	cbz	r3, 800728a <_sbrk_r+0x1a>
 8007288:	6023      	str	r3, [r4, #0]
 800728a:	bd38      	pop	{r3, r4, r5, pc}
 800728c:	24000514 	.word	0x24000514

08007290 <memcpy>:
 8007290:	440a      	add	r2, r1
 8007292:	4291      	cmp	r1, r2
 8007294:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007298:	d100      	bne.n	800729c <memcpy+0xc>
 800729a:	4770      	bx	lr
 800729c:	b510      	push	{r4, lr}
 800729e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072a6:	4291      	cmp	r1, r2
 80072a8:	d1f9      	bne.n	800729e <memcpy+0xe>
 80072aa:	bd10      	pop	{r4, pc}

080072ac <_free_r>:
 80072ac:	b538      	push	{r3, r4, r5, lr}
 80072ae:	4605      	mov	r5, r0
 80072b0:	2900      	cmp	r1, #0
 80072b2:	d041      	beq.n	8007338 <_free_r+0x8c>
 80072b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072b8:	1f0c      	subs	r4, r1, #4
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	bfb8      	it	lt
 80072be:	18e4      	addlt	r4, r4, r3
 80072c0:	f7ff ff82 	bl	80071c8 <__malloc_lock>
 80072c4:	4a1d      	ldr	r2, [pc, #116]	@ (800733c <_free_r+0x90>)
 80072c6:	6813      	ldr	r3, [r2, #0]
 80072c8:	b933      	cbnz	r3, 80072d8 <_free_r+0x2c>
 80072ca:	6063      	str	r3, [r4, #4]
 80072cc:	6014      	str	r4, [r2, #0]
 80072ce:	4628      	mov	r0, r5
 80072d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072d4:	f7ff bf7e 	b.w	80071d4 <__malloc_unlock>
 80072d8:	42a3      	cmp	r3, r4
 80072da:	d908      	bls.n	80072ee <_free_r+0x42>
 80072dc:	6820      	ldr	r0, [r4, #0]
 80072de:	1821      	adds	r1, r4, r0
 80072e0:	428b      	cmp	r3, r1
 80072e2:	bf01      	itttt	eq
 80072e4:	6819      	ldreq	r1, [r3, #0]
 80072e6:	685b      	ldreq	r3, [r3, #4]
 80072e8:	1809      	addeq	r1, r1, r0
 80072ea:	6021      	streq	r1, [r4, #0]
 80072ec:	e7ed      	b.n	80072ca <_free_r+0x1e>
 80072ee:	461a      	mov	r2, r3
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	b10b      	cbz	r3, 80072f8 <_free_r+0x4c>
 80072f4:	42a3      	cmp	r3, r4
 80072f6:	d9fa      	bls.n	80072ee <_free_r+0x42>
 80072f8:	6811      	ldr	r1, [r2, #0]
 80072fa:	1850      	adds	r0, r2, r1
 80072fc:	42a0      	cmp	r0, r4
 80072fe:	d10b      	bne.n	8007318 <_free_r+0x6c>
 8007300:	6820      	ldr	r0, [r4, #0]
 8007302:	4401      	add	r1, r0
 8007304:	1850      	adds	r0, r2, r1
 8007306:	4283      	cmp	r3, r0
 8007308:	6011      	str	r1, [r2, #0]
 800730a:	d1e0      	bne.n	80072ce <_free_r+0x22>
 800730c:	6818      	ldr	r0, [r3, #0]
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	6053      	str	r3, [r2, #4]
 8007312:	4408      	add	r0, r1
 8007314:	6010      	str	r0, [r2, #0]
 8007316:	e7da      	b.n	80072ce <_free_r+0x22>
 8007318:	d902      	bls.n	8007320 <_free_r+0x74>
 800731a:	230c      	movs	r3, #12
 800731c:	602b      	str	r3, [r5, #0]
 800731e:	e7d6      	b.n	80072ce <_free_r+0x22>
 8007320:	6820      	ldr	r0, [r4, #0]
 8007322:	1821      	adds	r1, r4, r0
 8007324:	428b      	cmp	r3, r1
 8007326:	bf04      	itt	eq
 8007328:	6819      	ldreq	r1, [r3, #0]
 800732a:	685b      	ldreq	r3, [r3, #4]
 800732c:	6063      	str	r3, [r4, #4]
 800732e:	bf04      	itt	eq
 8007330:	1809      	addeq	r1, r1, r0
 8007332:	6021      	streq	r1, [r4, #0]
 8007334:	6054      	str	r4, [r2, #4]
 8007336:	e7ca      	b.n	80072ce <_free_r+0x22>
 8007338:	bd38      	pop	{r3, r4, r5, pc}
 800733a:	bf00      	nop
 800733c:	24000510 	.word	0x24000510

08007340 <_malloc_usable_size_r>:
 8007340:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007344:	1f18      	subs	r0, r3, #4
 8007346:	2b00      	cmp	r3, #0
 8007348:	bfbc      	itt	lt
 800734a:	580b      	ldrlt	r3, [r1, r0]
 800734c:	18c0      	addlt	r0, r0, r3
 800734e:	4770      	bx	lr

08007350 <_init>:
 8007350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007352:	bf00      	nop
 8007354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007356:	bc08      	pop	{r3}
 8007358:	469e      	mov	lr, r3
 800735a:	4770      	bx	lr

0800735c <_fini>:
 800735c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800735e:	bf00      	nop
 8007360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007362:	bc08      	pop	{r3}
 8007364:	469e      	mov	lr, r3
 8007366:	4770      	bx	lr
